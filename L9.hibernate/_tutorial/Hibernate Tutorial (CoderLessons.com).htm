<!DOCTYPE html>
<html lang="ru-RU">
<head>
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<meta charset="UTF-8" />

<link rel="canonical" href="https://coderlessons.com/articles/java/hibernate-tutorial-ultimate-guide-pdf-download" />


 <style id="kirki-css-vars">:root{}</style>
 <title>Hibernate Tutorial - ULTIMATE Guide (PDF Download) - CoderLessons.com</title>
 <style id="rocket-critical-css">.wp-block-media-text .wp-block-media-text__media{grid-area:media-text-media;margin:0}.wp-block-media-text .wp-block-media-text__content{word-break:break-word;grid-area:media-text-content;padding:0 8%}body{font-family:inherit}html{font-family:sans-serif;-webkit-text-size-adjust:100%;-ms-text-size-adjust:100%}body{margin:0}article,header{display:block}a{background:transparent}h1{margin:.67em 0;font-size:2em}img{border:0}input{margin:0;font:inherit;color:inherit}input[type="submit"]{-webkit-appearance:button}input::-moz-focus-inner{padding:0;border:0}input{line-height:normal}input[type="search"]{-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;-webkit-appearance:textfield}input[type="search"]::-webkit-search-cancel-button,input[type="search"]::-webkit-search-decoration{-webkit-appearance:none}*{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box}*:before,*:after{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box}html{font-size:62.5%}body{font-family:"Helvetica Neue",Helvetica,Arial,sans-serif;font-size:14px;line-height:1.42857143;color:#333;background-color:#fff}input{font-family:inherit;font-size:inherit;line-height:inherit}a{color:#428bca;text-decoration:none}img{vertical-align:middle}h1,h2{font-family:inherit;font-weight:500;line-height:1.1;color:inherit}h1,h2{margin-top:20px;margin-bottom:10px}h1{font-size:36px}h2{font-size:30px}p{margin:0 0 10px}ul{margin-top:0;margin-bottom:10px}ul ul{margin-bottom:0}.container{padding-right:15px;padding-left:15px;margin-right:auto;margin-left:auto}@media (min-width:768px){.container{width:750px}}@media (min-width:992px){.container{width:970px}}@media (min-width:1200px){.container{width:1170px}}.row{margin-right:-15px;margin-left:-15px}.col-md-4,.col-md-8,.col-md-12{position:relative;min-height:1px;padding-right:15px;padding-left:15px}@media (min-width:992px){.col-md-4,.col-md-8,.col-md-12{float:left}.col-md-12{width:100%}.col-md-8{width:66.66666667%}.col-md-4{width:33.33333333%}}input[type="search"]{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box}input[type="search"]{-webkit-appearance:none}.btn{display:inline-block;padding:6px 12px;margin-bottom:0;font-size:14px;font-weight:normal;line-height:1.42857143;text-align:center;white-space:nowrap;vertical-align:middle;background-image:none;border:1px solid transparent;border-radius:4px}.collapse{display:none}.nav{padding-left:0;margin-bottom:0;list-style:none}.nav>li{position:relative;display:block}.nav>li>a{position:relative;display:block;padding:10px 15px}.navbar{position:relative;min-height:50px;margin-bottom:20px;border:1px solid transparent}@media (min-width:768px){.navbar{border-radius:4px}}.navbar-collapse{max-height:340px;padding-right:15px;padding-left:15px;overflow-x:visible;-webkit-overflow-scrolling:touch;border-top:1px solid transparent;box-shadow:inset 0 1px 0 rgba(255,255,255,.1)}@media (min-width:768px){.navbar-collapse{width:auto;border-top:0;box-shadow:none}.navbar-collapse.collapse{display:block!important;height:auto!important;padding-bottom:0;overflow:visible!important}}.navbar-toggle{position:relative;float:right;padding:9px 10px;margin-top:8px;margin-right:15px;margin-bottom:8px;background-color:transparent;background-image:none;border:1px solid transparent;border-radius:4px}@media (min-width:768px){.navbar-toggle{display:none}}.navbar-default{background-color:#f8f8f8;border-color:#e7e7e7}.navbar-default .navbar-toggle{border-color:#ddd}.navbar-default .navbar-collapse{border-color:#e7e7e7}.clearfix:before,.clearfix:after,.container:before,.container:after,.row:before,.row:after,.nav:before,.nav:after,.navbar:before,.navbar:after,.navbar-collapse:before,.navbar-collapse:after{display:table;content:" "}.clearfix:after,.container:after,.row:after,.nav:after,.navbar:after,.navbar-collapse:after{clear:both}@-ms-viewport{width:device-width}body{font-family:Arial,sans-serif;margin-top:0!important;background:#ffffff;font-size:15px;color:#333333;line-height:1.75}p{margin-bottom:25px}a{color:#1F5DEA;text-decoration:underline}h1,h2{margin-top:0;margin-bottom:15px;font-weight:bold;line-height:1.25;color:#2A2F35;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.blog-post-single .entry-content h2{margin-top:30px}h1{font-size:36px}h2{font-size:24px}input[type="search"]{box-shadow:none}input{border:1px solid #E2E3E7;background-color:#ffffff;padding:6px 13px;color:#000000;vertical-align:middle;box-shadow:none;line-height:26px;border-radius:0}input:-moz-placeholder,input:-ms-input-placeholder,input::-webkit-input-placeholder{color:#989898;font-size:13px}.btn,input[type="submit"]{padding:13px 30px;line-height:1;background:#1F5DEA;border:1px solid #1F5DEA;color:#ffffff;text-align:left;text-shadow:none;text-decoration:none;vertical-align:middle;filter:none;box-shadow:none;text-align:center;font-size:12px;text-transform:uppercase;letter-spacing:1px;border-radius:0}.btn.btn-grey{background:#ECEFF3;border-color:#ECEFF3;color:#000000}.clear{clear:both}.entry-content{overflow:visible;position:relative}.entry-content img{height:auto;max-width:100%}header{background:#ffffff;background-repeat:no-repeat;background-position:top center}header .container{padding:0}header .col-md-12{display:flex;height:200px;align-items:center}header .logo{display:inline-block}header .logo-link.logo-text{color:#2A2F35;font-size:30px;text-decoration:none;line-height:1}header .header-left{text-align:left;padding-left:15px;flex-shrink:0}header .header-center{text-align:center;flex-grow:1}header .header-right{text-align:right;padding-right:15px;flex-shrink:0}header .search-toggle-wrapper{display:inline-block;position:relative}header .search-toggle-wrapper .searchform{position:absolute;right:30px;top:-5px;width:0;overflow:hidden}header .search-toggle-wrapper .field{border-radius:10px;width:200px}header .search-toggle-wrapper .searchform .submit{display:none}header .social-icons-wrapper+.search-toggle-wrapper a.search-toggle-btn{border-left:1px solid #E2E3E7}header a.search-toggle-btn{font-size:16px;color:#000000;padding-left:15px;margin-left:10px}header .social-icons-wrapper{display:inline-block}header .social-icons-wrapper a{margin-bottom:0}header.main-header.fixed{position:fixed;top:0;width:100%;z-index:5000;padding-top:0;padding-bottom:0;margin-bottom:0!important;box-shadow:0 2px 5px -2px rgba(0,0,0,0.15),0px 5px 17px -2px rgba(0,0,0,0.15);display:none}header.main-header.fixed .col-md-12{height:auto;padding-top:15px;padding-bottom:15px}.navbar{border-radius:0;border:none;margin:0;position:static}.nav>li.menu-item-has-children>a:after{display:inline-block;font-family:"fontawesome";content:"";font-style:normal;font-weight:normal;margin-left:10px;margin-right:0}.nav>li{padding-top:20px;padding-bottom:20px;position:relative;float:left}.nav>li>a{color:#000000;display:block;padding:2px 18px;margin-left:0;margin-right:0;text-decoration:none;background:transparent}.navbar-center-wrapper{width:100%;margin-left:0;margin-right:0;padding-top:0;padding-bottom:0}.navbar{background:none;min-height:0}.navbar-collapse{padding:0;max-height:inherit;clear:both;position:relative;box-shadow:none}.navbar .nav ul{list-style:none;line-height:1.2}.navbar .navbar-toggle{text-transform:uppercase;display:none;position:relative;float:none;left:50%;transform:translateX(-50%)}.nav .sub-menu{display:none;position:absolute;margin:0;text-align:left;z-index:10000;padding:0}.nav>li .sub-menu{margin-top:0;background:#ffffff;border:1px solid #ffffff;box-shadow:0 2px 5px -2px rgba(0,0,0,0.15),0px 5px 17px -2px rgba(0,0,0,0.15)}.nav>li>.sub-menu{margin-top:25px}.navbar .nav .sub-menu li{float:none;position:relative}.nav .sub-menu li.menu-item>a{display:block;background:transparent;color:#000000;font-weight:normal;min-width:250px;text-decoration:none;padding:8px 20px;border:none;border-left:0;border-right:0;border-bottom:0}.navbar-default .navbar-collapse{border:none}.navbar{position:relative}.navbar .container{padding-left:15px;padding-right:0;position:relative;width:100%}.navbar{margin-left:0;min-height:0}.mainmenu-mobile-toggle{display:inline-block;font-size:18px;color:#000000;margin-right:20px;display:none}.mainmenu-mobile-toggle i{border:1px solid #E2E3E7;padding:8px;text-align:center}.mainmenu .nav{display:table;margin:0 auto;padding-left:0;padding-right:0}.mainmenu .nav>li>a{font-size:18px;line-height:24px}.mainmenu.mainmenu-noarrow .nav>li.menu-item-has-children>a:after{display:none}.blog-post-reading-progress{border-bottom:4px solid #000000;display:block;top:0;position:absolute;width:0}.single-post .page-item-title-single .saxon-post .post-title{font-size:40px;max-width:70%;word-wrap:break-word;margin:10px auto;margin-bottom:15px}.single-post .page-item-title-single .saxon-post .saxon-post-details{text-align:center}.single-post .page-item-title-single .saxon-post>.post-categories{margin-bottom:0;justify-content:center}.page-item-title-single{padding-top:0;padding-bottom:0;margin-bottom:60px}.container-page-item-title{padding:0;background-size:cover;background-position:center center;text-align:center}.container-page-item-title .row{margin:0}.content-block .post-container{margin-top:45px}header+.content-block .post-container{margin-top:0}.sidebar.sidebar-right #post-sidebar{padding-left:30px}.sidebar{margin-top:0;margin-bottom:60px}.content-block .sidebar{margin-top:0}.sidebar ul{list-style:none;margin:0;padding:0}.sidebar>ul>li{margin-bottom:50px}.sidebar .widget{padding:0;overflow:hidden;border-radius:0}.sidebar .widgettitle{color:#000000;font-size:22px;margin-bottom:30px;margin-top:0;display:block;text-align:left;border-bottom:1px solid #E2E3E7;padding-top:0;padding-bottom:20px}.sidebar .widget ul>li{padding-top:5px;padding-bottom:5px}.sidebar .widget ul>li:first-child{padding-top:0}.sidebar .widget a{text-decoration:none}.saxon-post .saxon-post-details{padding:0;margin-left:0;margin-right:0;margin-top:0;position:relative;text-align:left;width:100%}.saxon-post .post-title{font-size:24px;display:block;color:#2A2F35;margin-top:0;margin-bottom:15px;word-wrap:break-word}.saxon-post .post-categories{font-weight:normal;text-transform:uppercase;position:relative;font-size:12px;letter-spacing:2px;margin-bottom:5px;display:flex;flex-wrap:wrap}.saxon-post .post-categories a{font-weight:normal;text-decoration:none;padding:3px 8px;background-color:#1F5DEA;color:#ffffff;margin-bottom:3px;margin-right:5px}.saxon-post .post-categories a:last-child{margin-right:0}.saxon-post>.post-categories{margin-bottom:10px}.saxon-post .post-date{display:block;color:#868686;font-size:14px;font-weight:500}.saxon-post a{text-decoration:none}.single-post .blog-post-single{margin-bottom:60px;padding-bottom:0}.blog-post-single .post-content img{max-width:100%;height:auto}.single-post .saxon-social-share-fixed{position:fixed;margin-left:-120px;width:50px;opacity:0}.single-post .saxon-social-share-fixed .post-social-wrapper .post-social a{background:#ffffff;width:40px;height:40px;margin-bottom:10px;line-height:40px;text-align:center;border-radius:50%;font-size:18px;box-shadow:0 2px 5px -2px rgba(0,0,0,0.15),0px 3px 8px -2px rgba(0,0,0,0.15)}.single-post .saxon-social-share-fixed .post-social-wrapper .post-social a.facebook-share{color:#3b5998}.single-post .saxon-social-share-fixed .post-social-wrapper .post-social a.twitter-share{color:#00aced}.single-post .saxon-social-share-fixed .post-social-wrapper .post-social a.pinterest-share{color:#cb2027}.single-post .saxon-social-share-fixed .post-social-wrapper .post-social a.linkedin-share{color:#1178B3}.single-post .saxon-social-share-fixed .post-social-wrapper .post-social a.linkedin-share{color:#1178B3}.post-social-wrapper{display:inline-block}.post-social-wrapper .post-social{display:inline-block}.post-social-wrapper .post-social-title{display:inline-block;color:#B6B6B6;display:none}.post-social-wrapper .post-social a{color:#000000;display:inline-block;font-size:14px;height:20px;line-height:20px;text-align:center;width:25px}.social-icons-wrapper a{text-align:center;display:inline-block;font-size:18px;margin-right:8px;margin-left:8px;margin-bottom:5px;color:#000000}.social-icons-wrapper a:first-child{margin-left:0}.blog-style-corners-rounded input,.blog-style-corners-rounded .btn,.blog-style-corners-rounded input[type="submit"],.blog-style-corners-rounded .nav>li .sub-menu,.blog-style-corners-rounded .mainmenu-mobile-toggle i,.blog-style-corners-rounded .container-page-item-title,.blog-style-corners-rounded .saxon-post .post-categories a{border-radius:5px}a:not([href]){text-decoration:none;color:#000000}@media (max-width:1400px){.single-post .saxon-social-share-fixed{display:none}}@media (max-width:1024px){.mainmenu .nav>li>a{padding-left:10px;padding-right:10px}.social-icons-wrapper a:first-child{margin-left:10px}}@media (max-width:991px){.sidebar.sidebar-right #post-sidebar{padding-left:0}header.main-header{margin-top:40px;margin-bottom:40px;background:none!important}header.main-header.sticky-header.fixed{display:none!important}header>.container>.row{margin:0}header .col-md-12{flex-wrap:wrap;height:auto!important}header .header-left,header .header-right{width:50%;flex-grow:0;flex-shrink:0}header .header-center{order:3;width:100%}header .header-left{padding-left:0;display:flex;align-items:center}header .header-right{padding-right:0}header .logo{margin-right:15px}.navbar-collapse.collapse{display:none!important}.navbar .navbar-toggle{display:none}.nav>li{padding-top:0!important;padding-bottom:0!important}.nav>li.menu-item-has-children>a:after{margin-top:0;margin-right:0;float:right;content:""}.nav li{display:block;width:100%}.nav>li.menu-item>a{text-align:left;margin-left:0;margin-right:0;padding:0;border:none;background:none}.navbar .nav>li>a{padding-top:5px;padding-bottom:5px}.nav>li .sub-menu{display:none;opacity:1;transform:matrix(1,0,0,1,0,0)}.nav .sub-menu{z-index:0;padding:0;position:relative;margin-left:10px;border:none!important;box-shadow:none!important;margin-top:0!important;margin-left:0;left:0!important}.nav .sub-menu li.menu-item>a{min-height:0;background:none;padding:10px 0;padding-left:15px;display:block;width:auto;border:none!important}.mainmenu{background:none!important}.mainmenu-mobile-toggle{display:inline-block}.mainmenu .nav>li>a{font-size:16px;padding-left:0;padding-right:0}.mainmenu .nav{margin-top:40px;display:block}.mainmenu .container{padding:0}.mainmenu.mainmenu-noarrow .navbar .nav>li.menu-item-has-children>a:after{display:block}}@media (max-width:767px){.container-page-item-title.container{margin-left:15px;margin-right:15px}.page-item-title-single{padding-top:0;padding-bottom:0}.single-post .page-item-title-single .saxon-post .post-title{max-width:100%;padding-left:0;padding-right:0;font-size:28px}.page-item-title-single,.sidebar,.sidebar>ul>li{margin-bottom:40px}}@media (max-width:568px){header .logo-link.logo-text{font-size:30px!important}header .social-icons-wrapper a{margin-left:4px;margin-right:4px}}@media (min-width:768px){.container-page-item-title.container{width:720px}}@media (min-width:992px){.container-page-item-title.container{width:940px}}@media (min-width:1200px){.container-page-item-title.container{width:1140px}}@media (min-width:991px){.nav .sub-menu{display:block;margin:0;opacity:0;transform:matrix(0,0,0,0,0,0);-ms-transform:matrix(0,0,0,0,0,0);-webkit-transform:matrix(0,0,0,0,0,0);-webkit-transform-style:preserve-3d;-webkit-backface-visibility:hidden}}.navbar,.navbar-collapse,.navbar .navbar-inner .container{position:static!important}.navbar .navbar-inner .container{position:relative}@media (max-width:991px){.nav>li>.sub-menu{z-index:10000}.nav>li>.sub-menu{width:100%!important;left:0;position:relative!important}.nav .sub-menu{margin-left:0}.nav>li>.sub-menu>li{width:100%!important}}header .col-md-12{height:120px}.navbar .nav>li{padding-top:20px;padding-bottom:20px}.nav>li>.sub-menu{margin-top:20px}header .logo-link.logo-text{font-family:;font-size:40px;color:#000000}h1,h2,.sidebar .widgettitle{font-family:'-apple-system, BlinkMacSystemFont, Roboto, Oxygen-Sans, Ubuntu, Cantarell, "Helvetica Neue", sans-serif'}body{font-family:-apple-system,BlinkMacSystemFont,Roboto,Oxygen-Sans,Ubuntu,Cantarell,"Helvetica Neue",sans-serif;letter-spacing:0.1px;font-size:16px}.btn,input[type="submit"],.mainmenu li.menu-item>a,.saxon-post .post-categories,.saxon-post .post-date{font-family:-apple-system,BlinkMacSystemFont,Roboto,Oxygen-Sans,Ubuntu,Cantarell,"Helvetica Neue",sans-serif}header{background-color:#f7f7f7}.container-page-item-title.container{margin-top:60px}@media (max-width:991px){.container-page-item-title.container{margin-top:40px}}body{color:#000000;background-color:#ffffff}.btn,input[type="submit"],.saxon-post .post-categories a{background-color:#1F5DEA}a{color:#1F5DEA}.btn,input[type="submit"]{border-color:#1F5DEA}.nav>li .sub-menu{background-color:#FFFFFF}.nav .sub-menu li.menu-item>a{color:#000000}.navbar .nav>li>a{color:#000000}.blog-post-reading-progress{border-color:#000000}</style>
 <link rel="preload" href="style.css" data-rocket-async="style" as="style" onload="this.onload=null;this.rel='stylesheet'" media="all" data-minify="1" />
  <link href='https://fonts.gstatic.com' crossorigin rel='preconnect' />
<style type="text/css">
img.wp-smiley,
img.emoji {
	display: inline !important;
	border: none !important;
	box-shadow: none !important;
	height: 1em !important;
	width: 1em !important;
	margin: 0 .07em !important;
	vertical-align: -0.1em !important;
	background: none !important;
	padding: 0 !important;
}
</style>


<style>
    .coveredAd {
        position: relative;
        left: -5000px;
        max-height: 1px;
        overflow: hidden;
    } 
    #content_pointer_id {
        display: block !important;
        width: 100% !important;
    }
    .rfwp_removedMarginTop {
        margin-top: 0 !important;
    }
    .rfwp_removedMarginBottom {
        margin-bottom: 0 !important;
    }
</style>

</head>

<body class="post-template-default single single-post postid-144403 single-format-standard blog-post-transparent-header-disable blog-small-page-width blog-slider-disable blog-enable-images-animations blog-style-corners-rounded">

<div class="content-block">
<div class="container container-page-item-title" data-style="">
	<div class="row">
		<div class="col-md-12 col-overlay">
			<div class="container">
				<div class="row">
					<div class="col-md-12">
						<div class="page-item-title-single">
														<div class="saxon-post-single saxon-post">
								<div class="post-categories"><a href="https://coderlessons.com/articles" data-style="background-color: #81d742;">Статьи</a></div>
								<div class="saxon-post-details">
									<h1 class="post-title">Hibernate Tutorial &#8211; ULTIMATE Guide (PDF Download)</h1>
																		<div class="post-date">Ноябрь 16, 2018</div>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>
<div class="post-container container span-col-md-8">
	<div class="row">
		<div class="col-md-8">
			<div class="blog-post blog-post-single clearfix">
				<article id="post-144403" class="post-144403 post type-post status-publish format-standard hentry category-java" role="main">
					<div class="post-content-wrapper">

						<div class="post-content clearfix">
																																			<div class="entry-content">

							<span id="content_pointer_id" data-content-length="65541" data-accepted-blocks="137"></span><div class="entry">
<p> <span> <em><strong>ПРИМЕЧАНИЕ РЕДАКЦИИ:</strong> В этом посте мы представляем всеобъемлющее руководство по Hibernate.</em></span> <span> <em>Hibernate ORM (вкратце Hibernate) — это структура объектно-реляционного сопоставления, облегчающая преобразование объектно-ориентированной модели предметной области в традиционную реляционную базу данных.</em></span> <span> <em>Hibernate решает проблемы несоответствия объектно-реляционного импеданса, заменяя прямые обращения к базе данных, связанные с постоянством, высокоуровневыми функциями обработки объектов.</em></span> </p>
<p> <span> <em>Hibernate — одна из самых популярных платформ Java.</em></span> <span> <em>По этой причине мы предоставили множество учебников здесь, на Java Code Geeks, большинство из которых можно найти <a href="https://translate.googleusercontent.com/translate_c?depth=1&amp;rurl=translate.google.ru&amp;sl=en&amp;sp=nmt4&amp;tl=ru&amp;u=https://www.javacodegeeks.com/tutorials/java-tutorials/enterprise-java-tutorials/&amp;usg=ALkJrhgAP40923gdt8VbM-JcHwqVey6iCw#Hibernate">здесь</a> .</em></span> </p>
<p> <span> <em>Теперь мы хотели создать отдельную справочную статью, которая предоставит платформу для работы с Hibernate и поможет вам быстро запустить приложения Hibernate.</em></span> <span> <em>Наслаждайтесь!</em></span> </p>
<div class="ulp-inline" data-id="EelW6SUHCPfAItu8" id="ulp-inline-container-0">
<div class="ulp-inline-spinner" id="ulp-inline-spinner-EelW6SUHCPfAItu8">
<div class="ulp-spinner ulp-spinner-classic"/></div>
</div>
<div class="toc">
<h3> <span> Содержание</span> </h3>
<dl>
<dt> <span> <a href="https://coderlessons.com/articles/java/hibernate-tutorial-ultimate-guide-pdf-download">1. Введение</a></span> </dt>
<dt> <span> <a href="https://coderlessons.com/articles/java/hibernate-tutorial-ultimate-guide-pdf-download">2. Настройка проекта</a></span> </dt>
<dt> <span> <a href="https://coderlessons.com/articles/java/hibernate-tutorial-ultimate-guide-pdf-download">3. Основы</a></span> </dt>
<dd>
<dl>
<dt> <span> <a href="https://coderlessons.com/articles/java/hibernate-tutorial-ultimate-guide-pdf-download">3.1.</a></span> <span> <a href="https://coderlessons.com/articles/java/hibernate-tutorial-ultimate-guide-pdf-download">SessionFactory и Session</a></span> </dt>
<dt> <span> <a href="https://coderlessons.com/articles/java/hibernate-tutorial-ultimate-guide-pdf-download">3.2.</a></span> <span> <a href="https://coderlessons.com/articles/java/hibernate-tutorial-ultimate-guide-pdf-download">операции</a></span> </dt>
<dt> <span> <a href="https://coderlessons.com/articles/java/hibernate-tutorial-ultimate-guide-pdf-download">3.3.</a></span> <span> <a href="https://coderlessons.com/articles/java/hibernate-tutorial-ultimate-guide-pdf-download">таблицы</a></span> </dt>
</dl>
</dd>
<dt> <span> <a href="https://coderlessons.com/articles/java/hibernate-tutorial-ultimate-guide-pdf-download">4. Наследование</a></span> </dt>
<dt> <span> <a href="https://coderlessons.com/articles/java/hibernate-tutorial-ultimate-guide-pdf-download">5. Отношения</a></span> </dt>
<dd>
<dl>
<dt> <span> <a href="https://coderlessons.com/articles/java/hibernate-tutorial-ultimate-guide-pdf-download">5.1.</a></span> <span> <a href="https://coderlessons.com/articles/java/hibernate-tutorial-ultimate-guide-pdf-download">Один к одному</a></span> </dt>
<dt> <span> <a href="https://coderlessons.com/articles/java/hibernate-tutorial-ultimate-guide-pdf-download">5.2.</a></span> <span> <a href="https://coderlessons.com/articles/java/hibernate-tutorial-ultimate-guide-pdf-download">Один ко многим</a></span> </dt>
<dt> <span> <a href="https://coderlessons.com/articles/java/hibernate-tutorial-ultimate-guide-pdf-download">5.3.</a></span> <span> <a href="https://coderlessons.com/articles/java/hibernate-tutorial-ultimate-guide-pdf-download">ManyToMany</a></span> </dt>
<dt> <span> <a href="https://coderlessons.com/articles/java/hibernate-tutorial-ultimate-guide-pdf-download">5.4.</a></span> <span> <a href="https://coderlessons.com/articles/java/hibernate-tutorial-ultimate-guide-pdf-download">Составные части</a></span> </dt>
</dl>
</dd>
<dt> <span> <a href="https://coderlessons.com/articles/java/hibernate-tutorial-ultimate-guide-pdf-download">6. Пользовательские типы данных</a></span> </dt>
<dt> <span> <a href="https://coderlessons.com/articles/java/hibernate-tutorial-ultimate-guide-pdf-download">7. Перехватчики</a></span> </dt>
<dt> <span> <a href="https://coderlessons.com/articles/java/hibernate-tutorial-ultimate-guide-pdf-download">8. Скачать</a></span> </dt>
</dl>
</div>
<h2><a name="introduction"/> <span> Вступление</span> </h2>
<p> <span> Hibernate является одной из самых популярных инфраструктур объектно-реляционного сопоставления (ORM) в мире Java.</span> <span> Это позволяет разработчикам отображать структуры объектов обычных классов Java в реляционную структуру базы данных.</span> <span> С помощью инфраструктуры ORM работа по сохранению данных из экземпляров объектов в памяти в постоянное хранилище данных и их загрузке обратно в ту же структуру объектов становится значительно проще.</span> </p>
<p> <span> В то же время решения ORM, такие как Hibernate, стремятся абстрагироваться от конкретного продукта, используемого для хранения данных.</span> <span> Это позволяет использовать один и тот же код Java с различными продуктами баз данных без необходимости писать код, который обрабатывает тонкие различия между поддерживаемыми продуктами.</span> </p>
<p> <span> Hibernate также является провайдером JPA, что означает, что он реализует <a href="https://coderlessons.com/articles/java/jpa-tutorial-ultimate-guide-pdf-download">API персистентности Java (JPA)</a> .</span> <span> JPA является независимой от производителя спецификацией для отображения объектов Java в таблицы реляционных баз данных.</span> <span> Поскольку другая статья серии Ultimate уже посвящена JPA, эта статья посвящена Hibernate и поэтому использует не аннотации JPA, а файлы конфигурации, специфичные для Hibernate.</span> </p>
<p> <span> Hibernate состоит из трех различных компонентов:</span> </p>
<ul>
<li> <span> <strong>Объекты</strong> : классы, которые отображаются в Hibernate на таблицы системы реляционных баз данных, являются простыми классами Java (Plain Old Java Objects).</span> </li>
<li> <span> <strong>Объектно-реляционные метаданные</strong> : информация о том, как отобразить объекты в реляционную базу данных, предоставляется либо аннотациями (начиная с Java 1.5), либо устаревшими файлами конфигурации на основе XML.</span> <span> Информация в этих файлах используется во время выполнения для отображения в хранилище данных и обратно в объекты Java.</span> </li>
<li> <span> <strong>Язык запросов Hibernate (HQL)</strong> : при использовании Hibernate запросы, отправляемые в базу данных, не нужно формулировать в собственном SQL, но их можно указать с помощью языка запросов Hibernate.</span> <span> Поскольку эти запросы переводятся во время выполнения на используемый в настоящее время диалект выбранного продукта, запросы, сформулированные на HQL, не зависят от диалекта SQL конкретного поставщика.</span> </li>
</ul>
<p> <span> В этом руководстве мы рассмотрим различные аспекты инфраструктуры и разработаем простое приложение Java SE, которое сохраняет и извлекает данные в / из реляционной базы данных.</span> <span> Мы будем использовать следующие библиотеки / среды:</span> </p>
<ul>
<li> <span> maven&gt; = 3.0 в качестве среды сборки</span> </li>
<li> <span> Спящий режим (4.3.8.Final)</span> </li>
<li> <span> H2 как реляционная база данных (1.3.176)</span> </li>
</ul>
<h2><a name="setup"/> <span> Настройка проекта</span> </h2>
<p> <span> В качестве первого шага мы создадим простой проект maven в командной строке:</span> </p>
<div>
<div class="syntaxhighlighter bash" id="highlighter_343463">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="bash plain">mvn archetype:create -DgroupId=com.javacodegeeks.ultimate -DartifactId=hibernate</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p> <span> Эта команда создаст следующую структуру в файловой системе:</span> </p>
<div>
<div class="syntaxhighlighter bash" id="highlighter_240792">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">01</div>
<div class="line number2 index1 alt1">02</div>
<div class="line number3 index2 alt2">03</div>
<div class="line number4 index3 alt1">04</div>
<div class="line number5 index4 alt2">05</div>
<div class="line number6 index5 alt1">06</div>
<div class="line number7 index6 alt2">07</div>
<div class="line number8 index7 alt1">08</div>
<div class="line number9 index8 alt2">09</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
<div class="line number12 index11 alt1">12</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="bash plain">|-- src</code></div>
<div class="line number2 index1 alt1"><code class="bash plain">|   |-- main</code></div>
<div class="line number3 index2 alt2"><code class="bash plain">|   |   `-- java</code></div>
<div class="line number4 index3 alt1"><code class="bash plain">|   |       `-- com </code></div>
<div class="line number5 index4 alt2"><code class="bash plain">|   |           `-- javacodegeeks</code></div>
<div class="line number6 index5 alt1"><code class="bash plain">|   |                `-- ultimate</code></div>
<div class="line number7 index6 alt2"><code class="bash plain">|   `-- </code><code class="bash functions">test</code></div>
<div class="line number8 index7 alt1"><code class="bash plain">|   |   `-- java</code></div>
<div class="line number9 index8 alt2"><code class="bash plain">|   |       `-- com </code></div>
<div class="line number10 index9 alt1"><code class="bash plain">|   |           `-- javacodegeeks</code></div>
<div class="line number11 index10 alt2"><code class="bash plain">|   |                `-- ultimate</code></div>
<div class="line number12 index11 alt1"><code class="bash plain">`-- pom.xml</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p><span> Библиотеки, от которых зависит наша реализация, добавляются в раздел зависимостей файла <code>pom.xml</code> следующим образом:</span> </p>
<div>
<div class="syntaxhighlighter xml" id="highlighter_811375">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">01</div>
<div class="line number2 index1 alt1">02</div>
<div class="line number3 index2 alt2">03</div>
<div class="line number4 index3 alt1">04</div>
<div class="line number5 index4 alt2">05</div>
<div class="line number6 index5 alt1">06</div>
<div class="line number7 index6 alt2">07</div>
<div class="line number8 index7 alt1">08</div>
<div class="line number9 index8 alt2">09</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
<div class="line number12 index11 alt1">12</div>
<div class="line number13 index12 alt2">13</div>
<div class="line number14 index13 alt1">14</div>
<div class="line number15 index14 alt2">15</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="xml plain">1.3.176</code></div>
<div class="line number2 index1 alt1"><code class="xml plain">4.3.8.Final</code></div>
<div class="line number3 index2 alt2"> </div>
<div class="line number4 index3 alt1"> </div>
<div class="line number5 index4 alt2"> </div>
<div class="line number6 index5 alt1"> </div>
<div class="line number7 index6 alt2"><code class="xml spaces">    </code><code class="xml plain">com.h2database</code></div>
<div class="line number8 index7 alt1"><code class="xml spaces">    </code><code class="xml plain">h2</code></div>
<div class="line number9 index8 alt2"><code class="xml spaces">    </code><code class="xml plain">${h2.version}</code></div>
<div class="line number10 index9 alt1"> </div>
<div class="line number11 index10 alt2"> </div>
<div class="line number12 index11 alt1"><code class="xml spaces">    </code><code class="xml plain">org.hibernate</code></div>
<div class="line number13 index12 alt2"><code class="xml spaces">    </code><code class="xml plain">hibernate-core</code></div>
<div class="line number14 index13 alt1"><code class="xml spaces">    </code><code class="xml plain">${hibernate.version}</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p> <span> Чтобы получить лучший обзор отдельных версий, мы определяем каждую версию как свойство maven и ссылаемся на нее позже в разделе зависимостей.</span> </p>
<h2><a name="basics"/> <span> 3. Основы</span> </h2>
<h3><a name="sessionmanager"/> <span> 3.1.</span> <span> SessionFactory и Session</span> </h3>
<p> <span> Теперь мы можем приступить к реализации нашего первого отображения O / R.</span> <span> Давайте начнем с простого класса, который предоставляет метод <code>run()</code> который вызывается в <code>main</code> методе приложения:</span> </p>
<div>
<div class="syntaxhighlighter java" id="highlighter_311481">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">01</div>
<div class="line number2 index1 alt1">02</div>
<div class="line number3 index2 alt2">03</div>
<div class="line number4 index3 alt1">04</div>
<div class="line number5 index4 alt2">05</div>
<div class="line number6 index5 alt1">06</div>
<div class="line number7 index6 alt2">07</div>
<div class="line number8 index7 alt1">08</div>
<div class="line number9 index8 alt2">09</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
<div class="line number12 index11 alt1">12</div>
<div class="line number13 index12 alt2">13</div>
<div class="line number14 index13 alt1">14</div>
<div class="line number15 index14 alt2">15</div>
<div class="line number16 index15 alt1">16</div>
<div class="line number17 index16 alt2">17</div>
<div class="line number18 index17 alt1">18</div>
<div class="line number19 index18 alt2">19</div>
<div class="line number20 index19 alt1">20</div>
<div class="line number21 index20 alt2">21</div>
<div class="line number22 index21 alt1">22</div>
<div class="line number23 index22 alt2">23</div>
<div class="line number24 index23 alt1">24</div>
<div class="line number25 index24 alt2">25</div>
<div class="line number26 index25 alt1">26</div>
<div class="line number27 index26 alt2">27</div>
<div class="line number28 index27 alt1">28</div>
<div class="line number29 index28 alt2">29</div>
<div class="line number30 index29 alt1">30</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">Main {</code></div>
<div class="line number2 index1 alt1"><code class="java spaces">    </code><code class="java keyword">private</code> <code class="java keyword">static</code> <code class="java keyword">final</code> <code class="java plain">Logger LOGGER = Logger.getLogger(</code><code class="java string">"Hibernate-Tutorial"</code><code class="java plain">);</code></div>
<div class="line number3 index2 alt2"> </div>
<div class="line number4 index3 alt1"><code class="java spaces">    </code><code class="java keyword">public</code> <code class="java keyword">static</code> <code class="java keyword">void</code> <code class="java plain">main(String[] args) {</code></div>
<div class="line number5 index4 alt2"><code class="java spaces">        </code><code class="java plain">Main main = </code><code class="java keyword">new</code> <code class="java plain">Main();</code></div>
<div class="line number6 index5 alt1"><code class="java spaces">        </code><code class="java plain">main.run();</code></div>
<div class="line number7 index6 alt2"><code class="java spaces">    </code><code class="java plain">}</code></div>
<div class="line number8 index7 alt1"> </div>
<div class="line number9 index8 alt2"><code class="java spaces">    </code><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">run() {</code></div>
<div class="line number10 index9 alt1"><code class="java spaces">        </code><code class="java plain">SessionFactory sessionFactory = </code><code class="java keyword">null</code><code class="java plain">;</code></div>
<div class="line number11 index10 alt2"><code class="java spaces">        </code><code class="java plain">Session session = </code><code class="java keyword">null</code><code class="java plain">;</code></div>
<div class="line number12 index11 alt1"><code class="java spaces">        </code><code class="java keyword">try</code> <code class="java plain">{</code></div>
<div class="line number13 index12 alt2"><code class="java spaces">            </code><code class="java plain">Configuration configuration = </code><code class="java keyword">new</code> <code class="java plain">Configuration();</code></div>
<div class="line number14 index13 alt1"><code class="java spaces">            </code><code class="java plain">configuration.configure(</code><code class="java string">"hibernate.cfg.xml"</code><code class="java plain">);</code></div>
<div class="line number15 index14 alt2"><code class="java spaces">            </code><code class="java plain">ServiceRegistry serviceRegistry = </code><code class="java keyword">new</code> <code class="java plain">StandardServiceRegistryBuilder().applySettings(configuration.getProperties()).build();</code></div>
<div class="line number16 index15 alt1"><code class="java spaces">            </code><code class="java plain">sessionFactory = configuration.buildSessionFactory(serviceRegistry);</code></div>
<div class="line number17 index16 alt2"><code class="java spaces">            </code><code class="java plain">session = sessionFactory.openSession();</code></div>
<div class="line number18 index17 alt1"><code class="java spaces">            </code><code class="java plain">persistPerson(session);</code></div>
<div class="line number19 index18 alt2"><code class="java spaces">        </code><code class="java plain">} </code><code class="java keyword">catch</code> <code class="java plain">(Exception e) {</code></div>
<div class="line number20 index19 alt1"><code class="java spaces">            </code><code class="java plain">LOGGER.log(Level.SEVERE, e.getMessage(), e);</code></div>
<div class="line number21 index20 alt2"><code class="java spaces">        </code><code class="java plain">} </code><code class="java keyword">finally</code> <code class="java plain">{</code></div>
<div class="line number22 index21 alt1"><code class="java spaces">            </code><code class="java keyword">if</code> <code class="java plain">(session != </code><code class="java keyword">null</code><code class="java plain">) {</code></div>
<div class="line number23 index22 alt2"><code class="java spaces">                </code><code class="java plain">session.close();</code></div>
<div class="line number24 index23 alt1"><code class="java spaces">            </code><code class="java plain">}</code></div>
<div class="line number25 index24 alt2"><code class="java spaces">            </code><code class="java keyword">if</code> <code class="java plain">(sessionFactory != </code><code class="java keyword">null</code><code class="java plain">) {</code></div>
<div class="line number26 index25 alt1"><code class="java spaces">                </code><code class="java plain">sessionFactory.close();</code></div>
<div class="line number27 index26 alt2"><code class="java spaces">            </code><code class="java plain">}</code></div>
<div class="line number28 index27 alt1"><code class="java spaces">        </code><code class="java plain">}</code></div>
<div class="line number29 index28 alt2"><code class="java spaces">    </code><code class="java plain">}</code></div>
<div class="line number30 index29 alt1"><code class="java spaces">    </code><code class="java plain">...</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p> <span> Метод <code>run()</code> создает новый экземпляр класса <code>org.hibernate.cfg.Configuration</code> который впоследствии настраивается с использованием XML-файла <code>hibernate.cfg.xml</code> .</span> <span> Поместив файл конфигурации в папку <code>src/main/resources</code> нашего проекта, maven поместит его в корень созданного файла jar.</span> <span> Таким образом, файл находится во время выполнения на пути к классам.</span> </p>
<p> <span> На втором этапе метод <code>run()</code> создает <code>ServiceRegistry</code> которое использует ранее загруженную конфигурацию.</span> <span> Экземпляр этого <code>ServiceRegistry</code> теперь можно передать в качестве аргумента методу <code>buildSessionFactroy()</code> <code>Configuration</code> .</span> <span> Теперь этот <code>SessionFactory</code> можно использовать для получения сеанса, необходимого для хранения и загрузки объектов в основное хранилище данных.</span> </p>
<p> <span> Файл конфигурации <code>hibernate.cfg.xml</code> имеет следующее содержимое:</span> </p>
<div>
<div class="syntaxhighlighter xml" id="highlighter_216253">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">01</div>
<div class="line number2 index1 alt1">02</div>
<div class="line number3 index2 alt2">03</div>
<div class="line number4 index3 alt1">04</div>
<div class="line number5 index4 alt2">05</div>
<div class="line number6 index5 alt1">06</div>
<div class="line number7 index6 alt2">07</div>
<div class="line number8 index7 alt1">08</div>
<div class="line number9 index8 alt2">09</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
<div class="line number12 index11 alt1">12</div>
<div class="line number13 index12 alt2">13</div>
<div class="line number14 index13 alt1">14</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="xml plain">org.h2.Driver</code></div>
<div class="line number2 index1 alt1"><code class="xml plain">jdbc:h2:~/hibernate;AUTOCOMMIT=OFF</code></div>
<div class="line number3 index2 alt2"> </div>
<div class="line number4 index3 alt1"> </div>
<div class="line number5 index4 alt2"><code class="xml plain">1</code></div>
<div class="line number6 index5 alt1"><code class="xml plain">org.hibernate.dialect.H2Dialect</code></div>
<div class="line number7 index6 alt2"><code class="xml plain">thread</code></div>
<div class="line number8 index7 alt1"><code class="xml plain">org.hibernate.cache.internal.NoCacheProvider</code></div>
<div class="line number9 index8 alt2"><code class="xml plain">true</code></div>
<div class="line number10 index9 alt1"><code class="xml plain">true</code></div>
<div class="line number11 index10 alt2"><code class="xml plain">create</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p> <span> Как видно из приведенного выше примера, файл конфигурации определяет набор свойств для фабрики сеансов.</span> <span> Первое свойство <code>connection.driver_class</code> указывает драйвер базы данных, который следует использовать.</span> <span> В нашем примере это драйвер для базы данных H2.</span> <span> Через свойство <code>connection.url</code> указывается JDBC-URL.</span> <span> В нашем случае определяет, что мы хотим использовать h2 и что единственный файл базы данных, в котором H2 хранит свои данные, должен находиться в домашнем каталоге пользователя и иметь имя <code>hibernate</code> ( <code>~/hibernate</code> ).</span> <span> Поскольку мы хотим зафиксировать наши транзакции в примере кода самостоятельно, мы также определяем особую конфигурационную опцию H2 <code>AUTOCOMMIT=OFF</code> .</span> </p>
<p> <span> Затем файл конфигурации определяет имя пользователя и пароль для соединения с базой данных, а также размер пула соединений.</span> <span> Наше приложение-пример просто выполняет код в одном потоке, поэтому мы можем установить размер пула в один.</span> <span> В случае приложения, которое имеет дело с несколькими потоками и пользователями, должен быть выбран соответствующий размер пула.</span> </p>
<p> <span> Свойство <code>dialect</code> указывает класс Java, который выполняет перевод в специфический для базы данных диалект SQL.</span> </p>
<p> <span> Начиная с версии 3.1, Hibernate предоставляет метод с именем <code>SessionFactory.getCurrentSession()</code> который позволяет разработчику получить ссылку на текущий сеанс.</span> <span> С помощью свойства конфигурации <code>current_session_context_class</code> можно настроить, откуда Hibernate должен получать этот сеанс.</span> <span> Значением по умолчанию для этого свойства является <code>jta</code> означающее, что Hibernate получает сеанс из базового API транзакций Java (JTA).</span> <span> Поскольку в этом примере мы не используем JTA, мы указываем Hibernate с <code>thread</code> значений конфигурации сохранять и извлекать сеанс в / из текущего потока.</span> </p>
<p> <span> Для простоты мы не хотим использовать кеш сущностей.</span> <span> Поэтому мы устанавливаем для свойства <code>cache.provider_class</code> значение <code>org.hibernate.cache.internal.NoCacheProvider</code> .</span> </p>
<p> <span> Следующие два параметра указывают Hibernate распечатывать каждый оператор SQL на консоль и форматировать его для лучшей читаемости.</span> <span> Чтобы освободить нас для целей разработки от необходимости создавать схему вручную, мы даем Hibernate с параметром <code>hbm2ddl.auto</code> установленным для <code>create</code> чтобы создавать все таблицы во время запуска.</span> </p>
<p> <span> И последнее, но не менее важное: мы определяем файл ресурсов сопоставления, который содержит всю информацию сопоставления для нашего приложения.</span> <span> Содержание этого файла будет объяснено в следующих разделах.</span> </p>
<p> <span> Как упоминалось выше, сеанс используется для связи с хранилищем данных и фактически представляет собой соединение JDBC.</span> <span> Это означает, что все взаимодействие с соединением осуществляется через сеанс.</span> <span> Он однопоточный и предоставляет кеш для всех объектов, с которыми он до сих пор работал.</span> <span> Поэтому каждый поток в приложении должен работать со своим собственным сеансом, который он получает из фабрики сеансов.</span> </p>
<p> <span> В отличие от сеанса, фабрика сеансов является поточно-ориентированной и обеспечивает неизменный кеш для отображений определений.</span> <span> Для каждой базы данных существует ровно одна фабрика сессий.</span> <span> Необязательно, фабрика сеансов может предоставить в дополнение к кэшу первого уровня сеанса кэш второго уровня приложения.</span> </p>
<h3><a name="transactions"/> <span> 3.2.</span> <span> операции</span> </h3>
<p> <span> В файле конфигурации <code>hibernate.cfg.xml</code> мы настроили управление транзакциями самостоятельно.</span> <span> Следовательно, мы должны вручную запускать и фиксировать или откатывать каждую транзакцию.</span> <span> Следующий код демонстрирует, как получить новую транзакцию из сеанса и как запустить и зафиксировать ее:</span> </p>
<div>
<div class="syntaxhighlighter java" id="highlighter_953270">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">01</div>
<div class="line number2 index1 alt1">02</div>
<div class="line number3 index2 alt2">03</div>
<div class="line number4 index3 alt1">04</div>
<div class="line number5 index4 alt2">05</div>
<div class="line number6 index5 alt1">06</div>
<div class="line number7 index6 alt2">07</div>
<div class="line number8 index7 alt1">08</div>
<div class="line number9 index8 alt2">09</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="java keyword">try</code> <code class="java plain">{</code></div>
<div class="line number2 index1 alt1"><code class="java spaces">    </code><code class="java plain">Transaction transaction = session.getTransaction();</code></div>
<div class="line number3 index2 alt2"><code class="java spaces">    </code><code class="java plain">transaction.begin();</code></div>
<div class="line number4 index3 alt1"><code class="java spaces">    </code><code class="java plain">...</code></div>
<div class="line number5 index4 alt2"><code class="java spaces">    </code><code class="java plain">transaction.commit();</code></div>
<div class="line number6 index5 alt1"><code class="java plain">} </code><code class="java keyword">catch</code> <code class="java plain">(Exception e) {</code></div>
<div class="line number7 index6 alt2"><code class="java spaces">    </code><code class="java keyword">if</code> <code class="java plain">(session.getTransaction().isActive()) {</code></div>
<div class="line number8 index7 alt1"><code class="java spaces">        </code><code class="java plain">session.getTransaction().rollback();</code></div>
<div class="line number9 index8 alt2"><code class="java spaces">    </code><code class="java plain">}</code></div>
<div class="line number10 index9 alt1"><code class="java spaces">    </code><code class="java keyword">throw</code> <code class="java plain">e;</code></div>
<div class="line number11 index10 alt2"><code class="java plain">}</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p> <span> На первом этапе мы вызываем <code>getTransaction()</code> , чтобы получить ссылку для новой транзакции.</span> <span> Эта транзакция немедленно начинается с вызова метода <code>begin()</code> .</span> <span> Если следующий код выполняется без каких-либо исключений, транзакция фиксируется.</span> <span> В случае возникновения исключения и текущей транзакции транзакция откатывается.</span> </p>
<p> <span> Поскольку приведенный выше код одинаков для всех последующих примеров, он не повторяется в точной форме снова и снова.</span> <span> Шаги по преобразованию кода в форму многократного использования, используя, например, шаблон шаблона, оставлены для читателя.</span> </p>
<h3><a name="entitymanager"/> <span> 3.3.</span> <span> таблицы</span> </h3>
<p> <span> Теперь, когда мы узнали о фабриках сессий, сессиях и транзакциях, пришло время начать с отображения первого класса.</span> <span> Чтобы легко начать, мы выбираем простой класс с несколькими простыми атрибутами:</span> </p>
<div>
<div class="syntaxhighlighter java" id="highlighter_896734">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">01</div>
<div class="line number2 index1 alt1">02</div>
<div class="line number3 index2 alt2">03</div>
<div class="line number4 index3 alt1">04</div>
<div class="line number5 index4 alt2">05</div>
<div class="line number6 index5 alt1">06</div>
<div class="line number7 index6 alt2">07</div>
<div class="line number8 index7 alt1">08</div>
<div class="line number9 index8 alt2">09</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
<div class="line number12 index11 alt1">12</div>
<div class="line number13 index12 alt2">13</div>
<div class="line number14 index13 alt1">14</div>
<div class="line number15 index14 alt2">15</div>
<div class="line number16 index15 alt1">16</div>
<div class="line number17 index16 alt2">17</div>
<div class="line number18 index17 alt1">18</div>
<div class="line number19 index18 alt2">19</div>
<div class="line number20 index19 alt1">20</div>
<div class="line number21 index20 alt2">21</div>
<div class="line number22 index21 alt1">22</div>
<div class="line number23 index22 alt2">23</div>
<div class="line number24 index23 alt1">24</div>
<div class="line number25 index24 alt2">25</div>
<div class="line number26 index25 alt1">26</div>
<div class="line number27 index26 alt2">27</div>
<div class="line number28 index27 alt1">28</div>
<div class="line number29 index28 alt2">29</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">Person {</code></div>
<div class="line number2 index1 alt1"><code class="java spaces">    </code><code class="java keyword">private</code> <code class="java plain">Long id;</code></div>
<div class="line number3 index2 alt2"><code class="java spaces">    </code><code class="java keyword">private</code> <code class="java plain">String firstName;</code></div>
<div class="line number4 index3 alt1"><code class="java spaces">    </code><code class="java keyword">private</code> <code class="java plain">String lastName;</code></div>
<div class="line number5 index4 alt2"> </div>
<div class="line number6 index5 alt1"><code class="java spaces">    </code><code class="java keyword">public</code> <code class="java plain">Long getId() {</code></div>
<div class="line number7 index6 alt2"><code class="java spaces">        </code><code class="java keyword">return</code> <code class="java plain">id;</code></div>
<div class="line number8 index7 alt1"><code class="java spaces">    </code><code class="java plain">}</code></div>
<div class="line number9 index8 alt2"> </div>
<div class="line number10 index9 alt1"><code class="java spaces">    </code><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">setId(Long id) {</code></div>
<div class="line number11 index10 alt2"><code class="java spaces">        </code><code class="java keyword">this</code><code class="java plain">.id = id;</code></div>
<div class="line number12 index11 alt1"><code class="java spaces">    </code><code class="java plain">}</code></div>
<div class="line number13 index12 alt2"> </div>
<div class="line number14 index13 alt1"><code class="java spaces">    </code><code class="java keyword">public</code> <code class="java plain">String getFirstName() {</code></div>
<div class="line number15 index14 alt2"><code class="java spaces">        </code><code class="java keyword">return</code> <code class="java plain">firstName;</code></div>
<div class="line number16 index15 alt1"><code class="java spaces">    </code><code class="java plain">}</code></div>
<div class="line number17 index16 alt2"> </div>
<div class="line number18 index17 alt1"><code class="java spaces">    </code><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">setFirstName(String firstName) {</code></div>
<div class="line number19 index18 alt2"><code class="java spaces">        </code><code class="java keyword">this</code><code class="java plain">.firstName = firstName;</code></div>
<div class="line number20 index19 alt1"><code class="java spaces">    </code><code class="java plain">}</code></div>
<div class="line number21 index20 alt2"> </div>
<div class="line number22 index21 alt1"><code class="java spaces">    </code><code class="java keyword">public</code> <code class="java plain">String getLastName() {</code></div>
<div class="line number23 index22 alt2"><code class="java spaces">        </code><code class="java keyword">return</code> <code class="java plain">lastName;</code></div>
<div class="line number24 index23 alt1"><code class="java spaces">    </code><code class="java plain">}</code></div>
<div class="line number25 index24 alt2"> </div>
<div class="line number26 index25 alt1"><code class="java spaces">    </code><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">setLastName(String lastName) {</code></div>
<div class="line number27 index26 alt2"><code class="java spaces">        </code><code class="java keyword">this</code><code class="java plain">.lastName = lastName;</code></div>
<div class="line number28 index27 alt1"><code class="java spaces">    </code><code class="java plain">}</code></div>
<div class="line number29 index28 alt2"><code class="java plain">}</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p> <span> Класс <code>Person</code> поставляется с двумя атрибутами для хранения имени человека ( <code>firstName</code> и <code>lastName</code> ).</span> <span> Поле <code>id</code> используется для хранения уникального идентификатора объекта в виде длинного значения.</span> <span> В этом уроке мы будем использовать файлы сопоставления вместо аннотаций, поэтому мы указываем сопоставление этого класса с таблицей <code>T_PERSON</code> следующим образом:</span> </p>
<div>
<div class="syntaxhighlighter xml" id="highlighter_495673">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">01</div>
<div class="line number2 index1 alt1">02</div>
<div class="line number3 index2 alt2">03</div>
<div class="line number4 index3 alt1">04</div>
<div class="line number5 index4 alt2">05</div>
<div class="line number6 index5 alt1">06</div>
<div class="line number7 index6 alt2">07</div>
<div class="line number8 index7 alt1">08</div>
<div class="line number9 index8 alt2">09</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
<div class="line number12 index11 alt1">12</div>
<div class="line number13 index12 alt2">13</div>
<div class="line number14 index13 alt1">14</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="xml plain">&lt;?</code><code class="xml keyword">xml</code> <code class="xml color1">version</code><code class="xml plain">=</code><code class="xml string">"1.0"</code><code class="xml plain">?&gt;</code></div>
<div class="line number2 index1 alt1"><code class="xml plain">&lt;!</code><code class="xml keyword">DOCTYPE</code> <code class="xml plain">hibernate-mapping PUBLIC</code></div>
<div class="line number3 index2 alt2"><code class="xml spaces">        </code><code class="xml plain">"-//Hibernate/Hibernate Mapping DTD 3.0//EN"</code></div>
<div class="line number4 index3 alt1"><code class="xml spaces">        </code><code class="xml plain">"<a href="http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd</a>"&gt;</code></div>
<div class="line number5 index4 alt2"> </div>
<div class="line number6 index5 alt1"><code class="xml plain">&lt;</code><code class="xml keyword">hibernate-mapping</code> <code class="xml color1">package</code><code class="xml plain">=</code><code class="xml string">"hibernate.entity"</code><code class="xml plain">&gt;</code></div>
<div class="line number7 index6 alt2"><code class="xml spaces">     </code><code class="xml plain">&lt;</code><code class="xml keyword">class</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"Person"</code> <code class="xml color1">table</code><code class="xml plain">=</code><code class="xml string">"T_PERSON"</code><code class="xml plain">&gt;</code></div>
<div class="line number8 index7 alt1"><code class="xml spaces">        </code><code class="xml plain">&lt;</code><code class="xml keyword">id</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"id"</code> <code class="xml color1">column</code><code class="xml plain">=</code><code class="xml string">"ID"</code><code class="xml plain">&gt;</code></div>
<div class="line number9 index8 alt2"><code class="xml spaces">            </code><code class="xml plain">&lt;</code><code class="xml keyword">generator</code> <code class="xml color1">class</code><code class="xml plain">=</code><code class="xml string">"native"</code><code class="xml plain">/&gt;</code></div>
<div class="line number10 index9 alt1"><code class="xml spaces">        </code><code class="xml plain">&lt;/</code><code class="xml keyword">id</code><code class="xml plain">&gt;</code></div>
<div class="line number11 index10 alt2"><code class="xml spaces">        </code><code class="xml plain">&lt;</code><code class="xml keyword">property</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"firstName"</code> <code class="xml color1">column</code><code class="xml plain">=</code><code class="xml string">"FIRST_NAME"</code><code class="xml plain">/&gt;</code></div>
<div class="line number12 index11 alt1"><code class="xml spaces">        </code><code class="xml plain">&lt;</code><code class="xml keyword">property</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"lastName"</code> <code class="xml color1">column</code><code class="xml plain">=</code><code class="xml string">"LAST_NAME"</code><code class="xml plain">/&gt;</code></div>
<div class="line number13 index12 alt2"><code class="xml spaces">      </code><code class="xml plain">&lt;/</code><code class="xml keyword">class</code><code class="xml plain">&gt;</code></div>
<div class="line number14 index13 alt1"><code class="xml plain">&lt;/</code><code class="xml keyword">hibernate-mapping</code><code class="xml plain">&gt;</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p> <span> Элемент XML <code>hibernate-mapping</code> используется для определения пакета, в котором находятся наши сущности (здесь: <code>hibernate.entity</code> ).</span> <span> Внутри этого элемента предусмотрен один элемент <code>class</code> для каждого класса, который должен быть сопоставлен с таблицей в базе данных.</span> </p>
<p> <span> Элемент <code>id</code> указывает имя ( <code>name</code> ) поля класса, которое содержит уникальный идентификатор, и имя столбца, в котором хранится это значение ( <code>ID</code> ).</span> <span> Благодаря своему <code>generator</code> дочерних элементов Hibernate узнает, как создать уникальный идентификатор для каждой сущности.</span> <span> Помимо значения, показанного выше, Hibernate поддерживает длинный список различных стратегий.</span> </p>
<p> <span> <code>native</code> стратегия просто выбирает лучшую стратегию для используемого продукта базы данных.</span> <span> Следовательно, эта стратегия может применяться для различных продуктов.</span> <span> Другими возможными значениями являются, например: <code>sequence</code> (использует последовательность в базе данных), <code>uuid</code> (генерирует 128-битный UUID) и <code>assigned</code> (позволяет приложению присваивать значение самостоятельно).</span> <span> Помимо предопределенных стратегий, можно реализовать собственную стратегию, реализовав интерфейс <code>org.hibernate.id.IdentifierGenerator</code> .</span> </p>
<p> <span> Поля <code>firstName</code> и <code>lastName</code> сопоставляются со столбцами <code>FIRST_NAME</code> и <code>LAST_NAME</code> с помощью <code>property</code> элемента XML.</span> <span> Атрибуты <code>name</code> и <code>column</code> определяют имя поля в классе и столбце соответственно.</span> </p>
<p> <span> Следующий код показывает пример того, как хранить человека в базе данных:</span> </p>
<div>
<div class="syntaxhighlighter java" id="highlighter_608485">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">01</div>
<div class="line number2 index1 alt1">02</div>
<div class="line number3 index2 alt2">03</div>
<div class="line number4 index3 alt1">04</div>
<div class="line number5 index4 alt2">05</div>
<div class="line number6 index5 alt1">06</div>
<div class="line number7 index6 alt2">07</div>
<div class="line number8 index7 alt1">08</div>
<div class="line number9 index8 alt2">09</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
<div class="line number12 index11 alt1">12</div>
<div class="line number13 index12 alt2">13</div>
<div class="line number14 index13 alt1">14</div>
<div class="line number15 index14 alt2">15</div>
<div class="line number16 index15 alt1">16</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="java keyword">private</code> <code class="java keyword">void</code> <code class="java plain">persistPerson(Session session) </code><code class="java keyword">throws</code> <code class="java plain">Exception {</code></div>
<div class="line number2 index1 alt1"><code class="java spaces">    </code><code class="java keyword">try</code> <code class="java plain">{</code></div>
<div class="line number3 index2 alt2"><code class="java spaces">        </code><code class="java plain">Transaction transaction = session.getTransaction();</code></div>
<div class="line number4 index3 alt1"><code class="java spaces">        </code><code class="java plain">transaction.begin();</code></div>
<div class="line number5 index4 alt2"><code class="java spaces">        </code><code class="java plain">Person person = </code><code class="java keyword">new</code> <code class="java plain">Person();</code></div>
<div class="line number6 index5 alt1"><code class="java spaces">        </code><code class="java plain">person.setFirstName(</code><code class="java string">"Homer"</code><code class="java plain">);</code></div>
<div class="line number7 index6 alt2"><code class="java spaces">        </code><code class="java plain">person.setLastName(</code><code class="java string">"Simpson"</code><code class="java plain">);</code></div>
<div class="line number8 index7 alt1"><code class="java spaces">        </code><code class="java plain">session.save(person);</code></div>
<div class="line number9 index8 alt2"><code class="java spaces">        </code><code class="java plain">transaction.commit();</code></div>
<div class="line number10 index9 alt1"><code class="java spaces">    </code><code class="java plain">} </code><code class="java keyword">catch</code> <code class="java plain">(Exception e) {</code></div>
<div class="line number11 index10 alt2"><code class="java spaces">        </code><code class="java keyword">if</code> <code class="java plain">(session.getTransaction().isActive()) {</code></div>
<div class="line number12 index11 alt1"><code class="java spaces">            </code><code class="java plain">session.getTransaction().rollback();</code></div>
<div class="line number13 index12 alt2"><code class="java spaces">        </code><code class="java plain">}</code></div>
<div class="line number14 index13 alt1"><code class="java spaces">        </code><code class="java keyword">throw</code> <code class="java plain">e;</code></div>
<div class="line number15 index14 alt2"><code class="java spaces">    </code><code class="java plain">}</code></div>
<div class="line number16 index15 alt1"><code class="java plain">}</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p> <span> Рядом с кодом для обработки транзакции он создает новый экземпляр класса <code>Person</code> и присваивает два значения полям <code>firstName</code> и <code>lastName</code> .</span> <span> Наконец, он сохраняет человека в базе данных, вызывая метод <code>save()</code> сеанса.</span> </p>
<p> <span> Когда мы выполняем приведенный выше код, на консоли выводятся следующие операторы SQL:</span> </p>
<div>
<div class="syntaxhighlighter sql" id="highlighter_636289">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">01</div>
<div class="line number2 index1 alt1">02</div>
<div class="line number3 index2 alt2">03</div>
<div class="line number4 index3 alt1">04</div>
<div class="line number5 index4 alt2">05</div>
<div class="line number6 index5 alt1">06</div>
<div class="line number7 index6 alt2">07</div>
<div class="line number8 index7 alt1">08</div>
<div class="line number9 index8 alt2">09</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
<div class="line number12 index11 alt1">12</div>
<div class="line number13 index12 alt2">13</div>
<div class="line number14 index13 alt1">14</div>
<div class="line number15 index14 alt2">15</div>
<div class="line number16 index15 alt1">16</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="sql plain">Hibernate: </code></div>
<div class="line number2 index1 alt1"><code class="sql spaces">    </code><code class="sql keyword">drop</code> <code class="sql keyword">table</code> <code class="sql plain">T_PERSON if exists</code></div>
<div class="line number3 index2 alt2"><code class="sql plain">Hibernate: </code></div>
<div class="line number4 index3 alt1"><code class="sql spaces">    </code><code class="sql keyword">create</code> <code class="sql keyword">table</code> <code class="sql plain">T_PERSON (</code></div>
<div class="line number5 index4 alt2"><code class="sql spaces">        </code><code class="sql plain">ID </code><code class="sql keyword">bigint</code> <code class="sql plain">generated </code><code class="sql keyword">by</code> <code class="sql keyword">default</code> <code class="sql keyword">as</code> <code class="sql plain">identity,</code></div>
<div class="line number6 index5 alt1"><code class="sql spaces">        </code><code class="sql plain">FIRST_NAME </code><code class="sql keyword">varchar</code><code class="sql plain">(255),</code></div>
<div class="line number7 index6 alt2"><code class="sql spaces">        </code><code class="sql plain">LAST_NAME </code><code class="sql keyword">varchar</code><code class="sql plain">(255),</code></div>
<div class="line number8 index7 alt1"><code class="sql spaces">        </code><code class="sql keyword">primary</code> <code class="sql keyword">key</code> <code class="sql plain">(ID)</code></div>
<div class="line number9 index8 alt2"><code class="sql spaces">    </code><code class="sql plain">)</code></div>
<div class="line number10 index9 alt1"><code class="sql plain">Hibernate: </code></div>
<div class="line number11 index10 alt2"><code class="sql spaces">    </code><code class="sql keyword">insert</code></div>
<div class="line number12 index11 alt1"><code class="sql spaces">    </code><code class="sql keyword">into</code></div>
<div class="line number13 index12 alt2"><code class="sql spaces">        </code><code class="sql plain">T_PERSON</code></div>
<div class="line number14 index13 alt1"><code class="sql spaces">        </code><code class="sql plain">(ID, firstName, lastName, ID_ID_CARD) </code></div>
<div class="line number15 index14 alt2"><code class="sql spaces">    </code><code class="sql keyword">values</code></div>
<div class="line number16 index15 alt1"><code class="sql spaces">        </code><code class="sql plain">(</code><code class="sql color1">null</code><code class="sql plain">, ?, ?, ?)</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p> <span> Поскольку мы решили позволить Hibernate удалять и создавать таблицы при запуске, первые распечатанные операторы — это <code>drop table</code> и операторы <code>create table</code> .</span> <span> Мы также можем увидеть три столбца <code>ID</code> , <code>FIRST_NAME</code> и <code>LAST_NAME</code> таблицы <code>T_PERSON</code> а также определение первичного ключа (здесь: <code>ID</code> ).</span> </p>
<p> <span> После того, как таблица была создана, вызов <code>session.save()</code> выдает оператор <code>insert</code> в базу данных.</span> <span> Поскольку Hibernate внутренне использует <code>PreparedStatement</code> , мы не видим значений на консоли.</span> <span> Если вы также хотите увидеть значения, которые связаны с параметрами <code>PreparedStatement</code> , вы можете установить уровень ведения журнала для регистратора <code>org.hibernate.type</code> как <code>FINEST</code> .</span> <span> Это делается в файле с именем <code>logging.properties</code> следующего содержания (путь к файлу можно <code>-Djava.util.logging.config.file=src/main/resources/logging.properties</code> например, в виде системного свойства <code>-Djava.util.logging.config.file=src/main/resources/logging.properties</code> ) :</span> </p>
<div>
<div class="syntaxhighlighter bash" id="highlighter_56769">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
<div class="line number5 index4 alt2">5</div>
<div class="line number6 index5 alt1">6</div>
<div class="line number7 index6 alt2">7</div>
<div class="line number8 index7 alt1">8</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="bash plain">.handlers = java.util.logging.ConsoleHandler</code></div>
<div class="line number2 index1 alt1"><code class="bash plain">.level = INFO</code></div>
<div class="line number3 index2 alt2"> </div>
<div class="line number4 index3 alt1"><code class="bash plain">java.util.logging.ConsoleHandler.level = ALL</code></div>
<div class="line number5 index4 alt2"><code class="bash plain">java.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter</code></div>
<div class="line number6 index5 alt1"> </div>
<div class="line number7 index6 alt2"><code class="bash plain">org.hibernate.SQL.level = FINEST</code></div>
<div class="line number8 index7 alt1"><code class="bash plain">org.hibernate.</code><code class="bash functions">type</code><code class="bash plain">.level = FINEST</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p> <span> Установка регистратора <code>org.hibernate.SQL</code> имеет тот же эффект, что и установка для свойства <code>show_sql</code> в файле конфигурации Hibernate значения <code>true</code> .</span> </p>
<p> <span> Теперь вы можете увидеть следующие выходные данные и фактические значения на консоли:</span> </p>
<div>
<div class="syntaxhighlighter sql" id="highlighter_555899">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">01</div>
<div class="line number2 index1 alt1">02</div>
<div class="line number3 index2 alt2">03</div>
<div class="line number4 index3 alt1">04</div>
<div class="line number5 index4 alt2">05</div>
<div class="line number6 index5 alt1">06</div>
<div class="line number7 index6 alt2">07</div>
<div class="line number8 index7 alt1">08</div>
<div class="line number9 index8 alt2">09</div>
<div class="line number10 index9 alt1">10</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="sql plain">DEBUG: </code></div>
<div class="line number2 index1 alt1"><code class="sql spaces">    </code><code class="sql keyword">insert</code></div>
<div class="line number3 index2 alt2"><code class="sql spaces">    </code><code class="sql keyword">into</code></div>
<div class="line number4 index3 alt1"><code class="sql spaces">        </code><code class="sql plain">T_PERSON</code></div>
<div class="line number5 index4 alt2"><code class="sql spaces">        </code><code class="sql plain">(ID, FIRST_NAME, LAST_NAME, ID_ID_CARD) </code></div>
<div class="line number6 index5 alt1"><code class="sql spaces">    </code><code class="sql keyword">values</code></div>
<div class="line number7 index6 alt2"><code class="sql spaces">        </code><code class="sql plain">(</code><code class="sql color1">null</code><code class="sql plain">, ?, ?, ?)</code></div>
<div class="line number8 index7 alt1"><code class="sql plain">TRACE: binding parameter [1] </code><code class="sql keyword">as</code> <code class="sql plain">[</code><code class="sql keyword">VARCHAR</code><code class="sql plain">] - [Homer]</code></div>
<div class="line number9 index8 alt2"><code class="sql plain">TRACE: binding parameter [2] </code><code class="sql keyword">as</code> <code class="sql plain">[</code><code class="sql keyword">VARCHAR</code><code class="sql plain">] - [Simpson]</code></div>
<div class="line number10 index9 alt1"><code class="sql plain">TRACE: binding parameter [3] </code><code class="sql keyword">as</code> <code class="sql plain">[</code><code class="sql keyword">BIGINT</code><code class="sql plain">] - [</code><code class="sql color1">null</code><code class="sql plain">]</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<h2><a name="intheritance"/> <span> 4. Наследование</span> </h2>
<p> <span> Интересной особенностью таких решений отображения O / R, как Hibernate, является использование наследования.</span> <span> Пользователь может выбрать способ сопоставления суперкласса и подкласса с таблицами реляционной базы данных.</span> <span> Hibernate поддерживает следующие стратегии отображения:</span> </p>
<ul>
<li> <span> <strong>Одна таблица на класс</strong> : и суперкласс, и подкласс отображаются в одну и ту же таблицу.</span> <span> В дополнительном столбце указано, является ли строка экземпляром суперкласса или подкласса, а поля, которых нет в суперклассе, оставлены пустыми.</span> </li>
<li> <span> <strong>Объединенный подкласс</strong> : эта стратегия использует отдельную таблицу для каждого класса, тогда как таблица для подкласса хранит только те поля, которые отсутствуют в суперклассе.</span> <span> Чтобы получить все значения для экземпляра подкласса, необходимо выполнить соединение между двумя таблицами.</span> </li>
<li> <span> <strong>Таблица для класса</strong> : эта стратегия также использует отдельную таблицу для каждого класса, но хранит в таблице для подкласса также поля суперкласса.</span> <span> При этой стратегии одна строка в таблице подклассов содержит все значения, и для извлечения всех значений не требуется оператор соединения.</span> </li>
</ul>
<p> <span> Подход, который мы собираемся исследовать, — это подход «Одна таблица на класс».</span> <span> В качестве подкласса человека мы выбираем класс <code>Geek</code> :</span> </p>
<div>
<div class="syntaxhighlighter java" id="highlighter_942218">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">01</div>
<div class="line number2 index1 alt1">02</div>
<div class="line number3 index2 alt2">03</div>
<div class="line number4 index3 alt1">04</div>
<div class="line number5 index4 alt2">05</div>
<div class="line number6 index5 alt1">06</div>
<div class="line number7 index6 alt2">07</div>
<div class="line number8 index7 alt1">08</div>
<div class="line number9 index8 alt2">09</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">Geek </code><code class="java keyword">extends</code> <code class="java plain">Person {</code></div>
<div class="line number2 index1 alt1"><code class="java spaces">    </code><code class="java keyword">private</code> <code class="java plain">String favouriteProgrammingLanguage;</code></div>
<div class="line number3 index2 alt2"> </div>
<div class="line number4 index3 alt1"><code class="java spaces">    </code><code class="java keyword">public</code> <code class="java plain">String getFavouriteProgrammingLanguage() {</code></div>
<div class="line number5 index4 alt2"><code class="java spaces">            </code><code class="java keyword">return</code> <code class="java plain">favouriteProgrammingLanguage;</code></div>
<div class="line number6 index5 alt1"><code class="java spaces">    </code><code class="java plain">}</code></div>
<div class="line number7 index6 alt2"> </div>
<div class="line number8 index7 alt1"><code class="java spaces">    </code><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">setFavouriteProgrammingLanguage(String favouriteProgrammingLanguage) {</code></div>
<div class="line number9 index8 alt2"><code class="java spaces">        </code><code class="java keyword">this</code><code class="java plain">.favouriteProgrammingLanguage = favouriteProgrammingLanguage;</code></div>
<div class="line number10 index9 alt1"><code class="java spaces">    </code><code class="java plain">}</code></div>
<div class="line number11 index10 alt2"><code class="java plain">}</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p> <span> Класс расширяет уже известный класс <code>Person</code> и добавляет дополнительное поле с именем <code>favouriteProgrammingLanguage</code> .</span> <span> Файл сопоставления для этого варианта использования выглядит следующим образом:</span> </p>
<div>
<div class="syntaxhighlighter xml" id="highlighter_335582">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">01</div>
<div class="line number2 index1 alt1">02</div>
<div class="line number3 index2 alt2">03</div>
<div class="line number4 index3 alt1">04</div>
<div class="line number5 index4 alt2">05</div>
<div class="line number6 index5 alt1">06</div>
<div class="line number7 index6 alt2">07</div>
<div class="line number8 index7 alt1">08</div>
<div class="line number9 index8 alt2">09</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
<div class="line number12 index11 alt1">12</div>
<div class="line number13 index12 alt2">13</div>
<div class="line number14 index13 alt1">14</div>
<div class="line number15 index14 alt2">15</div>
<div class="line number16 index15 alt1">16</div>
<div class="line number17 index16 alt2">17</div>
<div class="line number18 index17 alt1">18</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="xml plain">&lt;?</code><code class="xml keyword">xml</code> <code class="xml color1">version</code><code class="xml plain">=</code><code class="xml string">"1.0"</code><code class="xml plain">?&gt;</code></div>
<div class="line number2 index1 alt1"><code class="xml plain">&lt;!</code><code class="xml keyword">DOCTYPE</code> <code class="xml plain">hibernate-mapping PUBLIC</code></div>
<div class="line number3 index2 alt2"><code class="xml spaces">        </code><code class="xml plain">"-//Hibernate/Hibernate Mapping DTD 3.0//EN"</code></div>
<div class="line number4 index3 alt1"><code class="xml spaces">        </code><code class="xml plain">"<a href="http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd</a>"&gt;</code></div>
<div class="line number5 index4 alt2"> </div>
<div class="line number6 index5 alt1"><code class="xml plain">&lt;</code><code class="xml keyword">hibernate-mapping</code> <code class="xml color1">package</code><code class="xml plain">=</code><code class="xml string">"hibernate.entity"</code><code class="xml plain">&gt;</code></div>
<div class="line number7 index6 alt2"><code class="xml spaces">   </code><code class="xml plain">&lt;</code><code class="xml keyword">class</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"Person"</code> <code class="xml color1">table</code><code class="xml plain">=</code><code class="xml string">"T_PERSON"</code><code class="xml plain">&gt;</code></div>
<div class="line number8 index7 alt1"><code class="xml spaces">       </code><code class="xml plain">&lt;</code><code class="xml keyword">id</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"id"</code> <code class="xml color1">column</code><code class="xml plain">=</code><code class="xml string">"ID"</code><code class="xml plain">&gt;</code></div>
<div class="line number9 index8 alt2"><code class="xml spaces">           </code><code class="xml plain">&lt;</code><code class="xml keyword">generator</code> <code class="xml color1">class</code><code class="xml plain">=</code><code class="xml string">"native"</code><code class="xml plain">/&gt;</code></div>
<div class="line number10 index9 alt1"><code class="xml spaces">        </code><code class="xml plain">&lt;/</code><code class="xml keyword">id</code><code class="xml plain">&gt;</code></div>
<div class="line number11 index10 alt2"><code class="xml spaces">        </code><code class="xml plain">&lt;</code><code class="xml keyword">discriminator</code> <code class="xml color1">column</code><code class="xml plain">=</code><code class="xml string">"PERSON_TYPE"</code> <code class="xml color1">type</code><code class="xml plain">=</code><code class="xml string">"string"</code><code class="xml plain">/&gt;</code></div>
<div class="line number12 index11 alt1"><code class="xml spaces">        </code><code class="xml plain">&lt;</code><code class="xml keyword">property</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"firstName"</code> <code class="xml color1">column</code><code class="xml plain">=</code><code class="xml string">"FIRST_NAME"</code><code class="xml plain">/&gt;</code></div>
<div class="line number13 index12 alt2"><code class="xml spaces">        </code><code class="xml plain">&lt;</code><code class="xml keyword">property</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"lastName"</code> <code class="xml color1">column</code><code class="xml plain">=</code><code class="xml string">"LAST_NAME"</code><code class="xml plain">/&gt;</code></div>
<div class="line number14 index13 alt1"><code class="xml spaces">        </code><code class="xml plain">&lt;</code><code class="xml keyword">subclass</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"Geek"</code> <code class="xml color1">extends</code><code class="xml plain">=</code><code class="xml string">"Person"</code><code class="xml plain">&gt;</code></div>
<div class="line number15 index14 alt2"><code class="xml spaces">             </code><code class="xml plain">&lt;</code><code class="xml keyword">property</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"favouriteProgrammingLanguage"</code> <code class="xml color1">column</code><code class="xml plain">=</code><code class="xml string">"FAV_PROG_LANG"</code><code class="xml plain">/&gt;</code></div>
<div class="line number16 index15 alt1"><code class="xml spaces">         </code><code class="xml plain">&lt;/</code><code class="xml keyword">subclass</code><code class="xml plain">&gt;</code></div>
<div class="line number17 index16 alt2"><code class="xml spaces">   </code><code class="xml plain">&lt;/</code><code class="xml keyword">class</code><code class="xml plain">&gt;</code></div>
<div class="line number18 index17 alt1"><code class="xml plain">&lt;/</code><code class="xml keyword">hibernate-mapping</code><code class="xml plain">&gt;</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p> <span> Первым отличием является введение столбца <code>discriminator</code> .</span> <span> Как упоминалось выше, в этом столбце хранится информация о типе текущего экземпляра.</span> <span> В нашем случае мы называем это <code>PERSON_TYPE</code> и позволяем для лучшей читаемости строки обозначать фактический тип.</span> <span> По умолчанию Hibernate принимает только имя класса в этом случае.</span> <span> Для экономии места можно также использовать столбец типа integer.</span> </p>
<p> <span> Помимо дискриминатора мы также добавили элемент <code>subclass</code> который информирует Hibernate о новом классе Java <code>Geek</code> и его поле <code>favouriteProgrammingLanguage</code> которое должно быть сопоставлено со столбцом <code>FAV_PROG_LANG</code> .</span> </p>
<p> <span> В следующем примере кода показано, как хранить экземпляры типа <code>Geek</code> в базе данных:</span> </p>
<div>
<div class="syntaxhighlighter java" id="highlighter_815862">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">01</div>
<div class="line number2 index1 alt1">02</div>
<div class="line number3 index2 alt2">03</div>
<div class="line number4 index3 alt1">04</div>
<div class="line number5 index4 alt2">05</div>
<div class="line number6 index5 alt1">06</div>
<div class="line number7 index6 alt2">07</div>
<div class="line number8 index7 alt1">08</div>
<div class="line number9 index8 alt2">09</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
<div class="line number12 index11 alt1">12</div>
<div class="line number13 index12 alt2">13</div>
<div class="line number14 index13 alt1">14</div>
<div class="line number15 index14 alt2">15</div>
<div class="line number16 index15 alt1">16</div>
<div class="line number17 index16 alt2">17</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="java plain">session.getTransaction().begin();</code></div>
<div class="line number2 index1 alt1"><code class="java plain">Geek geek = </code><code class="java keyword">new</code> <code class="java plain">Geek();</code></div>
<div class="line number3 index2 alt2"><code class="java plain">geek.setFirstName(</code><code class="java string">"Gavin"</code><code class="java plain">);</code></div>
<div class="line number4 index3 alt1"><code class="java plain">geek.setLastName(</code><code class="java string">"Coffee"</code><code class="java plain">);</code></div>
<div class="line number5 index4 alt2"><code class="java plain">geek.setFavouriteProgrammingLanguage(</code><code class="java string">"Java"</code><code class="java plain">);</code></div>
<div class="line number6 index5 alt1"><code class="java plain">session.save(geek);</code></div>
<div class="line number7 index6 alt2"><code class="java plain">geek = </code><code class="java keyword">new</code> <code class="java plain">Geek();</code></div>
<div class="line number8 index7 alt1"><code class="java plain">geek.setFirstName(</code><code class="java string">"Thomas"</code><code class="java plain">);</code></div>
<div class="line number9 index8 alt2"><code class="java plain">geek.setLastName(</code><code class="java string">"Micro"</code><code class="java plain">);</code></div>
<div class="line number10 index9 alt1"><code class="java plain">geek.setFavouriteProgrammingLanguage(</code><code class="java string">"C#"</code><code class="java plain">);</code></div>
<div class="line number11 index10 alt2"><code class="java plain">session.save(geek);</code></div>
<div class="line number12 index11 alt1"><code class="java plain">geek = </code><code class="java keyword">new</code> <code class="java plain">Geek();</code></div>
<div class="line number13 index12 alt2"><code class="java plain">geek.setFirstName(</code><code class="java string">"Christian"</code><code class="java plain">);</code></div>
<div class="line number14 index13 alt1"><code class="java plain">geek.setLastName(</code><code class="java string">"Cup"</code><code class="java plain">);</code></div>
<div class="line number15 index14 alt2"><code class="java plain">geek.setFavouriteProgrammingLanguage(</code><code class="java string">"Java"</code><code class="java plain">);</code></div>
<div class="line number16 index15 alt1"><code class="java plain">session.save(geek);</code></div>
<div class="line number17 index16 alt2"><code class="java plain">session.getTransaction().commit();</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p> <span> Выполнение кода, показанного выше, приводит к следующему выводу:</span> </p>
<div>
<div class="syntaxhighlighter sql" id="highlighter_379668">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">01</div>
<div class="line number2 index1 alt1">02</div>
<div class="line number3 index2 alt2">03</div>
<div class="line number4 index3 alt1">04</div>
<div class="line number5 index4 alt2">05</div>
<div class="line number6 index5 alt1">06</div>
<div class="line number7 index6 alt2">07</div>
<div class="line number8 index7 alt1">08</div>
<div class="line number9 index8 alt2">09</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
<div class="line number12 index11 alt1">12</div>
<div class="line number13 index12 alt2">13</div>
<div class="line number14 index13 alt1">14</div>
<div class="line number15 index14 alt2">15</div>
<div class="line number16 index15 alt1">16</div>
<div class="line number17 index16 alt2">17</div>
<div class="line number18 index17 alt1">18</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="sql plain">Hibernate: </code></div>
<div class="line number2 index1 alt1"><code class="sql spaces">    </code><code class="sql keyword">drop</code> <code class="sql keyword">table</code> <code class="sql plain">T_PERSON if exists</code></div>
<div class="line number3 index2 alt2"><code class="sql plain">Hibernate: </code></div>
<div class="line number4 index3 alt1"><code class="sql spaces">    </code><code class="sql keyword">create</code> <code class="sql keyword">table</code> <code class="sql plain">T_PERSON (</code></div>
<div class="line number5 index4 alt2"><code class="sql spaces">        </code><code class="sql plain">ID </code><code class="sql keyword">bigint</code> <code class="sql plain">generated </code><code class="sql keyword">by</code> <code class="sql keyword">default</code> <code class="sql keyword">as</code> <code class="sql plain">identity,</code></div>
<div class="line number6 index5 alt1"><code class="sql spaces">        </code><code class="sql plain">PERSON_TYPE </code><code class="sql keyword">varchar</code><code class="sql plain">(255) </code><code class="sql color1">not</code> <code class="sql color1">null</code><code class="sql plain">,</code></div>
<div class="line number7 index6 alt2"><code class="sql spaces">        </code><code class="sql plain">FIRST_NAME </code><code class="sql keyword">varchar</code><code class="sql plain">(255),</code></div>
<div class="line number8 index7 alt1"><code class="sql spaces">        </code><code class="sql plain">LAST_NAME </code><code class="sql keyword">varchar</code><code class="sql plain">(255),</code></div>
<div class="line number9 index8 alt2"><code class="sql spaces">        </code><code class="sql plain">FAV_PROG_LANG </code><code class="sql keyword">varchar</code><code class="sql plain">(255),</code></div>
<div class="line number10 index9 alt1"><code class="sql spaces">        </code><code class="sql keyword">primary</code> <code class="sql keyword">key</code> <code class="sql plain">(ID)</code></div>
<div class="line number11 index10 alt2"><code class="sql spaces">    </code><code class="sql plain">)</code></div>
<div class="line number12 index11 alt1"><code class="sql plain">Hibernate: </code></div>
<div class="line number13 index12 alt2"><code class="sql spaces">    </code><code class="sql keyword">insert</code></div>
<div class="line number14 index13 alt1"><code class="sql spaces">    </code><code class="sql keyword">into</code></div>
<div class="line number15 index14 alt2"><code class="sql spaces">        </code><code class="sql plain">T_PERSON</code></div>
<div class="line number16 index15 alt1"><code class="sql spaces">        </code><code class="sql plain">(ID, FIRST_NAME, LAST_NAME, FAV_PROG_LANG, PERSON_TYPE) </code></div>
<div class="line number17 index16 alt2"><code class="sql spaces">    </code><code class="sql keyword">values</code></div>
<div class="line number18 index17 alt1"><code class="sql spaces">        </code><code class="sql plain">(</code><code class="sql color1">null</code><code class="sql plain">, ?, ?, ?, </code><code class="sql string">'hibernate.entity.Geek'</code><code class="sql plain">)</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p> <span> В отличие от предыдущего примера, таблица <code>T_PERSON</code> теперь содержит два новых столбца <code>PERSON_TYPE</code> и <code>FAV_PROG_LANG</code> .</span> <span> Столбец <code>PERSON_TYPE</code> содержит значение <code>hibernate.entity.Geek</code> для гиков.</span> </p>
<p> <span> Чтобы изучить содержимое таблицы <code>T_PERSON</code> , мы можем использовать приложение Shell, поставляемое в файле jar H2:</span> </p>
<div>
<div class="syntaxhighlighter bash" id="highlighter_383719">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
<div class="line number5 index4 alt2">5</div>
<div class="line number6 index5 alt1">6</div>
<div class="line number7 index6 alt2">7</div>
<div class="line number8 index7 alt1">8</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="bash plain">&gt; java -</code><code class="bash functions">cp</code> <code class="bash plain">h2-1.3.176.jar org.h2.tools.Shell -url jdbc:h2:~</code><code class="bash plain">/hibernate</code></div>
<div class="line number2 index1 alt1"><code class="bash plain">...</code></div>
<div class="line number3 index2 alt2"><code class="bash plain">sql&gt; </code><code class="bash functions">select</code> <code class="bash plain">* from t_person;</code></div>
<div class="line number4 index3 alt1"><code class="bash plain">ID | PERSON_TYPE             | FIRST_NAME | LAST_NAME | FAV_PROG_LANG</code></div>
<div class="line number5 index4 alt2"><code class="bash plain">1  | hibernate.entity.Person | Homer      | Simpson   | null</code></div>
<div class="line number6 index5 alt1"><code class="bash plain">2  | hibernate.entity.Geek   | Gavin      | Coffee    | Java</code></div>
<div class="line number7 index6 alt2"><code class="bash plain">3  | hibernate.entity.Geek   | Thomas     | Micro     | C</code><code class="bash comments">#</code></div>
<div class="line number8 index7 alt1"><code class="bash plain">4  | hibernate.entity.Geek   | Christian  | Cup       | Java</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p> <span> Как обсуждалось выше, столбец <code>PERSON_TYPE</code> хранит тип экземпляра, тогда как столбец <code>FAV_PROG_LANG</code> содержит значение <code>null</code> для экземпляров суперкласса <code>Person</code> .</span> </p>
<p> <span> Изменив определение отображения таким образом, чтобы оно выглядело следующим образом, Hibernate создаст для суперкласса и подкласса отдельную таблицу:</span> </p>
<div>
<div class="syntaxhighlighter xml" id="highlighter_458394">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">01</div>
<div class="line number2 index1 alt1">02</div>
<div class="line number3 index2 alt2">03</div>
<div class="line number4 index3 alt1">04</div>
<div class="line number5 index4 alt2">05</div>
<div class="line number6 index5 alt1">06</div>
<div class="line number7 index6 alt2">07</div>
<div class="line number8 index7 alt1">08</div>
<div class="line number9 index8 alt2">09</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
<div class="line number12 index11 alt1">12</div>
<div class="line number13 index12 alt2">13</div>
<div class="line number14 index13 alt1">14</div>
<div class="line number15 index14 alt2">15</div>
<div class="line number16 index15 alt1">16</div>
<div class="line number17 index16 alt2">17</div>
<div class="line number18 index17 alt1">18</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="xml plain">&lt;?</code><code class="xml keyword">xml</code> <code class="xml color1">version</code><code class="xml plain">=</code><code class="xml string">"1.0"</code><code class="xml plain">?&gt;</code></div>
<div class="line number2 index1 alt1"><code class="xml plain">&lt;!</code><code class="xml keyword">DOCTYPE</code> <code class="xml plain">hibernate-mapping PUBLIC</code></div>
<div class="line number3 index2 alt2"><code class="xml spaces">        </code><code class="xml plain">"-//Hibernate/Hibernate Mapping DTD 3.0//EN"</code></div>
<div class="line number4 index3 alt1"><code class="xml spaces">        </code><code class="xml plain">"<a href="http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd</a>"&gt;</code></div>
<div class="line number5 index4 alt2"> </div>
<div class="line number6 index5 alt1"><code class="xml plain">&lt;</code><code class="xml keyword">hibernate-mapping</code> <code class="xml color1">package</code><code class="xml plain">=</code><code class="xml string">"hibernate.entity"</code><code class="xml plain">&gt;</code></div>
<div class="line number7 index6 alt2"><code class="xml spaces">    </code><code class="xml plain">&lt;</code><code class="xml keyword">class</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"Person"</code> <code class="xml color1">table</code><code class="xml plain">=</code><code class="xml string">"T_PERSON"</code><code class="xml plain">&gt;</code></div>
<div class="line number8 index7 alt1"><code class="xml spaces">        </code><code class="xml plain">&lt;</code><code class="xml keyword">id</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"id"</code> <code class="xml color1">column</code><code class="xml plain">=</code><code class="xml string">"ID"</code><code class="xml plain">&gt;</code></div>
<div class="line number9 index8 alt2"><code class="xml spaces">            </code><code class="xml plain">&lt;</code><code class="xml keyword">generator</code> <code class="xml color1">class</code><code class="xml plain">=</code><code class="xml string">"native"</code><code class="xml plain">/&gt;</code></div>
<div class="line number10 index9 alt1"><code class="xml spaces">        </code><code class="xml plain">&lt;/</code><code class="xml keyword">id</code><code class="xml plain">&gt;</code></div>
<div class="line number11 index10 alt2"><code class="xml spaces">        </code><code class="xml plain">&lt;</code><code class="xml keyword">property</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"firstName"</code> <code class="xml color1">column</code><code class="xml plain">=</code><code class="xml string">"FIRST_NAME"</code><code class="xml plain">/&gt;</code></div>
<div class="line number12 index11 alt1"><code class="xml spaces">        </code><code class="xml plain">&lt;</code><code class="xml keyword">property</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"lastName"</code> <code class="xml color1">column</code><code class="xml plain">=</code><code class="xml string">"LAST_NAME"</code><code class="xml plain">/&gt;</code></div>
<div class="line number13 index12 alt2"><code class="xml spaces">        </code><code class="xml plain">&lt;</code><code class="xml keyword">joined-subclass</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"Geek"</code> <code class="xml color1">table</code><code class="xml plain">=</code><code class="xml string">"T_GEEK"</code><code class="xml plain">&gt;</code></div>
<div class="line number14 index13 alt1"><code class="xml spaces">             </code><code class="xml plain">&lt;</code><code class="xml keyword">key</code> <code class="xml color1">column</code><code class="xml plain">=</code><code class="xml string">"ID_PERSON"</code><code class="xml plain">/&gt;</code></div>
<div class="line number15 index14 alt2"><code class="xml spaces">              </code><code class="xml plain">&lt;</code><code class="xml keyword">property</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"favouriteProgrammingLanguage"</code> <code class="xml color1">column</code><code class="xml plain">=</code><code class="xml string">"FAV_PROG_LANG"</code><code class="xml plain">/&gt;</code></div>
<div class="line number16 index15 alt1"><code class="xml spaces">         </code><code class="xml plain">&lt;/</code><code class="xml keyword">joined-subclass</code><code class="xml plain">&gt;</code></div>
<div class="line number17 index16 alt2"><code class="xml spaces">     </code><code class="xml plain">&lt;/</code><code class="xml keyword">class</code><code class="xml plain">&gt;</code></div>
<div class="line number18 index17 alt1"><code class="xml plain">&lt;/</code><code class="xml keyword">hibernate-mapping</code><code class="xml plain">&gt;</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p> <span> Элемент XML <code>T_GEEK</code> сообщает Hibernate о создании таблицы <code>T_GEEK</code> для подкласса <code>Geek</code> с дополнительным столбцом <code>ID_PERSON</code> .</span> <span> Этот столбец дополнительного ключа хранит внешний ключ к таблице <code>T_PERSON</code> , чтобы назначить каждую строку в <code>T_GEEK</code> его родительской строке в <code>T_PERSON</code> .</span> </p>
<p> <span> Использование приведенного выше кода Java для хранения нескольких гиков в базе данных приводит к следующему выводу на консоль:</span> </p>
<div>
<div class="syntaxhighlighter sql" id="highlighter_844543">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">01</div>
<div class="line number2 index1 alt1">02</div>
<div class="line number3 index2 alt2">03</div>
<div class="line number4 index3 alt1">04</div>
<div class="line number5 index4 alt2">05</div>
<div class="line number6 index5 alt1">06</div>
<div class="line number7 index6 alt2">07</div>
<div class="line number8 index7 alt1">08</div>
<div class="line number9 index8 alt2">09</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
<div class="line number12 index11 alt1">12</div>
<div class="line number13 index12 alt2">13</div>
<div class="line number14 index13 alt1">14</div>
<div class="line number15 index14 alt2">15</div>
<div class="line number16 index15 alt1">16</div>
<div class="line number17 index16 alt2">17</div>
<div class="line number18 index17 alt1">18</div>
<div class="line number19 index18 alt2">19</div>
<div class="line number20 index19 alt1">20</div>
<div class="line number21 index20 alt2">21</div>
<div class="line number22 index21 alt1">22</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="sql plain">Hibernate: </code></div>
<div class="line number2 index1 alt1"><code class="sql spaces">    </code><code class="sql keyword">drop</code> <code class="sql keyword">table</code> <code class="sql plain">T_GEEK if exists</code></div>
<div class="line number3 index2 alt2"><code class="sql plain">Hibernate: </code></div>
<div class="line number4 index3 alt1"><code class="sql spaces">    </code><code class="sql keyword">drop</code> <code class="sql keyword">table</code> <code class="sql plain">T_PERSON if exists</code></div>
<div class="line number5 index4 alt2"><code class="sql plain">Hibernate: </code></div>
<div class="line number6 index5 alt1"><code class="sql spaces">    </code><code class="sql keyword">create</code> <code class="sql keyword">table</code> <code class="sql plain">T_GEEK (</code></div>
<div class="line number7 index6 alt2"><code class="sql spaces">        </code><code class="sql plain">ID_PERSON </code><code class="sql keyword">bigint</code> <code class="sql color1">not</code> <code class="sql color1">null</code><code class="sql plain">,</code></div>
<div class="line number8 index7 alt1"><code class="sql spaces">        </code><code class="sql plain">FAV_PROG_LANG </code><code class="sql keyword">varchar</code><code class="sql plain">(255),</code></div>
<div class="line number9 index8 alt2"><code class="sql spaces">        </code><code class="sql keyword">primary</code> <code class="sql keyword">key</code> <code class="sql plain">(ID_PERSON)</code></div>
<div class="line number10 index9 alt1"><code class="sql spaces">    </code><code class="sql plain">)</code></div>
<div class="line number11 index10 alt2"><code class="sql plain">Hibernate: </code></div>
<div class="line number12 index11 alt1"><code class="sql spaces">    </code><code class="sql keyword">create</code> <code class="sql keyword">table</code> <code class="sql plain">T_PERSON (</code></div>
<div class="line number13 index12 alt2"><code class="sql spaces">        </code><code class="sql plain">ID </code><code class="sql keyword">bigint</code> <code class="sql plain">generated </code><code class="sql keyword">by</code> <code class="sql keyword">default</code> <code class="sql keyword">as</code> <code class="sql plain">identity,</code></div>
<div class="line number14 index13 alt1"><code class="sql spaces">        </code><code class="sql plain">FIRST_NAME </code><code class="sql keyword">varchar</code><code class="sql plain">(255),</code></div>
<div class="line number15 index14 alt2"><code class="sql spaces">        </code><code class="sql plain">LAST_NAME </code><code class="sql keyword">varchar</code><code class="sql plain">(255),</code></div>
<div class="line number16 index15 alt1"><code class="sql spaces">        </code><code class="sql keyword">primary</code> <code class="sql keyword">key</code> <code class="sql plain">(ID)</code></div>
<div class="line number17 index16 alt2"><code class="sql spaces">    </code><code class="sql plain">)</code></div>
<div class="line number18 index17 alt1"><code class="sql plain">Hibernate: </code></div>
<div class="line number19 index18 alt2"><code class="sql spaces">    </code><code class="sql keyword">alter</code> <code class="sql keyword">table</code> <code class="sql plain">T_GEEK </code></div>
<div class="line number20 index19 alt1"><code class="sql spaces">        </code><code class="sql keyword">add</code> <code class="sql keyword">constraint</code> <code class="sql plain">FK_p2ile8qooftvytnxnqtjkrbsa </code></div>
<div class="line number21 index20 alt2"><code class="sql spaces">        </code><code class="sql keyword">foreign</code> <code class="sql keyword">key</code> <code class="sql plain">(ID_PERSON) </code></div>
<div class="line number22 index21 alt1"><code class="sql spaces">        </code><code class="sql keyword">references</code> <code class="sql plain">T_PERSON</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p> <span> Теперь Hibernate создает две таблицы вместо одной и определяет внешний ключ для таблицы <code>T_GEEK</code> которая ссылается на таблицу <code>T_PERSON</code> .</span> <span> Таблица <code>T_GEEK</code> состоит из двух столбцов: <code>ID_PERSON</code> для ссылки на соответствующего человека и <code>FAV_PROG_LANG</code> для хранения любимого языка программирования.</span> </p>
<p> <span> Хранение гика в базе данных теперь состоит из двух операторов вставки:</span> </p>
<div>
<div class="syntaxhighlighter sql" id="highlighter_313131">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">01</div>
<div class="line number2 index1 alt1">02</div>
<div class="line number3 index2 alt2">03</div>
<div class="line number4 index3 alt1">04</div>
<div class="line number5 index4 alt2">05</div>
<div class="line number6 index5 alt1">06</div>
<div class="line number7 index6 alt2">07</div>
<div class="line number8 index7 alt1">08</div>
<div class="line number9 index8 alt2">09</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
<div class="line number12 index11 alt1">12</div>
<div class="line number13 index12 alt2">13</div>
<div class="line number14 index13 alt1">14</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="sql plain">Hibernate: </code></div>
<div class="line number2 index1 alt1"><code class="sql spaces">    </code><code class="sql keyword">insert</code></div>
<div class="line number3 index2 alt2"><code class="sql spaces">    </code><code class="sql keyword">into</code></div>
<div class="line number4 index3 alt1"><code class="sql spaces">        </code><code class="sql plain">T_PERSON</code></div>
<div class="line number5 index4 alt2"><code class="sql spaces">        </code><code class="sql plain">(ID, FIRST_NAME, LAST_NAME, ID_ID_CARD) </code></div>
<div class="line number6 index5 alt1"><code class="sql spaces">    </code><code class="sql keyword">values</code></div>
<div class="line number7 index6 alt2"><code class="sql spaces">        </code><code class="sql plain">(</code><code class="sql color1">null</code><code class="sql plain">, ?, ?, ?)</code></div>
<div class="line number8 index7 alt1"><code class="sql plain">Hibernate: </code></div>
<div class="line number9 index8 alt2"><code class="sql spaces">    </code><code class="sql keyword">insert</code></div>
<div class="line number10 index9 alt1"><code class="sql spaces">    </code><code class="sql keyword">into</code></div>
<div class="line number11 index10 alt2"><code class="sql spaces">        </code><code class="sql plain">T_GEEK</code></div>
<div class="line number12 index11 alt1"><code class="sql spaces">        </code><code class="sql plain">(FAV_PROG_LANG, ID_PERSON) </code></div>
<div class="line number13 index12 alt2"><code class="sql spaces">    </code><code class="sql keyword">values</code></div>
<div class="line number14 index13 alt1"><code class="sql spaces">        </code><code class="sql plain">(?, ?)</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p> <span> Первый оператор вставляет новую строку в таблицу <code>T_PERSON</code> , а второй — новую строку в таблицу <code>T_GEEK</code> .</span> <span> Содержимое этих двух таблиц выглядит следующим образом:</span> </p>
<div>
<div class="syntaxhighlighter bash" id="highlighter_146835">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">01</div>
<div class="line number2 index1 alt1">02</div>
<div class="line number3 index2 alt2">03</div>
<div class="line number4 index3 alt1">04</div>
<div class="line number5 index4 alt2">05</div>
<div class="line number6 index5 alt1">06</div>
<div class="line number7 index6 alt2">07</div>
<div class="line number8 index7 alt1">08</div>
<div class="line number9 index8 alt2">09</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
<div class="line number12 index11 alt1">12</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="bash plain">sql&gt; </code><code class="bash functions">select</code> <code class="bash plain">* from t_person;</code></div>
<div class="line number2 index1 alt1"><code class="bash plain">ID | FIRST_NAME | LAST_NAME</code></div>
<div class="line number3 index2 alt2"><code class="bash plain">1  | Homer      | Simpson  </code></div>
<div class="line number4 index3 alt1"><code class="bash plain">2  | Gavin      | Coffee   </code></div>
<div class="line number5 index4 alt2"><code class="bash plain">3  | Thomas     | Micro    </code></div>
<div class="line number6 index5 alt1"><code class="bash plain">4  | Christian  | Cup      </code></div>
<div class="line number7 index6 alt2"> </div>
<div class="line number8 index7 alt1"><code class="bash plain">sql&gt; </code><code class="bash functions">select</code> <code class="bash plain">* from t_geek;</code></div>
<div class="line number9 index8 alt2"><code class="bash plain">ID_PERSON | FAV_PROG_LANG</code></div>
<div class="line number10 index9 alt1"><code class="bash plain">2         | Java</code></div>
<div class="line number11 index10 alt2"><code class="bash plain">3         | C</code><code class="bash comments">#</code></div>
<div class="line number12 index11 alt1"><code class="bash plain">4         | Java</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p> <span> Очевидно, что таблица <code>T_PERSON</code> хранит только атрибуты суперкласса, тогда как таблица <code>T_GEEK</code> хранит только значения полей для подкласса.</span> <span> Столбец <code>ID_PERSON</code> ссылается на соответствующую строку из родительской таблицы.</span> </p>
<p> <span> Следующая исследуемая стратегия — «таблица на класс».</span> <span> Подобно последней стратегии, эта также создает отдельную таблицу для каждого класса, но, напротив, таблица для подкласса содержит также все столбцы суперкласса.</span> <span> При этом одна строка в такой таблице содержит все значения для создания экземпляра этого типа без необходимости присоединения дополнительных данных из родительской таблицы.</span> <span> На огромном наборе данных это может повысить производительность запросов, поскольку объединениям необходимо дополнительно найти соответствующие строки в родительской таблице.</span> <span> Этот дополнительный поиск требует времени, которое обходится при таком подходе.</span> </p>
<p> <span> Чтобы использовать эту стратегию для описанного выше варианта использования, файл сопоставления можно переписать, как показано ниже:</span> </p>
<div>
<div class="syntaxhighlighter xml" id="highlighter_519600">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">01</div>
<div class="line number2 index1 alt1">02</div>
<div class="line number3 index2 alt2">03</div>
<div class="line number4 index3 alt1">04</div>
<div class="line number5 index4 alt2">05</div>
<div class="line number6 index5 alt1">06</div>
<div class="line number7 index6 alt2">07</div>
<div class="line number8 index7 alt1">08</div>
<div class="line number9 index8 alt2">09</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
<div class="line number12 index11 alt1">12</div>
<div class="line number13 index12 alt2">13</div>
<div class="line number14 index13 alt1">14</div>
<div class="line number15 index14 alt2">15</div>
<div class="line number16 index15 alt1">16</div>
<div class="line number17 index16 alt2">17</div>
<div class="line number18 index17 alt1">18</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="xml plain">&lt;?</code><code class="xml keyword">xml</code> <code class="xml color1">version</code><code class="xml plain">=</code><code class="xml string">"1.0"</code><code class="xml plain">?&gt;</code></div>
<div class="line number2 index1 alt1"><code class="xml plain">&lt;!</code><code class="xml keyword">DOCTYPE</code> <code class="xml plain">hibernate-mapping PUBLIC</code></div>
<div class="line number3 index2 alt2"><code class="xml spaces">        </code><code class="xml plain">"-//Hibernate/Hibernate Mapping DTD 3.0//EN"</code></div>
<div class="line number4 index3 alt1"><code class="xml spaces">        </code><code class="xml plain">"<a href="http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd</a>"&gt;</code></div>
<div class="line number5 index4 alt2"> </div>
<div class="line number6 index5 alt1"><code class="xml plain">&lt;</code><code class="xml keyword">hibernate-mapping</code> <code class="xml color1">package</code><code class="xml plain">=</code><code class="xml string">"hibernate.entity"</code><code class="xml plain">&gt;</code></div>
<div class="line number7 index6 alt2"><code class="xml spaces">     </code><code class="xml plain">&lt;</code><code class="xml keyword">class</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"Person"</code> <code class="xml color1">table</code><code class="xml plain">=</code><code class="xml string">"T_PERSON"</code><code class="xml plain">&gt;</code></div>
<div class="line number8 index7 alt1"><code class="xml spaces">         </code><code class="xml plain">&lt;</code><code class="xml keyword">id</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"id"</code> <code class="xml color1">column</code><code class="xml plain">=</code><code class="xml string">"ID"</code><code class="xml plain">&gt;</code></div>
<div class="line number9 index8 alt2"><code class="xml spaces">             </code><code class="xml plain">&lt;</code><code class="xml keyword">generator</code> <code class="xml color1">class</code><code class="xml plain">=</code><code class="xml string">"sequence"</code><code class="xml plain">/&gt;</code></div>
<div class="line number10 index9 alt1"><code class="xml spaces">         </code><code class="xml plain">&lt;/</code><code class="xml keyword">id</code><code class="xml plain">&gt;</code></div>
<div class="line number11 index10 alt2"><code class="xml spaces">         </code><code class="xml plain">&lt;</code><code class="xml keyword">property</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"firstName"</code> <code class="xml color1">column</code><code class="xml plain">=</code><code class="xml string">"FIRST_NAME"</code><code class="xml plain">/&gt;</code></div>
<div class="line number12 index11 alt1"><code class="xml spaces">         </code><code class="xml plain">&lt;</code><code class="xml keyword">property</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"lastName"</code> <code class="xml color1">column</code><code class="xml plain">=</code><code class="xml string">"LAST_NAME"</code><code class="xml plain">/&gt;</code></div>
<div class="line number13 index12 alt2"><code class="xml spaces">         </code><code class="xml plain">&lt;</code><code class="xml keyword">union-subclass</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"Geek"</code> <code class="xml color1">table</code><code class="xml plain">=</code><code class="xml string">"T_GEEK"</code><code class="xml plain">&gt;</code></div>
<div class="line number14 index13 alt1"><code class="xml spaces">              </code><code class="xml plain">&lt;</code><code class="xml keyword">property</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"favouriteProgrammingLanguage"</code> <code class="xml color1">column</code><code class="xml plain">=</code><code class="xml string">"FAV_PROG_LANG"</code><code class="xml plain">/&gt;</code></div>
<div class="line number15 index14 alt2"><code class="xml spaces">         </code><code class="xml plain">&lt;/</code><code class="xml keyword">union-subclass</code><code class="xml plain">&gt;</code></div>
<div class="line number16 index15 alt1"> </div>
<div class="line number17 index16 alt2"><code class="xml spaces">      </code><code class="xml plain">&lt;/</code><code class="xml keyword">class</code><code class="xml plain">&gt;</code></div>
<div class="line number18 index17 alt1"><code class="xml plain">&lt;/</code><code class="xml keyword">hibernate-mapping</code><code class="xml plain">&gt;</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p> <span> XML-элемент <code>union-subclass</code> предоставляет имя объекта ( <code>Geek</code> ), а также имя отдельной таблицы ( <code>T_GEEK</code> ) в качестве атрибутов.</span> <span> Как и в других подходах, поле <code>favouriteProgrammingLanguage</code> объявляется как свойство подкласса.</span> </p>
<p> <span> Другое важное изменение в отношении других подходов содержится в строке, которая определяет генератор идентификаторов.</span> <span> Поскольку другие подходы используют <code>native</code> генератор, который возвращается на H2 к столбцу идентификаторов, этот подход требует генератора идентификаторов, который создает идентификаторы, которые являются уникальными для обеих таблиц ( <code>T_PERSON</code> и <code>T_GEEK</code> ).</span> </p>
<p> <span> Столбец идентификации — это просто специальный тип столбца, который автоматически создает для каждой строки новый идентификатор.</span> <span> Но с двумя таблицами у нас также есть два столбца идентификаторов, и <code>T_PERSON</code> идентификаторы в таблице <code>T_PERSON</code> могут быть такими же, как в таблице <code>T_GEEK</code> .</span> <span> Это противоречит требованию, что сущность типа <code>Geek</code> может быть создана только путем чтения одной строки таблицы <code>T_GEEK</code> и что идентификаторы для всех людей и вундеркиндов являются уникальными.</span> <span> Поэтому мы используем последовательность вместо столбца идентификаторов, переключая значение атрибута <code>class</code> с <code>native</code> на <code>sequence</code> .</span> </p>
<p> <span> Теперь операторы DDL, созданные Hibernate, выглядят следующим образом:</span> </p>
<div>
<div class="syntaxhighlighter sql" id="highlighter_599366">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">01</div>
<div class="line number2 index1 alt1">02</div>
<div class="line number3 index2 alt2">03</div>
<div class="line number4 index3 alt1">04</div>
<div class="line number5 index4 alt2">05</div>
<div class="line number6 index5 alt1">06</div>
<div class="line number7 index6 alt2">07</div>
<div class="line number8 index7 alt1">08</div>
<div class="line number9 index8 alt2">09</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
<div class="line number12 index11 alt1">12</div>
<div class="line number13 index12 alt2">13</div>
<div class="line number14 index13 alt1">14</div>
<div class="line number15 index14 alt2">15</div>
<div class="line number16 index15 alt1">16</div>
<div class="line number17 index16 alt2">17</div>
<div class="line number18 index17 alt1">18</div>
<div class="line number19 index18 alt2">19</div>
<div class="line number20 index19 alt1">20</div>
<div class="line number21 index20 alt2">21</div>
<div class="line number22 index21 alt1">22</div>
<div class="line number23 index22 alt2">23</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="sql plain">Hibernate: </code></div>
<div class="line number2 index1 alt1"><code class="sql spaces">    </code><code class="sql keyword">drop</code> <code class="sql keyword">table</code> <code class="sql plain">T_GEEK if exists</code></div>
<div class="line number3 index2 alt2"><code class="sql plain">Hibernate: </code></div>
<div class="line number4 index3 alt1"><code class="sql spaces">    </code><code class="sql keyword">drop</code> <code class="sql keyword">table</code> <code class="sql plain">T_PERSON if exists</code></div>
<div class="line number5 index4 alt2"><code class="sql plain">Hibernate: </code></div>
<div class="line number6 index5 alt1"><code class="sql spaces">    </code><code class="sql keyword">drop</code> <code class="sql keyword">sequence</code> <code class="sql plain">if exists hibernate_sequence</code></div>
<div class="line number7 index6 alt2"><code class="sql plain">Hibernate: </code></div>
<div class="line number8 index7 alt1"><code class="sql spaces">    </code><code class="sql keyword">create</code> <code class="sql keyword">table</code> <code class="sql plain">T_GEEK (</code></div>
<div class="line number9 index8 alt2"><code class="sql spaces">        </code><code class="sql plain">ID </code><code class="sql keyword">bigint</code> <code class="sql color1">not</code> <code class="sql color1">null</code><code class="sql plain">,</code></div>
<div class="line number10 index9 alt1"><code class="sql spaces">        </code><code class="sql plain">FIRST_NAME </code><code class="sql keyword">varchar</code><code class="sql plain">(255),</code></div>
<div class="line number11 index10 alt2"><code class="sql spaces">        </code><code class="sql plain">LAST_NAME </code><code class="sql keyword">varchar</code><code class="sql plain">(255),</code></div>
<div class="line number12 index11 alt1"><code class="sql spaces">        </code><code class="sql plain">FAV_PROG_LANG </code><code class="sql keyword">varchar</code><code class="sql plain">(255),</code></div>
<div class="line number13 index12 alt2"><code class="sql spaces">        </code><code class="sql keyword">primary</code> <code class="sql keyword">key</code> <code class="sql plain">(ID)</code></div>
<div class="line number14 index13 alt1"><code class="sql spaces">    </code><code class="sql plain">)</code></div>
<div class="line number15 index14 alt2"><code class="sql plain">Hibernate: </code></div>
<div class="line number16 index15 alt1"><code class="sql spaces">    </code><code class="sql keyword">create</code> <code class="sql keyword">table</code> <code class="sql plain">T_PERSON (</code></div>
<div class="line number17 index16 alt2"><code class="sql spaces">        </code><code class="sql plain">ID </code><code class="sql keyword">bigint</code> <code class="sql color1">not</code> <code class="sql color1">null</code><code class="sql plain">,</code></div>
<div class="line number18 index17 alt1"><code class="sql spaces">        </code><code class="sql plain">FIRST_NAME </code><code class="sql keyword">varchar</code><code class="sql plain">(255),</code></div>
<div class="line number19 index18 alt2"><code class="sql spaces">        </code><code class="sql plain">LAST_NAME </code><code class="sql keyword">varchar</code><code class="sql plain">(255),</code></div>
<div class="line number20 index19 alt1"><code class="sql spaces">        </code><code class="sql keyword">primary</code> <code class="sql keyword">key</code> <code class="sql plain">(ID)</code></div>
<div class="line number21 index20 alt2"><code class="sql spaces">    </code><code class="sql plain">)</code></div>
<div class="line number22 index21 alt1"><code class="sql plain">Hibernate: </code></div>
<div class="line number23 index22 alt2"><code class="sql spaces">    </code><code class="sql keyword">create</code> <code class="sql keyword">sequence</code> <code class="sql plain">hibernate_sequence</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p> <span> Вывод выше ясно показывает, что таблица <code>T_GEEK</code> теперь содержит рядом с <code>FAV_PROG_LANG</code> также столбцы для суперкласса ( <code>FIRST_NAME</code> и <code>LAST_NAME</code> ).</span> <span> Операторы не создают внешний ключ между двумя таблицами.</span> <span> Также обратите внимание, что теперь <code>ID</code> столбца больше не является столбцом идентификаторов, а вместо этого создается последовательность.</span> </p>
<p> <span> Вставка человека и выродка выдает следующие утверждения в базу данных:</span> </p>
<div>
<div class="syntaxhighlighter sql" id="highlighter_951649">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">01</div>
<div class="line number2 index1 alt1">02</div>
<div class="line number3 index2 alt2">03</div>
<div class="line number4 index3 alt1">04</div>
<div class="line number5 index4 alt2">05</div>
<div class="line number6 index5 alt1">06</div>
<div class="line number7 index6 alt2">07</div>
<div class="line number8 index7 alt1">08</div>
<div class="line number9 index8 alt2">09</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
<div class="line number12 index11 alt1">12</div>
<div class="line number13 index12 alt2">13</div>
<div class="line number14 index13 alt1">14</div>
<div class="line number15 index14 alt2">15</div>
<div class="line number16 index15 alt1">16</div>
<div class="line number17 index16 alt2">17</div>
<div class="line number18 index17 alt1">18</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="sql plain">Hibernate: </code></div>
<div class="line number2 index1 alt1"><code class="sql spaces">    </code><code class="sql plain">call </code><code class="sql keyword">next</code> <code class="sql plain">value </code><code class="sql keyword">for</code> <code class="sql plain">hibernate_sequence</code></div>
<div class="line number3 index2 alt2"><code class="sql plain">Hibernate: </code></div>
<div class="line number4 index3 alt1"><code class="sql spaces">    </code><code class="sql keyword">insert</code></div>
<div class="line number5 index4 alt2"><code class="sql spaces">    </code><code class="sql keyword">into</code></div>
<div class="line number6 index5 alt1"><code class="sql spaces">        </code><code class="sql plain">T_PERSON</code></div>
<div class="line number7 index6 alt2"><code class="sql spaces">        </code><code class="sql plain">(FIRST_NAME, LAST_NAME, ID) </code></div>
<div class="line number8 index7 alt1"><code class="sql spaces">    </code><code class="sql keyword">values</code></div>
<div class="line number9 index8 alt2"><code class="sql spaces">        </code><code class="sql plain">(?, ?, ?, ?)</code></div>
<div class="line number10 index9 alt1"><code class="sql plain">Hibernate: </code></div>
<div class="line number11 index10 alt2"><code class="sql spaces">    </code><code class="sql plain">call </code><code class="sql keyword">next</code> <code class="sql plain">value </code><code class="sql keyword">for</code> <code class="sql plain">hibernate_sequence</code></div>
<div class="line number12 index11 alt1"><code class="sql plain">Hibernate: </code></div>
<div class="line number13 index12 alt2"><code class="sql spaces">    </code><code class="sql keyword">insert</code></div>
<div class="line number14 index13 alt1"><code class="sql spaces">    </code><code class="sql keyword">into</code></div>
<div class="line number15 index14 alt2"><code class="sql spaces">        </code><code class="sql plain">T_GEEK</code></div>
<div class="line number16 index15 alt1"><code class="sql spaces">        </code><code class="sql plain">(FIRST_NAME, LAST_NAME, FAV_PROG_LANG, ID) </code></div>
<div class="line number17 index16 alt2"><code class="sql spaces">    </code><code class="sql keyword">values</code></div>
<div class="line number18 index17 alt1"><code class="sql spaces">        </code><code class="sql plain">(?, ?, ?, ?, ?)</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p> <span> Для одного человека и одного гика у нас, очевидно, только два оператора вставки.</span> <span> Таблица <code>T_GEEK</code> полностью заполнена одной вставкой и содержит все значения экземпляра <code>Geek</code> :</span> </p>
<div>
<div class="syntaxhighlighter bash" id="highlighter_271355">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
<div class="line number5 index4 alt2">5</div>
<div class="line number6 index5 alt1">6</div>
<div class="line number7 index6 alt2">7</div>
<div class="line number8 index7 alt1">8</div>
<div class="line number9 index8 alt2">9</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="bash plain">sql&gt; </code><code class="bash functions">select</code> <code class="bash plain">* from t_person;</code></div>
<div class="line number2 index1 alt1"><code class="bash plain">ID | FIRST_NAME | LAST_NAME </code></div>
<div class="line number3 index2 alt2"><code class="bash plain">1  | Homer      | Simpson   </code></div>
<div class="line number4 index3 alt1"> </div>
<div class="line number5 index4 alt2"><code class="bash plain">sql&gt; </code><code class="bash functions">select</code> <code class="bash plain">* from t_geek;</code></div>
<div class="line number6 index5 alt1"><code class="bash plain">ID | FIRST_NAME | LAST_NAME | FAV_PROG_LANG</code></div>
<div class="line number7 index6 alt2"><code class="bash plain">3  | Gavin      | Coffee    | Java</code></div>
<div class="line number8 index7 alt1"><code class="bash plain">4  | Thomas     | Micro     | C</code><code class="bash comments">#</code></div>
<div class="line number9 index8 alt2"><code class="bash plain">5  | Christian  | Cup       | Java</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<h2><a name="relationships"/> <span> 5. Отношения</span> </h2>
<p> <span> До сих пор мы видели единственную связь между двумя таблицами — «расширяет».</span> <span> Помимо простого наследования, Hibernate также может отображать отношения, основанные на списках, в которых один объект имеет список экземпляров другого объекта.</span> <span> Различают следующие типы отношений:</span> </p>
<ul>
<li> <span> <strong>Один к одному</strong> : это обозначает простое отношение, в котором один объект типа A принадлежит точно одному объекту типа B.</span> </li>
<li> <span> <strong>Много к одному</strong> : как видно из названия, это отношение охватывает случай, когда сущность типа A имеет много дочерних сущностей типа B.</span> </li>
<li> <span> <strong>Много ко многим</strong> : в этом случае может быть много объектов типа A, которые принадлежат многим объектам типа B.</span> </li>
</ul>
<p> <span> Чтобы немного лучше понять эти различные типы отношений, мы рассмотрим их в следующем.</span> </p>
<h2><a name="relationships_onetoone"/> <span> 5.1.</span> <span> Один к одному</span> </h2>
<p> <span> В качестве примера для случая «один к одному» мы добавляем следующий класс в нашу модель сущности:</span> </p>
<div>
<div class="syntaxhighlighter java" id="highlighter_390825">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">01</div>
<div class="line number2 index1 alt1">02</div>
<div class="line number3 index2 alt2">03</div>
<div class="line number4 index3 alt1">04</div>
<div class="line number5 index4 alt2">05</div>
<div class="line number6 index5 alt1">06</div>
<div class="line number7 index6 alt2">07</div>
<div class="line number8 index7 alt1">08</div>
<div class="line number9 index8 alt2">09</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
<div class="line number12 index11 alt1">12</div>
<div class="line number13 index12 alt2">13</div>
<div class="line number14 index13 alt1">14</div>
<div class="line number15 index14 alt2">15</div>
<div class="line number16 index15 alt1">16</div>
<div class="line number17 index16 alt2">17</div>
<div class="line number18 index17 alt1">18</div>
<div class="line number19 index18 alt2">19</div>
<div class="line number20 index19 alt1">20</div>
<div class="line number21 index20 alt2">21</div>
<div class="line number22 index21 alt1">22</div>
<div class="line number23 index22 alt2">23</div>
<div class="line number24 index23 alt1">24</div>
<div class="line number25 index24 alt2">25</div>
<div class="line number26 index25 alt1">26</div>
<div class="line number27 index26 alt2">27</div>
<div class="line number28 index27 alt1">28</div>
<div class="line number29 index28 alt2">29</div>
<div class="line number30 index29 alt1">30</div>
<div class="line number31 index30 alt2">31</div>
<div class="line number32 index31 alt1">32</div>
<div class="line number33 index32 alt2">33</div>
<div class="line number34 index33 alt1">34</div>
<div class="line number35 index34 alt2">35</div>
<div class="line number36 index35 alt1">36</div>
<div class="line number37 index36 alt2">37</div>
<div class="line number38 index37 alt1">38</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">IdCard {</code></div>
<div class="line number2 index1 alt1"><code class="java spaces">    </code><code class="java keyword">private</code> <code class="java plain">Long id;</code></div>
<div class="line number3 index2 alt2"><code class="java spaces">    </code><code class="java keyword">private</code> <code class="java plain">String idNumber;</code></div>
<div class="line number4 index3 alt1"><code class="java spaces">    </code><code class="java keyword">private</code> <code class="java plain">Date issueDate;</code></div>
<div class="line number5 index4 alt2"><code class="java spaces">    </code><code class="java keyword">private</code> <code class="java keyword">boolean</code> <code class="java plain">valid;</code></div>
<div class="line number6 index5 alt1"> </div>
<div class="line number7 index6 alt2"><code class="java spaces">    </code><code class="java keyword">public</code> <code class="java plain">Long getId() {</code></div>
<div class="line number8 index7 alt1"><code class="java spaces">        </code><code class="java keyword">return</code> <code class="java plain">id;</code></div>
<div class="line number9 index8 alt2"><code class="java spaces">    </code><code class="java plain">}</code></div>
<div class="line number10 index9 alt1"> </div>
<div class="line number11 index10 alt2"><code class="java spaces">    </code><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">setId(Long id) {</code></div>
<div class="line number12 index11 alt1"><code class="java spaces">        </code><code class="java keyword">this</code><code class="java plain">.id = id;</code></div>
<div class="line number13 index12 alt2"><code class="java spaces">    </code><code class="java plain">}</code></div>
<div class="line number14 index13 alt1"> </div>
<div class="line number15 index14 alt2"><code class="java spaces">    </code><code class="java keyword">public</code> <code class="java plain">String getIdNumber() {</code></div>
<div class="line number16 index15 alt1"><code class="java spaces">        </code><code class="java keyword">return</code> <code class="java plain">idNumber;</code></div>
<div class="line number17 index16 alt2"><code class="java spaces">    </code><code class="java plain">}</code></div>
<div class="line number18 index17 alt1"> </div>
<div class="line number19 index18 alt2"><code class="java spaces">    </code><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">setIdNumber(String idNumber) {</code></div>
<div class="line number20 index19 alt1"><code class="java spaces">        </code><code class="java keyword">this</code><code class="java plain">.idNumber = idNumber;</code></div>
<div class="line number21 index20 alt2"><code class="java spaces">    </code><code class="java plain">}</code></div>
<div class="line number22 index21 alt1"> </div>
<div class="line number23 index22 alt2"><code class="java spaces">    </code><code class="java keyword">public</code> <code class="java plain">Date getIssueDate() {</code></div>
<div class="line number24 index23 alt1"><code class="java spaces">        </code><code class="java keyword">return</code> <code class="java plain">issueDate;</code></div>
<div class="line number25 index24 alt2"><code class="java spaces">    </code><code class="java plain">}</code></div>
<div class="line number26 index25 alt1"> </div>
<div class="line number27 index26 alt2"><code class="java spaces">    </code><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">setIssueDate(Date issueDate) {</code></div>
<div class="line number28 index27 alt1"><code class="java spaces">        </code><code class="java keyword">this</code><code class="java plain">.issueDate = issueDate;</code></div>
<div class="line number29 index28 alt2"><code class="java spaces">    </code><code class="java plain">}</code></div>
<div class="line number30 index29 alt1"> </div>
<div class="line number31 index30 alt2"><code class="java spaces">    </code><code class="java keyword">public</code> <code class="java keyword">boolean</code> <code class="java plain">isValid() {</code></div>
<div class="line number32 index31 alt1"><code class="java spaces">        </code><code class="java keyword">return</code> <code class="java plain">valid;</code></div>
<div class="line number33 index32 alt2"><code class="java spaces">    </code><code class="java plain">}</code></div>
<div class="line number34 index33 alt1"> </div>
<div class="line number35 index34 alt2"><code class="java spaces">    </code><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">setValid(</code><code class="java keyword">boolean</code> <code class="java plain">valid) {</code></div>
<div class="line number36 index35 alt1"><code class="java spaces">        </code><code class="java keyword">this</code><code class="java plain">.valid = valid;</code></div>
<div class="line number37 index36 alt2"><code class="java spaces">    </code><code class="java plain">}</code></div>
<div class="line number38 index37 alt1"><code class="java plain">}</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p> <span> Удостоверение личности как внутренний уникальный идентификатор, а также внешний idNumber, дата выпуска и логический флаг, который указывает, действительна ли карта или нет.</span> </p>
<p> <span> С другой стороны отношения человек получает новое поле с именем <code>idCard</code> которое ссылается на карту этого человека:</span> </p>
<div>
<div class="syntaxhighlighter java" id="highlighter_374901">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">01</div>
<div class="line number2 index1 alt1">02</div>
<div class="line number3 index2 alt2">03</div>
<div class="line number4 index3 alt1">04</div>
<div class="line number5 index4 alt2">05</div>
<div class="line number6 index5 alt1">06</div>
<div class="line number7 index6 alt2">07</div>
<div class="line number8 index7 alt1">08</div>
<div class="line number9 index8 alt2">09</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
<div class="line number12 index11 alt1">12</div>
<div class="line number13 index12 alt2">13</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">Person {</code></div>
<div class="line number2 index1 alt1"><code class="java spaces">    </code><code class="java plain">...</code></div>
<div class="line number3 index2 alt2"><code class="java spaces">    </code><code class="java keyword">private</code> <code class="java plain">IdCard idCard;</code></div>
<div class="line number4 index3 alt1"><code class="java spaces">    </code> </div>
<div class="line number5 index4 alt2"><code class="java spaces">    </code><code class="java plain">...</code></div>
<div class="line number6 index5 alt1"><code class="java spaces">    </code> </div>
<div class="line number7 index6 alt2"><code class="java spaces">    </code><code class="java keyword">public</code> <code class="java plain">IdCard getIdCard() {</code></div>
<div class="line number8 index7 alt1"><code class="java spaces">        </code><code class="java keyword">return</code> <code class="java plain">idCard;</code></div>
<div class="line number9 index8 alt2"><code class="java spaces">    </code><code class="java plain">}</code></div>
<div class="line number10 index9 alt1"> </div>
<div class="line number11 index10 alt2"><code class="java spaces">    </code><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">setIdCard(IdCard idCard) {</code></div>
<div class="line number12 index11 alt1"><code class="java spaces">        </code><code class="java keyword">this</code><code class="java plain">.idCard = idCard;</code></div>
<div class="line number13 index12 alt2"><code class="java spaces">    </code><code class="java plain">}</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p> <span> Чтобы отобразить это отношение с помощью специального файла отображения Hibernate, мы изменим его следующим образом:</span> </p>
<div>
<div class="syntaxhighlighter xml" id="highlighter_69250">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">01</div>
<div class="line number2 index1 alt1">02</div>
<div class="line number3 index2 alt2">03</div>
<div class="line number4 index3 alt1">04</div>
<div class="line number5 index4 alt2">05</div>
<div class="line number6 index5 alt1">06</div>
<div class="line number7 index6 alt2">07</div>
<div class="line number8 index7 alt1">08</div>
<div class="line number9 index8 alt2">09</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
<div class="line number12 index11 alt1">12</div>
<div class="line number13 index12 alt2">13</div>
<div class="line number14 index13 alt1">14</div>
<div class="line number15 index14 alt2">15</div>
<div class="line number16 index15 alt1">16</div>
<div class="line number17 index16 alt2">17</div>
<div class="line number18 index17 alt1">18</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="xml plain">&lt;</code><code class="xml keyword">hibernate-mapping</code> <code class="xml color1">package</code><code class="xml plain">=</code><code class="xml string">"hibernate.entity"</code><code class="xml plain">&gt;</code></div>
<div class="line number2 index1 alt1"><code class="xml spaces">     </code><code class="xml plain">&lt;</code><code class="xml keyword">class</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"IdCard"</code> <code class="xml color1">table</code><code class="xml plain">=</code><code class="xml string">"T_ID_CARD"</code><code class="xml plain">&gt;</code></div>
<div class="line number3 index2 alt2"><code class="xml spaces">         </code><code class="xml plain">&lt;</code><code class="xml keyword">id</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"id"</code> <code class="xml color1">column</code><code class="xml plain">=</code><code class="xml string">"ID"</code><code class="xml plain">&gt;</code></div>
<div class="line number4 index3 alt1"><code class="xml spaces">             </code><code class="xml plain">&lt;</code><code class="xml keyword">generator</code> <code class="xml color1">class</code><code class="xml plain">=</code><code class="xml string">"sequence"</code><code class="xml plain">/&gt;</code></div>
<div class="line number5 index4 alt2"><code class="xml spaces">         </code><code class="xml plain">&lt;/</code><code class="xml keyword">id</code><code class="xml plain">&gt;</code></div>
<div class="line number6 index5 alt1"><code class="xml spaces">      </code><code class="xml plain">&lt;/</code><code class="xml keyword">class</code><code class="xml plain">&gt;</code></div>
<div class="line number7 index6 alt2"><code class="xml spaces">      </code><code class="xml plain">&lt;</code><code class="xml keyword">class</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"Person"</code> <code class="xml color1">table</code><code class="xml plain">=</code><code class="xml string">"T_PERSON"</code><code class="xml plain">&gt;</code></div>
<div class="line number8 index7 alt1"><code class="xml spaces">          </code><code class="xml plain">&lt;</code><code class="xml keyword">id</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"id"</code> <code class="xml color1">column</code><code class="xml plain">=</code><code class="xml string">"ID"</code><code class="xml plain">&gt;</code></div>
<div class="line number9 index8 alt2"><code class="xml spaces">              </code><code class="xml plain">&lt;</code><code class="xml keyword">generator</code> <code class="xml color1">class</code><code class="xml plain">=</code><code class="xml string">"sequence"</code><code class="xml plain">/&gt;</code></div>
<div class="line number10 index9 alt1"><code class="xml spaces">          </code><code class="xml plain">&lt;/</code><code class="xml keyword">id</code><code class="xml plain">&gt;</code></div>
<div class="line number11 index10 alt2"><code class="xml spaces">          </code><code class="xml plain">&lt;</code><code class="xml keyword">property</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"firstName"</code> <code class="xml color1">column</code><code class="xml plain">=</code><code class="xml string">"FIRST_NAME"</code><code class="xml plain">/&gt;</code></div>
<div class="line number12 index11 alt1"><code class="xml spaces">          </code><code class="xml plain">&lt;</code><code class="xml keyword">property</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"lastName"</code> <code class="xml color1">column</code><code class="xml plain">=</code><code class="xml string">"LAST_NAME"</code><code class="xml plain">/&gt;</code></div>
<div class="line number13 index12 alt2"><code class="xml spaces">          </code><code class="xml plain">&lt;</code><code class="xml keyword">many-to-one</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"idCard"</code> <code class="xml color1">column</code><code class="xml plain">=</code><code class="xml string">"ID_ID_CARD"</code> <code class="xml color1">unique</code><code class="xml plain">=</code><code class="xml string">"true"</code><code class="xml plain">/&gt;</code></div>
<div class="line number14 index13 alt1"><code class="xml spaces">          </code><code class="xml plain">&lt;</code><code class="xml keyword">union-subclass</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"Geek"</code> <code class="xml color1">table</code><code class="xml plain">=</code><code class="xml string">"T_GEEK"</code><code class="xml plain">&gt;</code></div>
<div class="line number15 index14 alt2"><code class="xml spaces">               </code><code class="xml plain">&lt;</code><code class="xml keyword">property</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"favouriteProgrammingLanguage"</code> <code class="xml color1">column</code><code class="xml plain">=</code><code class="xml string">"FAV_PROG_LANG"</code><code class="xml plain">/&gt;</code></div>
<div class="line number16 index15 alt1"><code class="xml spaces">          </code><code class="xml plain">&lt;/</code><code class="xml keyword">union-subclass</code><code class="xml plain">&gt;</code></div>
<div class="line number17 index16 alt2"><code class="xml spaces">        </code><code class="xml plain">&lt;/</code><code class="xml keyword">class</code><code class="xml plain">&gt;</code></div>
<div class="line number18 index17 alt1"><code class="xml plain">&lt;/</code><code class="xml keyword">hibernate-mapping</code><code class="xml plain">&gt;</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p> <span> Прежде всего мы добавляем новый элемент <code>class</code> для нового класса, указывая имя класса и имя соответствующей ему таблицы (здесь: <code>T_ID_CARD</code> ).</span> <span> Поле <code>id</code> становится уникальным идентификатором и должно заполняться значением последовательности.</span> </p>
<p> <span> С другой стороны, отображение <code>Person</code> теперь содержит новый XML-элемент <code>many-to-one</code> и ссылается своим <code>name</code> атрибута на поле класса <code>Person</code> котором хранится ссылка на <code>IdCard</code> .</span> <span> <code>column</code> необязательного атрибута позволяет нам указать точное имя столбца внешнего ключа в таблице <code>T_PERSON</code> которая связана с удостоверением личности человека.</span> <span> Поскольку это отношение должно быть типа «один к одному», мы должны установить атрибут, <code>unique</code> для <code>true</code> .</span> </p>
<p> <span> Выполнение этой конфигурации приводит к следующим инструкциям DDL (обратите внимание, что для уменьшения количества таблиц мы вернулись к подходу «одна таблица на класс», где у нас есть только одна таблица для суперкласса и подкласса):</span> </p>
<div>
<div class="syntaxhighlighter sql" id="highlighter_303647">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">01</div>
<div class="line number2 index1 alt1">02</div>
<div class="line number3 index2 alt2">03</div>
<div class="line number4 index3 alt1">04</div>
<div class="line number5 index4 alt2">05</div>
<div class="line number6 index5 alt1">06</div>
<div class="line number7 index6 alt2">07</div>
<div class="line number8 index7 alt1">08</div>
<div class="line number9 index8 alt2">09</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
<div class="line number12 index11 alt1">12</div>
<div class="line number13 index12 alt2">13</div>
<div class="line number14 index13 alt1">14</div>
<div class="line number15 index14 alt2">15</div>
<div class="line number16 index15 alt1">16</div>
<div class="line number17 index16 alt2">17</div>
<div class="line number18 index17 alt1">18</div>
<div class="line number19 index18 alt2">19</div>
<div class="line number20 index19 alt1">20</div>
<div class="line number21 index20 alt2">21</div>
<div class="line number22 index21 alt1">22</div>
<div class="line number23 index22 alt2">23</div>
<div class="line number24 index23 alt1">24</div>
<div class="line number25 index24 alt2">25</div>
<div class="line number26 index25 alt1">26</div>
<div class="line number27 index26 alt2">27</div>
<div class="line number28 index27 alt1">28</div>
<div class="line number29 index28 alt2">29</div>
<div class="line number30 index29 alt1">30</div>
<div class="line number31 index30 alt2">31</div>
<div class="line number32 index31 alt1">32</div>
<div class="line number33 index32 alt2">33</div>
<div class="line number34 index33 alt1">34</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="sql plain">Hibernate: </code></div>
<div class="line number2 index1 alt1"><code class="sql spaces">    </code><code class="sql keyword">drop</code> <code class="sql keyword">table</code> <code class="sql plain">T_ID_CARD if exists</code></div>
<div class="line number3 index2 alt2"><code class="sql plain">Hibernate: </code></div>
<div class="line number4 index3 alt1"><code class="sql spaces">    </code><code class="sql keyword">drop</code> <code class="sql keyword">table</code> <code class="sql plain">T_PERSON if exists</code></div>
<div class="line number5 index4 alt2"><code class="sql plain">Hibernate: </code></div>
<div class="line number6 index5 alt1"><code class="sql spaces">    </code><code class="sql keyword">drop</code> <code class="sql keyword">sequence</code> <code class="sql plain">if exists hibernate_sequence</code></div>
<div class="line number7 index6 alt2"><code class="sql plain">Hibernate: </code></div>
<div class="line number8 index7 alt1"><code class="sql spaces">    </code><code class="sql keyword">create</code> <code class="sql keyword">table</code> <code class="sql plain">T_ID_CARD (</code></div>
<div class="line number9 index8 alt2"><code class="sql spaces">        </code><code class="sql plain">ID </code><code class="sql keyword">bigint</code> <code class="sql color1">not</code> <code class="sql color1">null</code><code class="sql plain">,</code></div>
<div class="line number10 index9 alt1"><code class="sql spaces">        </code><code class="sql plain">ID_NUMBER </code><code class="sql keyword">varchar</code><code class="sql plain">(255),</code></div>
<div class="line number11 index10 alt2"><code class="sql spaces">        </code><code class="sql plain">ISSUE_DATE </code><code class="sql keyword">timestamp</code><code class="sql plain">,</code></div>
<div class="line number12 index11 alt1"><code class="sql spaces">        </code><code class="sql plain">VALID boolean,</code></div>
<div class="line number13 index12 alt2"><code class="sql spaces">        </code><code class="sql keyword">primary</code> <code class="sql keyword">key</code> <code class="sql plain">(ID)</code></div>
<div class="line number14 index13 alt1"><code class="sql spaces">    </code><code class="sql plain">)</code></div>
<div class="line number15 index14 alt2"><code class="sql plain">Hibernate: </code></div>
<div class="line number16 index15 alt1"><code class="sql spaces">    </code><code class="sql keyword">create</code> <code class="sql keyword">table</code> <code class="sql plain">T_PERSON (</code></div>
<div class="line number17 index16 alt2"><code class="sql spaces">        </code><code class="sql plain">ID </code><code class="sql keyword">bigint</code> <code class="sql color1">not</code> <code class="sql color1">null</code><code class="sql plain">,</code></div>
<div class="line number18 index17 alt1"><code class="sql spaces">        </code><code class="sql plain">PERSON_TYPE </code><code class="sql keyword">varchar</code><code class="sql plain">(255) </code><code class="sql color1">not</code> <code class="sql color1">null</code><code class="sql plain">,</code></div>
<div class="line number19 index18 alt2"><code class="sql spaces">        </code><code class="sql plain">FIRST_NAME </code><code class="sql keyword">varchar</code><code class="sql plain">(255),</code></div>
<div class="line number20 index19 alt1"><code class="sql spaces">        </code><code class="sql plain">LAST_NAME </code><code class="sql keyword">varchar</code><code class="sql plain">(255),</code></div>
<div class="line number21 index20 alt2"><code class="sql spaces">        </code><code class="sql plain">ID_ID_CARD </code><code class="sql keyword">bigint</code><code class="sql plain">,</code></div>
<div class="line number22 index21 alt1"><code class="sql spaces">        </code><code class="sql plain">FAV_PROG_LANG </code><code class="sql keyword">varchar</code><code class="sql plain">(255),</code></div>
<div class="line number23 index22 alt2"><code class="sql spaces">        </code><code class="sql keyword">primary</code> <code class="sql keyword">key</code> <code class="sql plain">(ID)</code></div>
<div class="line number24 index23 alt1"><code class="sql spaces">    </code><code class="sql plain">)</code></div>
<div class="line number25 index24 alt2"><code class="sql plain">Hibernate: </code></div>
<div class="line number26 index25 alt1"><code class="sql spaces">    </code><code class="sql keyword">alter</code> <code class="sql keyword">table</code> <code class="sql plain">T_PERSON </code></div>
<div class="line number27 index26 alt2"><code class="sql spaces">        </code><code class="sql keyword">add</code> <code class="sql keyword">constraint</code> <code class="sql plain">UK_96axqtck4kc0be4ancejxtu0p  </code><code class="sql keyword">unique</code> <code class="sql plain">(ID_ID_CARD)</code></div>
<div class="line number28 index27 alt1"><code class="sql plain">Hibernate: </code></div>
<div class="line number29 index28 alt2"><code class="sql spaces">    </code><code class="sql keyword">alter</code> <code class="sql keyword">table</code> <code class="sql plain">T_PERSON </code></div>
<div class="line number30 index29 alt1"><code class="sql spaces">        </code><code class="sql keyword">add</code> <code class="sql keyword">constraint</code> <code class="sql plain">FK_96axqtck4kc0be4ancejxtu0p </code></div>
<div class="line number31 index30 alt2"><code class="sql spaces">        </code><code class="sql keyword">foreign</code> <code class="sql keyword">key</code> <code class="sql plain">(ID_ID_CARD) </code></div>
<div class="line number32 index31 alt1"><code class="sql spaces">        </code><code class="sql keyword">references</code> <code class="sql plain">T_ID_CARD</code></div>
<div class="line number33 index32 alt2"><code class="sql plain">Hibernate: </code></div>
<div class="line number34 index33 alt1"><code class="sql spaces">    </code><code class="sql keyword">create</code> <code class="sql keyword">sequence</code> <code class="sql plain">hibernate_sequence</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p> <span> Что изменилось в отношении предыдущих примеров, так это то, что таблица <code>T_PERSON</code> теперь содержит дополнительный столбец <code>ID_ID_CARD</code> который определен как внешний ключ к таблице <code>T_ID_CARD</code> .</span> <span> Сама таблица <code>T_ID_CARD</code> , как и ожидалось, содержит три столбца <code>ID_NUMBER</code> , <code>ISSUE_DATE</code> и <code>ISSUE_DATE</code> .</span> </p>
<p> <span> Код Java для вставки человека вместе с его удостоверением личности выглядит следующим образом:</span> </p>
<div>
<div class="syntaxhighlighter java" id="highlighter_197681">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
<div class="line number5 index4 alt2">5</div>
<div class="line number6 index5 alt1">6</div>
<div class="line number7 index6 alt2">7</div>
<div class="line number8 index7 alt1">8</div>
<div class="line number9 index8 alt2">9</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="java plain">Person person = </code><code class="java keyword">new</code> <code class="java plain">Person();</code></div>
<div class="line number2 index1 alt1"><code class="java plain">person.setFirstName(</code><code class="java string">"Homer"</code><code class="java plain">);</code></div>
<div class="line number3 index2 alt2"><code class="java plain">person.setLastName(</code><code class="java string">"Simpson"</code><code class="java plain">);</code></div>
<div class="line number4 index3 alt1"><code class="java plain">session.save(person);</code></div>
<div class="line number5 index4 alt2"><code class="java plain">IdCard idCard = </code><code class="java keyword">new</code> <code class="java plain">IdCard();</code></div>
<div class="line number6 index5 alt1"><code class="java plain">idCard.setIdNumber(</code><code class="java string">"4711"</code><code class="java plain">);</code></div>
<div class="line number7 index6 alt2"><code class="java plain">idCard.setIssueDate(</code><code class="java keyword">new</code> <code class="java plain">Date());</code></div>
<div class="line number8 index7 alt1"><code class="java plain">person.setIdCard(idCard);</code></div>
<div class="line number9 index8 alt2"><code class="java plain">session.save(idCard);</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p> <span> Создание экземпляра <code>IdCard</code> вызывает <code>IdCard</code> , также обратите внимание, что ссылка <code>Person</code> на <code>IdCard</code> в последней строке, кроме одной.</span> <span> Оба экземпляра передаются в метод <code>save()</code> Hibernate.</span> </p>
<p> <span> Рассматривая приведенный выше код более подробно, можно поспорить, почему мы должны передавать оба экземпляра в метод <code>save()</code> сеанса.</span> <span> Это оправдано, поскольку Hibernate позволяет определить, что определенная операция должна быть «каскадной» при обработке полного графа сущностей.</span> <span> Чтобы включить каскадирование для связи с <code>IdCard</code> мы можем просто добавить <code>cascade</code> атрибутов к элементу « <code>many-to-one</code> в файле отображения:</span> </p>
<div>
<div class="syntaxhighlighter xml" id="highlighter_352928">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="xml plain">&lt;</code><code class="xml keyword">many-to-one</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"idCard"</code> <code class="xml color1">column</code><code class="xml plain">=</code><code class="xml string">"ID_ID_CARD"</code> <code class="xml color1">unique</code><code class="xml plain">=</code><code class="xml string">"true"</code> <code class="xml color1">cascade</code><code class="xml plain">=</code><code class="xml string">"all"</code><code class="xml plain">/&gt;</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p> <span> Использование значения <code>all</code> указывает Hibernate каскадировать все типы операций.</span> <span> Поскольку это не всегда предпочтительный способ обработки отношений между сущностями, можно также выбрать только определенные операции:</span> </p>
<div>
<div class="syntaxhighlighter xml" id="highlighter_586331">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="xml plain">&lt;</code><code class="xml keyword">many-to-one</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"idCard"</code> <code class="xml color1">column</code><code class="xml plain">=</code><code class="xml string">"ID_ID_CARD"</code> <code class="xml color1">unique</code><code class="xml plain">=</code><code class="xml string">"true"</code> <code class="xml color1">cascade</code><code class="xml plain">=</code><code class="xml string">"save-update,refresh"</code><code class="xml plain">/ ?-</code></div>
<div class="line number2 index1 alt1"><code class="xml plain">&gt;</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p> <span> Приведенный выше пример демонстрирует, как настроить сопоставление таким образом, чтобы <code>saveOrUpdate()</code> только вызовы <code>save()</code> , <code>saveOrUpdate()</code> и <code>refresh</code> (перечитывает состояние данного объекта из базы данных).</span> <span> Вызовы методов Hibernate <code>delete()</code> или <code>lock()</code> , например, не будут перенаправлены.</span> </p>
<p> <span> Используя одну из двух приведенных выше конфигураций, код для сохранения человека вместе с его удостоверением личности можно переписать в следующую:</span> </p>
<div>
<div class="syntaxhighlighter java" id="highlighter_721889">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
<div class="line number5 index4 alt2">5</div>
<div class="line number6 index5 alt1">6</div>
<div class="line number7 index6 alt2">7</div>
<div class="line number8 index7 alt1">8</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="java plain">Person person = </code><code class="java keyword">new</code> <code class="java plain">Person();</code></div>
<div class="line number2 index1 alt1"><code class="java plain">person.setFirstName(</code><code class="java string">"Homer"</code><code class="java plain">);</code></div>
<div class="line number3 index2 alt2"><code class="java plain">person.setLastName(</code><code class="java string">"Simpson"</code><code class="java plain">);</code></div>
<div class="line number4 index3 alt1"><code class="java plain">IdCard idCard = </code><code class="java keyword">new</code> <code class="java plain">IdCard();</code></div>
<div class="line number5 index4 alt2"><code class="java plain">idCard.setIdNumber(</code><code class="java string">"4711"</code><code class="java plain">);</code></div>
<div class="line number6 index5 alt1"><code class="java plain">idCard.setIssueDate(</code><code class="java keyword">new</code> <code class="java plain">Date());</code></div>
<div class="line number7 index6 alt2"><code class="java plain">person.setIdCard(idCard);</code></div>
<div class="line number8 index7 alt1"><code class="java plain">session.save(person);</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p> <span> Вместо использования метода <code>save()</code> можно также использовать в этом случае метод <code>saveOrUpdate()</code> .</span> <span> Цель метода <code>saveOrUpdate()</code> заключается в том, что его также можно использовать для обновления существующего объекта.</span> <span> Тонкое различие между обеими реализациями заключается в том, что методы <code>save()</code> возвращают созданный идентификатор новой сущности:</span> </p>
<div>
<div class="syntaxhighlighter java" id="highlighter_118543">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="java plain">Long personId = (Long) session.save(person);</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p> <span> Это полезно при написании, например, кода на стороне сервера, который должен возвращать этот идентификатор вызывающей стороне метода.</span> <span> С другой стороны, метод <code>update()</code> не возвращает идентификатор, поскольку предполагает, что объект уже был сохранен в хранилище данных и, следовательно, должен иметь идентификатор.</span> <span> Попытка обновить сущность без идентификатора вызовет исключение:</span> </p>
<div>
<div class="syntaxhighlighter java" id="highlighter_89600">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="java plain">org.hibernate.TransientObjectException: The given object has a </code><code class="java keyword">null</code> <code class="java plain">identifier: ...</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p> <span> Поэтому <code>saveOrUpdate()</code> помогает в тех случаях, когда нужно пропустить код, который решает, была ли сущность уже сохранена или нет.</span> </p>
<h2><a name="relationships_onetoone"/> <span> 5.2.</span> <span> Один ко многим</span> </h2>
<p> <span> Другое отношение, которое часто появляется во время O / R-отображений, это отношение «один ко многим».</span> <span> В этом случае набор объектов принадлежит одному объекту другого типа.</span> <span> Чтобы смоделировать такое отношение, мы добавляем класс <code>Phone</code> в нашу модель:</span> </p>
<div>
<div class="syntaxhighlighter java" id="highlighter_888366">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">01</div>
<div class="line number2 index1 alt1">02</div>
<div class="line number3 index2 alt2">03</div>
<div class="line number4 index3 alt1">04</div>
<div class="line number5 index4 alt2">05</div>
<div class="line number6 index5 alt1">06</div>
<div class="line number7 index6 alt2">07</div>
<div class="line number8 index7 alt1">08</div>
<div class="line number9 index8 alt2">09</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
<div class="line number12 index11 alt1">12</div>
<div class="line number13 index12 alt2">13</div>
<div class="line number14 index13 alt1">14</div>
<div class="line number15 index14 alt2">15</div>
<div class="line number16 index15 alt1">16</div>
<div class="line number17 index16 alt2">17</div>
<div class="line number18 index17 alt1">18</div>
<div class="line number19 index18 alt2">19</div>
<div class="line number20 index19 alt1">20</div>
<div class="line number21 index20 alt2">21</div>
<div class="line number22 index21 alt1">22</div>
<div class="line number23 index22 alt2">23</div>
<div class="line number24 index23 alt1">24</div>
<div class="line number25 index24 alt2">25</div>
<div class="line number26 index25 alt1">26</div>
<div class="line number27 index26 alt2">27</div>
<div class="line number28 index27 alt1">28</div>
<div class="line number29 index28 alt2">29</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">Phone {</code></div>
<div class="line number2 index1 alt1"><code class="java spaces">    </code><code class="java keyword">private</code> <code class="java plain">Long id;</code></div>
<div class="line number3 index2 alt2"><code class="java spaces">    </code><code class="java keyword">private</code> <code class="java plain">String number;</code></div>
<div class="line number4 index3 alt1"><code class="java spaces">    </code><code class="java keyword">private</code> <code class="java plain">Person person;</code></div>
<div class="line number5 index4 alt2"> </div>
<div class="line number6 index5 alt1"><code class="java spaces">    </code><code class="java keyword">public</code> <code class="java plain">Long getId() {</code></div>
<div class="line number7 index6 alt2"><code class="java spaces">        </code><code class="java keyword">return</code> <code class="java plain">id;</code></div>
<div class="line number8 index7 alt1"><code class="java spaces">    </code><code class="java plain">}</code></div>
<div class="line number9 index8 alt2"> </div>
<div class="line number10 index9 alt1"><code class="java spaces">    </code><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">setId(Long id) {</code></div>
<div class="line number11 index10 alt2"><code class="java spaces">        </code><code class="java keyword">this</code><code class="java plain">.id = id;</code></div>
<div class="line number12 index11 alt1"><code class="java spaces">    </code><code class="java plain">}</code></div>
<div class="line number13 index12 alt2"> </div>
<div class="line number14 index13 alt1"><code class="java spaces">    </code><code class="java keyword">public</code> <code class="java plain">String getNumber() {</code></div>
<div class="line number15 index14 alt2"><code class="java spaces">        </code><code class="java keyword">return</code> <code class="java plain">number;</code></div>
<div class="line number16 index15 alt1"><code class="java spaces">    </code><code class="java plain">}</code></div>
<div class="line number17 index16 alt2"> </div>
<div class="line number18 index17 alt1"><code class="java spaces">    </code><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">setNumber(String number) {</code></div>
<div class="line number19 index18 alt2"><code class="java spaces">        </code><code class="java keyword">this</code><code class="java plain">.number = number;</code></div>
<div class="line number20 index19 alt1"><code class="java spaces">    </code><code class="java plain">}</code></div>
<div class="line number21 index20 alt2"> </div>
<div class="line number22 index21 alt1"><code class="java spaces">    </code><code class="java keyword">public</code> <code class="java plain">Person getPerson() {</code></div>
<div class="line number23 index22 alt2"><code class="java spaces">        </code><code class="java keyword">return</code> <code class="java plain">person;</code></div>
<div class="line number24 index23 alt1"><code class="java spaces">    </code><code class="java plain">}</code></div>
<div class="line number25 index24 alt2"> </div>
<div class="line number26 index25 alt1"><code class="java spaces">    </code><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">setPerson(Person person) {</code></div>
<div class="line number27 index26 alt2"><code class="java spaces">        </code><code class="java keyword">this</code><code class="java plain">.person = person;</code></div>
<div class="line number28 index27 alt1"><code class="java spaces">    </code><code class="java plain">}</code></div>
<div class="line number29 index28 alt2"><code class="java plain">}</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p> <span> Как обычно, сущность <code>Phone</code> имеет внутренний идентификатор ( <code>id</code> ) и поле для хранения фактического номера телефона.</span> <span> Полевой <code>person</code> сохраняет ссылку обратно на человека, которому принадлежит этот телефон.</span> <span> Поскольку у одного человека может быть несколько телефонов, мы добавляем класс <code>Set</code> в <code>Person</code> который собирает все телефоны одного человека:</span> </p>
<div>
<div class="syntaxhighlighter java" id="highlighter_302106">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">01</div>
<div class="line number2 index1 alt1">02</div>
<div class="line number3 index2 alt2">03</div>
<div class="line number4 index3 alt1">04</div>
<div class="line number5 index4 alt2">05</div>
<div class="line number6 index5 alt1">06</div>
<div class="line number7 index6 alt2">07</div>
<div class="line number8 index7 alt1">08</div>
<div class="line number9 index8 alt2">09</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
<div class="line number12 index11 alt1">12</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">Person {</code></div>
<div class="line number2 index1 alt1"><code class="java spaces">    </code><code class="java plain">...</code></div>
<div class="line number3 index2 alt2"><code class="java spaces">    </code><code class="java keyword">private</code> <code class="java plain">Set phones = </code><code class="java keyword">new</code> <code class="java plain">HashSet();</code></div>
<div class="line number4 index3 alt1"><code class="java spaces">    </code><code class="java plain">...</code></div>
<div class="line number5 index4 alt2"><code class="java spaces">    </code><code class="java keyword">public</code> <code class="java plain">Set getPhones() {</code></div>
<div class="line number6 index5 alt1"><code class="java spaces">        </code><code class="java keyword">return</code> <code class="java plain">phones;</code></div>
<div class="line number7 index6 alt2"><code class="java spaces">    </code><code class="java plain">}</code></div>
<div class="line number8 index7 alt1"> </div>
<div class="line number9 index8 alt2"><code class="java spaces">    </code><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">setPhones(Set phones) {</code></div>
<div class="line number10 index9 alt1"><code class="java spaces">        </code><code class="java keyword">this</code><code class="java plain">.phones = phones;</code></div>
<div class="line number11 index10 alt2"><code class="java spaces">    </code><code class="java plain">}</code></div>
<div class="line number12 index11 alt1"><code class="java plain">}</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p> <span> Файл отображения должен быть обновлен соответственно:</span> </p>
<div>
<div class="syntaxhighlighter xml" id="highlighter_36442">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">01</div>
<div class="line number2 index1 alt1">02</div>
<div class="line number3 index2 alt2">03</div>
<div class="line number4 index3 alt1">04</div>
<div class="line number5 index4 alt2">05</div>
<div class="line number6 index5 alt1">06</div>
<div class="line number7 index6 alt2">07</div>
<div class="line number8 index7 alt1">08</div>
<div class="line number9 index8 alt2">09</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
<div class="line number12 index11 alt1">12</div>
<div class="line number13 index12 alt2">13</div>
<div class="line number14 index13 alt1">14</div>
<div class="line number15 index14 alt2">15</div>
<div class="line number16 index15 alt1">16</div>
<div class="line number17 index16 alt2">17</div>
<div class="line number18 index17 alt1">18</div>
<div class="line number19 index18 alt2">19</div>
<div class="line number20 index19 alt1">20</div>
<div class="line number21 index20 alt2">21</div>
<div class="line number22 index21 alt1">22</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="xml plain">&lt;</code><code class="xml keyword">hibernate-mapping</code> <code class="xml color1">package</code><code class="xml plain">=</code><code class="xml string">"hibernate.entity"</code><code class="xml plain">&gt;</code></div>
<div class="line number2 index1 alt1"><code class="xml spaces">        </code><code class="xml plain">...</code></div>
<div class="line number3 index2 alt2"><code class="xml spaces">    </code><code class="xml plain">&lt;</code><code class="xml keyword">class</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"Phone"</code> <code class="xml color1">table</code><code class="xml plain">=</code><code class="xml string">"T_PHONE"</code><code class="xml plain">&gt;</code></div>
<div class="line number4 index3 alt1"><code class="xml spaces">        </code><code class="xml plain">&lt;</code><code class="xml keyword">id</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"id"</code> <code class="xml color1">column</code><code class="xml plain">=</code><code class="xml string">"ID"</code><code class="xml plain">&gt;</code></div>
<div class="line number5 index4 alt2"><code class="xml spaces">            </code><code class="xml plain">&lt;</code><code class="xml keyword">generator</code> <code class="xml color1">class</code><code class="xml plain">=</code><code class="xml string">"sequence"</code><code class="xml plain">/&gt;</code></div>
<div class="line number6 index5 alt1"><code class="xml spaces">         </code><code class="xml plain">&lt;/</code><code class="xml keyword">id</code><code class="xml plain">&gt;</code></div>
<div class="line number7 index6 alt2"><code class="xml spaces">         </code><code class="xml plain">&lt;</code><code class="xml keyword">property</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"number"</code> <code class="xml color1">column</code><code class="xml plain">=</code><code class="xml string">"NUMBER"</code><code class="xml plain">/&gt;</code></div>
<div class="line number8 index7 alt1"><code class="xml spaces">         </code><code class="xml plain">&lt;</code><code class="xml keyword">many-to-one</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"person"</code> <code class="xml color1">column</code><code class="xml plain">=</code><code class="xml string">"ID_PERSON"</code> <code class="xml color1">unique</code><code class="xml plain">=</code><code class="xml string">"false"</code> <code class="xml color1">cascade</code><code class="xml plain">=</code><code class="xml string">"all"</code><code class="xml plain">/&gt;</code></div>
<div class="line number9 index8 alt2"><code class="xml spaces">     </code><code class="xml plain">&lt;/</code><code class="xml keyword">class</code><code class="xml plain">&gt;</code></div>
<div class="line number10 index9 alt1"><code class="xml spaces">     </code><code class="xml plain">&lt;</code><code class="xml keyword">class</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"Person"</code> <code class="xml color1">table</code><code class="xml plain">=</code><code class="xml string">"T_PERSON"</code><code class="xml plain">&gt;</code></div>
<div class="line number11 index10 alt2"><code class="xml spaces">          </code><code class="xml plain">&lt;</code><code class="xml keyword">id</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"id"</code> <code class="xml color1">column</code><code class="xml plain">=</code><code class="xml string">"ID"</code><code class="xml plain">&gt;</code></div>
<div class="line number12 index11 alt1"><code class="xml spaces">              </code><code class="xml plain">&lt;</code><code class="xml keyword">generator</code> <code class="xml color1">class</code><code class="xml plain">=</code><code class="xml string">"sequence"</code><code class="xml plain">/&gt;</code></div>
<div class="line number13 index12 alt2"><code class="xml spaces">          </code><code class="xml plain">&lt;/</code><code class="xml keyword">id</code><code class="xml plain">&gt;</code></div>
<div class="line number14 index13 alt1"><code class="xml spaces">          </code><code class="xml plain">&lt;</code><code class="xml keyword">discriminator</code> <code class="xml color1">column</code><code class="xml plain">=</code><code class="xml string">"PERSON_TYPE"</code> <code class="xml color1">type</code><code class="xml plain">=</code><code class="xml string">"string"</code><code class="xml plain">/&gt;</code></div>
<div class="line number15 index14 alt2"><code class="xml spaces">          </code><code class="xml plain">&lt;</code><code class="xml keyword">property</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"firstName"</code> <code class="xml color1">column</code><code class="xml plain">=</code><code class="xml string">"FIRST_NAME"</code><code class="xml plain">/&gt;</code></div>
<div class="line number16 index15 alt1"><code class="xml spaces">          </code><code class="xml plain">&lt;</code><code class="xml keyword">property</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"lastName"</code> <code class="xml color1">column</code><code class="xml plain">=</code><code class="xml string">"LAST_NAME"</code><code class="xml plain">/&gt;</code></div>
<div class="line number17 index16 alt2"><code class="xml spaces">          </code><code class="xml plain">&lt;</code><code class="xml keyword">many-to-one</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"idCard"</code> <code class="xml color1">column</code><code class="xml plain">=</code><code class="xml string">"ID_ID_CARD"</code> <code class="xml color1">unique</code><code class="xml plain">=</code><code class="xml string">"true"</code> <code class="xml color1">cascade</code><code class="xml plain">=</code><code class="xml string">"all"</code><code class="xml plain">/&gt;</code></div>
<div class="line number18 index17 alt1"><code class="xml spaces">                   </code><code class="xml plain">&lt;</code><code class="xml keyword">subclass</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"Geek"</code> <code class="xml color1">extends</code><code class="xml plain">=</code><code class="xml string">"Person"</code><code class="xml plain">&gt;</code></div>
<div class="line number19 index18 alt2"><code class="xml spaces">                </code><code class="xml plain">&lt;</code><code class="xml keyword">property</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"favouriteProgrammingLanguage"</code> <code class="xml color1">column</code><code class="xml plain">=</code><code class="xml string">"FAV_PROG_LANG"</code><code class="xml plain">/&gt;</code></div>
<div class="line number20 index19 alt1"><code class="xml spaces">           </code><code class="xml plain">&lt;/</code><code class="xml keyword">subclass</code><code class="xml plain">&gt;</code></div>
<div class="line number21 index20 alt2"><code class="xml spaces">       </code><code class="xml plain">&lt;/</code><code class="xml keyword">class</code><code class="xml plain">&gt;</code></div>
<div class="line number22 index21 alt1"><code class="xml plain">&lt;/</code><code class="xml keyword">hibernate-mapping</code><code class="xml plain">&gt;</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p> <span> В приведенном выше листинге приведено определение сопоставления для класса <code>Phone</code> .</span> <span> Помимо обычного идентификатора ( <code>id</code> ), который генерируется с использованием последовательности и <code>number</code> поля, это определение также содержит элемент <code>many-to-one</code> .</span> <span> В отличие от отношения «один к одному», которое мы видели ранее, для атрибута <code>unique</code> установлено значение <code>false</code> .</span> <span> Кроме того, <code>column</code> атрибута определяет имя столбца внешнего ключа и значение <code>cascade</code> атрибута, как Hibernate должен каскадировать операции с этим отношением.</span> </p>
<p> <span> После выполнения описанной выше конфигурации будут распечатаны следующие операторы DDL:</span> </p>
<div>
<div class="syntaxhighlighter sql" id="highlighter_918460">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">01</div>
<div class="line number2 index1 alt1">02</div>
<div class="line number3 index2 alt2">03</div>
<div class="line number4 index3 alt1">04</div>
<div class="line number5 index4 alt2">05</div>
<div class="line number6 index5 alt1">06</div>
<div class="line number7 index6 alt2">07</div>
<div class="line number8 index7 alt1">08</div>
<div class="line number9 index8 alt2">09</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
<div class="line number12 index11 alt1">12</div>
<div class="line number13 index12 alt2">13</div>
<div class="line number14 index13 alt1">14</div>
<div class="line number15 index14 alt2">15</div>
<div class="line number16 index15 alt1">16</div>
<div class="line number17 index16 alt2">17</div>
<div class="line number18 index17 alt1">18</div>
<div class="line number19 index18 alt2">19</div>
<div class="line number20 index19 alt1">20</div>
<div class="line number21 index20 alt2">21</div>
<div class="line number22 index21 alt1">22</div>
<div class="line number23 index22 alt2">23</div>
<div class="line number24 index23 alt1">24</div>
<div class="line number25 index24 alt2">25</div>
<div class="line number26 index25 alt1">26</div>
<div class="line number27 index26 alt2">27</div>
<div class="line number28 index27 alt1">28</div>
<div class="line number29 index28 alt2">29</div>
<div class="line number30 index29 alt1">30</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="sql plain">...</code></div>
<div class="line number2 index1 alt1"><code class="sql plain">Hibernate: </code></div>
<div class="line number3 index2 alt2"><code class="sql spaces">    </code><code class="sql keyword">drop</code> <code class="sql keyword">table</code> <code class="sql plain">T_PERSON if exists</code></div>
<div class="line number4 index3 alt1"><code class="sql plain">Hibernate: </code></div>
<div class="line number5 index4 alt2"><code class="sql spaces">    </code><code class="sql keyword">drop</code> <code class="sql keyword">table</code> <code class="sql plain">T_PHONE if exists</code></div>
<div class="line number6 index5 alt1"><code class="sql plain">...</code></div>
<div class="line number7 index6 alt2"><code class="sql plain">Hibernate: </code></div>
<div class="line number8 index7 alt1"><code class="sql spaces">    </code><code class="sql keyword">create</code> <code class="sql keyword">table</code> <code class="sql plain">T_PERSON (</code></div>
<div class="line number9 index8 alt2"><code class="sql spaces">        </code><code class="sql plain">ID </code><code class="sql keyword">bigint</code> <code class="sql color1">not</code> <code class="sql color1">null</code><code class="sql plain">,</code></div>
<div class="line number10 index9 alt1"><code class="sql spaces">        </code><code class="sql plain">PERSON_TYPE </code><code class="sql keyword">varchar</code><code class="sql plain">(255) </code><code class="sql color1">not</code> <code class="sql color1">null</code><code class="sql plain">,</code></div>
<div class="line number11 index10 alt2"><code class="sql spaces">        </code><code class="sql plain">FIRST_NAME </code><code class="sql keyword">varchar</code><code class="sql plain">(255),</code></div>
<div class="line number12 index11 alt1"><code class="sql spaces">        </code><code class="sql plain">LAST_NAME </code><code class="sql keyword">varchar</code><code class="sql plain">(255),</code></div>
<div class="line number13 index12 alt2"><code class="sql spaces">        </code><code class="sql plain">ID_ID_CARD </code><code class="sql keyword">bigint</code><code class="sql plain">,</code></div>
<div class="line number14 index13 alt1"><code class="sql spaces">        </code><code class="sql plain">FAV_PROG_LANG </code><code class="sql keyword">varchar</code><code class="sql plain">(255),</code></div>
<div class="line number15 index14 alt2"><code class="sql spaces">        </code><code class="sql keyword">primary</code> <code class="sql keyword">key</code> <code class="sql plain">(ID)</code></div>
<div class="line number16 index15 alt1"><code class="sql spaces">    </code><code class="sql plain">)</code></div>
<div class="line number17 index16 alt2"><code class="sql plain">Hibernate: </code></div>
<div class="line number18 index17 alt1"><code class="sql spaces">    </code><code class="sql keyword">create</code> <code class="sql keyword">table</code> <code class="sql plain">T_PHONE (</code></div>
<div class="line number19 index18 alt2"><code class="sql spaces">        </code><code class="sql plain">ID </code><code class="sql keyword">bigint</code> <code class="sql color1">not</code> <code class="sql color1">null</code><code class="sql plain">,</code></div>
<div class="line number20 index19 alt1"><code class="sql spaces">        </code><code class="sql plain">NUMBER </code><code class="sql keyword">varchar</code><code class="sql plain">(255),</code></div>
<div class="line number21 index20 alt2"><code class="sql spaces">        </code><code class="sql plain">ID_PERSON </code><code class="sql keyword">bigint</code><code class="sql plain">,</code></div>
<div class="line number22 index21 alt1"><code class="sql spaces">        </code><code class="sql keyword">primary</code> <code class="sql keyword">key</code> <code class="sql plain">(ID)</code></div>
<div class="line number23 index22 alt2"><code class="sql spaces">    </code><code class="sql plain">)</code></div>
<div class="line number24 index23 alt1"><code class="sql plain">...</code></div>
<div class="line number25 index24 alt2"><code class="sql plain">Hibernate: </code></div>
<div class="line number26 index25 alt1"><code class="sql spaces">    </code><code class="sql keyword">alter</code> <code class="sql keyword">table</code> <code class="sql plain">T_PHONE </code></div>
<div class="line number27 index26 alt2"><code class="sql spaces">        </code><code class="sql keyword">add</code> <code class="sql keyword">constraint</code> <code class="sql plain">FK_dvxwd55q1bax99ibyw4oxa8iy </code></div>
<div class="line number28 index27 alt1"><code class="sql spaces">        </code><code class="sql keyword">foreign</code> <code class="sql keyword">key</code> <code class="sql plain">(ID_PERSON) </code></div>
<div class="line number29 index28 alt2"><code class="sql spaces">        </code><code class="sql keyword">references</code> <code class="sql plain">T_PERSON</code></div>
<div class="line number30 index29 alt1"><code class="sql plain">...</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p> <span> Рядом с таблицей <code>T_PERSON</code> Hibernate теперь также создает новую таблицу <code>T_PHONE</code> с тремя столбцами <code>ID</code> , <code>NUMBER</code> и <code>ID_PERSON</code> .</span> <span> Поскольку в последнем столбце хранится ссылка на <code>Person</code> , Hibernate также добавляет ограничение внешнего ключа к таблице <code>T_PHONE</code> которое указывает на <code>ID</code> столбца таблицы <code>T_PERSON</code> .</span> </p>
<p> <span> Чтобы добавить номер телефона одному из существующих людей, мы сначала загружаем определенного человека, а затем добавляем телефон:</span> </p>
<div>
<div class="syntaxhighlighter java" id="highlighter_938675">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">01</div>
<div class="line number2 index1 alt1">02</div>
<div class="line number3 index2 alt2">03</div>
<div class="line number4 index3 alt1">04</div>
<div class="line number5 index4 alt2">05</div>
<div class="line number6 index5 alt1">06</div>
<div class="line number7 index6 alt2">07</div>
<div class="line number8 index7 alt1">08</div>
<div class="line number9 index8 alt2">09</div>
<div class="line number10 index9 alt1">10</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="java plain">session.getTransaction().begin();</code></div>
<div class="line number2 index1 alt1"><code class="java plain">List resultList = session.createQuery(</code><code class="java string">"from Person as person where person.firstName = ?"</code><code class="java plain">).setString(</code><code class="java value">0</code><code class="java plain">, </code><code class="java string">"Homer"</code><code class="java plain">).list();</code></div>
<div class="line number3 index2 alt2"><code class="java keyword">for</code> <code class="java plain">(Person person : resultList) {</code></div>
<div class="line number4 index3 alt1"><code class="java spaces">    </code><code class="java plain">Phone phone = </code><code class="java keyword">new</code> <code class="java plain">Phone();</code></div>
<div class="line number5 index4 alt2"><code class="java spaces">    </code><code class="java plain">phone.setNumber(</code><code class="java string">"+49 1234 456789"</code><code class="java plain">);</code></div>
<div class="line number6 index5 alt1"><code class="java spaces">    </code><code class="java plain">session.persist(phone);</code></div>
<div class="line number7 index6 alt2"><code class="java spaces">    </code><code class="java plain">person.getPhones().add(phone);</code></div>
<div class="line number8 index7 alt1"><code class="java spaces">    </code><code class="java plain">phone.setPerson(person);</code></div>
<div class="line number9 index8 alt2"><code class="java plain">}</code></div>
<div class="line number10 index9 alt1"><code class="java plain">session.getTransaction().commit();</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p> <span> В этом примере показано, как загрузить человека из хранилища данных с помощью языка запросов Hibernate (HQL).</span> <span> Подобно SQL этот запрос состоит из предложения from и where.</span> <span> На столбец <code>FIRST_NAME</code> нет ссылки с использованием его имени SQL.</span> <span> Вместо этого используется имя поля / свойства Java.</span> <span> Такие параметры, как имя, могут быть переданы в запрос с помощью <code>setString()</code> .</span> </p>
<p> <span> Далее код перебирает найденных лиц (должен быть только один) и создает новый экземпляр <code>Phone</code> который добавляется в набор телефонов найденного человека.</span> <span> Ссылка с телефона на человека также устанавливается до совершения транзакции.</span> <span> Выполнив этот код, база данных выглядит следующим образом:</span> </p>
<div>
<div class="syntaxhighlighter sql" id="highlighter_867088">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
<div class="line number5 index4 alt2">5</div>
<div class="line number6 index5 alt1">6</div>
<div class="line number7 index6 alt2">7</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="sql plain">sql&gt; </code><code class="sql keyword">select</code> <code class="sql plain">* </code><code class="sql keyword">from</code> <code class="sql plain">t_person </code><code class="sql keyword">where</code> <code class="sql plain">first_name = </code><code class="sql string">'Homer'</code><code class="sql plain">;</code></div>
<div class="line number2 index1 alt1"><code class="sql plain">ID | PERSON_TYPE             | FIRST_NAME | LAST_NAME | ID_ID_CARD | FAV_PROG_LANG</code></div>
<div class="line number3 index2 alt2"><code class="sql plain">1  | hibernate.entity.Person | Homer      | Simpson   | 2          | </code><code class="sql color1">null</code></div>
<div class="line number4 index3 alt1"> </div>
<div class="line number5 index4 alt2"><code class="sql plain">sql&gt; </code><code class="sql keyword">select</code> <code class="sql plain">* </code><code class="sql keyword">from</code> <code class="sql plain">t_phone;</code></div>
<div class="line number6 index5 alt1"><code class="sql plain">ID | NUMBER          | ID_PERSON</code></div>
<div class="line number7 index6 alt2"><code class="sql plain">6  | +49 1234 456789 | 1</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p> <span> Наборы результатов двух приведенных выше операторов выбора показывают, что строка в <code>T_PHONE</code> связана с выбранной строкой в <code>T_PERSON</code> поскольку она содержит идентификатор человека с именем «Гомер» в столбце <code>ID_ID_PERSON</code> .</span> </p>
<h2><a name="relationships_manytomany"/> <span> 5.3.</span> <span> ManyToMany</span> </h2>
<p> <span> Следующее интересное отношение — отношение «многие ко многим».</span> <span> В этом случае многие объекты типа A могут принадлежать многим объектам типа B и наоборот.</span> <span> На практике это, например, случай с фанатами и проектами.</span> <span> Один компьютерщик может работать в нескольких проектах (одновременно или последовательно), а один проект может состоять из нескольких компьютеров.</span> <span> Поэтому вводится новая сущность <code>Project</code> :</span> </p>
<div>
<div class="syntaxhighlighter java" id="highlighter_568335">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">01</div>
<div class="line number2 index1 alt1">02</div>
<div class="line number3 index2 alt2">03</div>
<div class="line number4 index3 alt1">04</div>
<div class="line number5 index4 alt2">05</div>
<div class="line number6 index5 alt1">06</div>
<div class="line number7 index6 alt2">07</div>
<div class="line number8 index7 alt1">08</div>
<div class="line number9 index8 alt2">09</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
<div class="line number12 index11 alt1">12</div>
<div class="line number13 index12 alt2">13</div>
<div class="line number14 index13 alt1">14</div>
<div class="line number15 index14 alt2">15</div>
<div class="line number16 index15 alt1">16</div>
<div class="line number17 index16 alt2">17</div>
<div class="line number18 index17 alt1">18</div>
<div class="line number19 index18 alt2">19</div>
<div class="line number20 index19 alt1">20</div>
<div class="line number21 index20 alt2">21</div>
<div class="line number22 index21 alt1">22</div>
<div class="line number23 index22 alt2">23</div>
<div class="line number24 index23 alt1">24</div>
<div class="line number25 index24 alt2">25</div>
<div class="line number26 index25 alt1">26</div>
<div class="line number27 index26 alt2">27</div>
<div class="line number28 index27 alt1">28</div>
<div class="line number29 index28 alt2">29</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">Project {</code></div>
<div class="line number2 index1 alt1"><code class="java spaces">    </code><code class="java keyword">private</code> <code class="java plain">Long id;</code></div>
<div class="line number3 index2 alt2"><code class="java spaces">    </code><code class="java keyword">private</code> <code class="java plain">String title;</code></div>
<div class="line number4 index3 alt1"><code class="java spaces">    </code><code class="java keyword">private</code> <code class="java plain">Set geeks = </code><code class="java keyword">new</code> <code class="java plain">HashSet();</code></div>
<div class="line number5 index4 alt2"> </div>
<div class="line number6 index5 alt1"><code class="java spaces">    </code><code class="java keyword">public</code> <code class="java plain">Long getId() {</code></div>
<div class="line number7 index6 alt2"><code class="java spaces">        </code><code class="java keyword">return</code> <code class="java plain">id;</code></div>
<div class="line number8 index7 alt1"><code class="java spaces">    </code><code class="java plain">}</code></div>
<div class="line number9 index8 alt2"> </div>
<div class="line number10 index9 alt1"><code class="java spaces">    </code><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">setId(Long id) {</code></div>
<div class="line number11 index10 alt2"><code class="java spaces">        </code><code class="java keyword">this</code><code class="java plain">.id = id;</code></div>
<div class="line number12 index11 alt1"><code class="java spaces">    </code><code class="java plain">}</code></div>
<div class="line number13 index12 alt2"> </div>
<div class="line number14 index13 alt1"><code class="java spaces">    </code><code class="java keyword">public</code> <code class="java plain">String getTitle() {</code></div>
<div class="line number15 index14 alt2"><code class="java spaces">        </code><code class="java keyword">return</code> <code class="java plain">title;</code></div>
<div class="line number16 index15 alt1"><code class="java spaces">    </code><code class="java plain">}</code></div>
<div class="line number17 index16 alt2"> </div>
<div class="line number18 index17 alt1"><code class="java spaces">    </code><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">setTitle(String title) {</code></div>
<div class="line number19 index18 alt2"><code class="java spaces">        </code><code class="java keyword">this</code><code class="java plain">.title = title;</code></div>
<div class="line number20 index19 alt1"><code class="java spaces">    </code><code class="java plain">}</code></div>
<div class="line number21 index20 alt2"> </div>
<div class="line number22 index21 alt1"><code class="java spaces">    </code><code class="java keyword">public</code> <code class="java plain">Set getGeeks() {</code></div>
<div class="line number23 index22 alt2"><code class="java spaces">        </code><code class="java keyword">return</code> <code class="java plain">geeks;</code></div>
<div class="line number24 index23 alt1"><code class="java spaces">    </code><code class="java plain">}</code></div>
<div class="line number25 index24 alt2"> </div>
<div class="line number26 index25 alt1"><code class="java spaces">    </code><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">setGeeks(Set geeks) {</code></div>
<div class="line number27 index26 alt2"><code class="java spaces">        </code><code class="java keyword">this</code><code class="java plain">.geeks = geeks;</code></div>
<div class="line number28 index27 alt1"><code class="java spaces">    </code><code class="java plain">}</code></div>
<div class="line number29 index28 alt2"><code class="java plain">}</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p> <span> Он состоит рядом с идентификатором ( <code>id</code> ) заголовка и набором гиков.</span> <span> С другой стороны отношения у класса <code>Geek</code> есть множество проектов:</span> </p>
<div>
<div class="syntaxhighlighter java" id="highlighter_863313">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">01</div>
<div class="line number2 index1 alt1">02</div>
<div class="line number3 index2 alt2">03</div>
<div class="line number4 index3 alt1">04</div>
<div class="line number5 index4 alt2">05</div>
<div class="line number6 index5 alt1">06</div>
<div class="line number7 index6 alt2">07</div>
<div class="line number8 index7 alt1">08</div>
<div class="line number9 index8 alt2">09</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
<div class="line number12 index11 alt1">12</div>
<div class="line number13 index12 alt2">13</div>
<div class="line number14 index13 alt1">14</div>
<div class="line number15 index14 alt2">15</div>
<div class="line number16 index15 alt1">16</div>
<div class="line number17 index16 alt2">17</div>
<div class="line number18 index17 alt1">18</div>
<div class="line number19 index18 alt2">19</div>
<div class="line number20 index19 alt1">20</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">Geek </code><code class="java keyword">extends</code> <code class="java plain">Person {</code></div>
<div class="line number2 index1 alt1"><code class="java spaces">    </code><code class="java keyword">private</code> <code class="java plain">String favouriteProgrammingLanguage;</code></div>
<div class="line number3 index2 alt2"><code class="java spaces">    </code><code class="java keyword">private</code> <code class="java plain">Set projects = </code><code class="java keyword">new</code> <code class="java plain">HashSet();</code></div>
<div class="line number4 index3 alt1"> </div>
<div class="line number5 index4 alt2"><code class="java spaces">    </code><code class="java keyword">public</code> <code class="java plain">String getFavouriteProgrammingLanguage() {</code></div>
<div class="line number6 index5 alt1"><code class="java spaces">            </code><code class="java keyword">return</code> <code class="java plain">favouriteProgrammingLanguage;</code></div>
<div class="line number7 index6 alt2"><code class="java spaces">    </code><code class="java plain">}</code></div>
<div class="line number8 index7 alt1"> </div>
<div class="line number9 index8 alt2"><code class="java spaces">    </code><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">setFavouriteProgrammingLanguage(String favouriteProgrammingLanguage) {</code></div>
<div class="line number10 index9 alt1"><code class="java spaces">        </code><code class="java keyword">this</code><code class="java plain">.favouriteProgrammingLanguage = favouriteProgrammingLanguage;</code></div>
<div class="line number11 index10 alt2"><code class="java spaces">    </code><code class="java plain">}</code></div>
<div class="line number12 index11 alt1"> </div>
<div class="line number13 index12 alt2"><code class="java spaces">    </code><code class="java keyword">public</code> <code class="java plain">Set getProjects() {</code></div>
<div class="line number14 index13 alt1"><code class="java spaces">        </code><code class="java keyword">return</code> <code class="java plain">projects;</code></div>
<div class="line number15 index14 alt2"><code class="java spaces">    </code><code class="java plain">}</code></div>
<div class="line number16 index15 alt1"> </div>
<div class="line number17 index16 alt2"><code class="java spaces">    </code><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">setProjects(Set projects) {</code></div>
<div class="line number18 index17 alt1"><code class="java spaces">        </code><code class="java keyword">this</code><code class="java plain">.projects = projects;</code></div>
<div class="line number19 index18 alt2"><code class="java spaces">    </code><code class="java plain">}</code></div>
<div class="line number20 index19 alt1"><code class="java plain">}</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p> <span> Для поддержки такого рода отношений файл сопоставления должен быть изменен следующим образом:</span> </p>
<div>
<div class="syntaxhighlighter xml" id="highlighter_434866">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">01</div>
<div class="line number2 index1 alt1">02</div>
<div class="line number3 index2 alt2">03</div>
<div class="line number4 index3 alt1">04</div>
<div class="line number5 index4 alt2">05</div>
<div class="line number6 index5 alt1">06</div>
<div class="line number7 index6 alt2">07</div>
<div class="line number8 index7 alt1">08</div>
<div class="line number9 index8 alt2">09</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
<div class="line number12 index11 alt1">12</div>
<div class="line number13 index12 alt2">13</div>
<div class="line number14 index13 alt1">14</div>
<div class="line number15 index14 alt2">15</div>
<div class="line number16 index15 alt1">16</div>
<div class="line number17 index16 alt2">17</div>
<div class="line number18 index17 alt1">18</div>
<div class="line number19 index18 alt2">19</div>
<div class="line number20 index19 alt1">20</div>
<div class="line number21 index20 alt2">21</div>
<div class="line number22 index21 alt1">22</div>
<div class="line number23 index22 alt2">23</div>
<div class="line number24 index23 alt1">24</div>
<div class="line number25 index24 alt2">25</div>
<div class="line number26 index25 alt1">26</div>
<div class="line number27 index26 alt2">27</div>
<div class="line number28 index27 alt1">28</div>
<div class="line number29 index28 alt2">29</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="xml plain">&lt;</code><code class="xml keyword">hibernate-mapping</code> <code class="xml color1">package</code><code class="xml plain">=</code><code class="xml string">"hibernate.entity"</code><code class="xml plain">&gt;</code></div>
<div class="line number2 index1 alt1"><code class="xml spaces">       </code><code class="xml plain">...</code></div>
<div class="line number3 index2 alt2"><code class="xml spaces">    </code><code class="xml plain">&lt;</code><code class="xml keyword">class</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"Project"</code> <code class="xml color1">table</code><code class="xml plain">=</code><code class="xml string">"T_PROJECT"</code><code class="xml plain">&gt;</code></div>
<div class="line number4 index3 alt1"><code class="xml spaces">       </code><code class="xml plain">&lt;</code><code class="xml keyword">id</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"id"</code> <code class="xml color1">column</code><code class="xml plain">=</code><code class="xml string">"ID"</code><code class="xml plain">&gt;</code></div>
<div class="line number5 index4 alt2"><code class="xml spaces">           </code><code class="xml plain">&lt;</code><code class="xml keyword">generator</code> <code class="xml color1">class</code><code class="xml plain">=</code><code class="xml string">"sequence"</code><code class="xml plain">/&gt;</code></div>
<div class="line number6 index5 alt1"><code class="xml spaces">        </code><code class="xml plain">&lt;/</code><code class="xml keyword">id</code><code class="xml plain">&gt;</code></div>
<div class="line number7 index6 alt2"><code class="xml spaces">        </code><code class="xml plain">&lt;</code><code class="xml keyword">property</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"title"</code> <code class="xml color1">column</code><code class="xml plain">=</code><code class="xml string">"TITLE"</code><code class="xml plain">/&gt;</code></div>
<div class="line number8 index7 alt1"><code class="xml spaces">        </code><code class="xml plain">&lt;</code><code class="xml keyword">set</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"geeks"</code> <code class="xml color1">table</code><code class="xml plain">=</code><code class="xml string">"T_GEEKS_PROJECTS"</code><code class="xml plain">&gt;</code></div>
<div class="line number9 index8 alt2"><code class="xml spaces">           </code><code class="xml plain">&lt;</code><code class="xml keyword">key</code> <code class="xml color1">column</code><code class="xml plain">=</code><code class="xml string">"ID_PROJECT"</code><code class="xml plain">/&gt;</code></div>
<div class="line number10 index9 alt1"><code class="xml spaces">           </code><code class="xml plain">&lt;</code><code class="xml keyword">many-to-many</code> <code class="xml color1">column</code><code class="xml plain">=</code><code class="xml string">"ID_GEEK"</code> <code class="xml color1">class</code><code class="xml plain">=</code><code class="xml string">"Geek"</code><code class="xml plain">/&gt;</code></div>
<div class="line number11 index10 alt2"><code class="xml spaces">        </code><code class="xml plain">&lt;/</code><code class="xml keyword">set</code><code class="xml plain">&gt;</code></div>
<div class="line number12 index11 alt1"><code class="xml spaces">      </code><code class="xml plain">&lt;/</code><code class="xml keyword">class</code><code class="xml plain">&gt;</code></div>
<div class="line number13 index12 alt2"><code class="xml spaces">      </code><code class="xml plain">&lt;</code><code class="xml keyword">class</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"Person"</code> <code class="xml color1">table</code><code class="xml plain">=</code><code class="xml string">"T_PERSON"</code><code class="xml plain">&gt;</code></div>
<div class="line number14 index13 alt1"><code class="xml spaces">         </code><code class="xml plain">&lt;</code><code class="xml keyword">id</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"id"</code> <code class="xml color1">column</code><code class="xml plain">=</code><code class="xml string">"ID"</code><code class="xml plain">&gt;</code></div>
<div class="line number15 index14 alt2"><code class="xml spaces">             </code><code class="xml plain">&lt;</code><code class="xml keyword">generator</code> <code class="xml color1">class</code><code class="xml plain">=</code><code class="xml string">"sequence"</code><code class="xml plain">/&gt;</code></div>
<div class="line number16 index15 alt1"><code class="xml spaces">         </code><code class="xml plain">&lt;/</code><code class="xml keyword">id</code><code class="xml plain">&gt;</code></div>
<div class="line number17 index16 alt2"><code class="xml spaces">         </code><code class="xml plain">&lt;</code><code class="xml keyword">discriminator</code> <code class="xml color1">column</code><code class="xml plain">=</code><code class="xml string">"PERSON_TYPE"</code> <code class="xml color1">type</code><code class="xml plain">=</code><code class="xml string">"string"</code><code class="xml plain">/&gt;</code></div>
<div class="line number18 index17 alt1"><code class="xml spaces">         </code><code class="xml plain">&lt;</code><code class="xml keyword">property</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"firstName"</code> <code class="xml color1">column</code><code class="xml plain">=</code><code class="xml string">"FIRST_NAME"</code><code class="xml plain">/&gt;</code></div>
<div class="line number19 index18 alt2"><code class="xml spaces">         </code><code class="xml plain">&lt;</code><code class="xml keyword">property</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"lastName"</code> <code class="xml color1">column</code><code class="xml plain">=</code><code class="xml string">"LAST_NAME"</code><code class="xml plain">/&gt;</code></div>
<div class="line number20 index19 alt1"><code class="xml spaces">         </code><code class="xml plain">&lt;</code><code class="xml keyword">many-to-one</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"idCard"</code> <code class="xml color1">column</code><code class="xml plain">=</code><code class="xml string">"ID_ID_CARD"</code> <code class="xml color1">unique</code><code class="xml plain">=</code><code class="xml string">"true"</code> <code class="xml color1">cascade</code><code class="xml plain">=</code><code class="xml string">"all"</code><code class="xml plain">/&gt;</code></div>
<div class="line number21 index20 alt2"><code class="xml spaces">         </code><code class="xml plain">&lt;</code><code class="xml keyword">subclass</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"Geek"</code> <code class="xml color1">extends</code><code class="xml plain">=</code><code class="xml string">"Person"</code><code class="xml plain">&gt;</code></div>
<div class="line number22 index21 alt1"><code class="xml spaces">              </code><code class="xml plain">&lt;</code><code class="xml keyword">property</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"favouriteProgrammingLanguage"</code> <code class="xml color1">column</code><code class="xml plain">=</code><code class="xml string">"FAV_PROG_LANG"</code><code class="xml plain">/&gt;</code></div>
<div class="line number23 index22 alt2"><code class="xml spaces">              </code><code class="xml plain">&lt;</code><code class="xml keyword">set</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"projects"</code> <code class="xml color1">inverse</code><code class="xml plain">=</code><code class="xml string">"true"</code><code class="xml plain">&gt;</code></div>
<div class="line number24 index23 alt1"><code class="xml spaces">                   </code><code class="xml plain">&lt;</code><code class="xml keyword">key</code> <code class="xml color1">column</code><code class="xml plain">=</code><code class="xml string">"ID_GEEK"</code><code class="xml plain">/&gt;</code></div>
<div class="line number25 index24 alt2"><code class="xml spaces">                   </code><code class="xml plain">&lt;</code><code class="xml keyword">many-to-many</code> <code class="xml color1">column</code><code class="xml plain">=</code><code class="xml string">"ID_PROJECT"</code> <code class="xml color1">class</code><code class="xml plain">=</code><code class="xml string">"Project"</code><code class="xml plain">/&gt;</code></div>
<div class="line number26 index25 alt1"><code class="xml spaces">               </code><code class="xml plain">&lt;/</code><code class="xml keyword">set</code><code class="xml plain">&gt;</code></div>
<div class="line number27 index26 alt2"><code class="xml spaces">        </code><code class="xml plain">&lt;/</code><code class="xml keyword">subclass</code><code class="xml plain">&gt;</code></div>
<div class="line number28 index27 alt1"><code class="xml spaces">      </code><code class="xml plain">&lt;/</code><code class="xml keyword">class</code><code class="xml plain">&gt;</code></div>
<div class="line number29 index28 alt2"><code class="xml plain">&lt;/</code><code class="xml keyword">hibernate-mapping</code><code class="xml plain">&gt;</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p> <span> Прежде всего мы видим новый класс <code>Project</code> который сопоставлен с таблицей <code>T_PROJECT</code> .</span> <span> Его уникальный идентификатор хранится в поле <code>id</code> а <code>title</code> поля — в столбце <code>TITLE</code> .</span> <span> Набор элементов XML определяет одну сторону отображения: элементы внутри набора <code>geeks</code> должны храниться в отдельной таблице с именем <code>T_GEEKS_PROJECTS</code> со столбцами <code>ID_PROJECT</code> и <code>ID_GEEK</code> .</span> <span> С другой стороны отношения элемент XML, <code>set</code> внутри <code>subclass</code> для <code>Geek</code> определяет обратное отношение ( <code>inverse="true"</code> ).</span> <span> С этой стороны поле в классе <code>Geek</code> называется <code>projects</code> а ссылочный класс — <code>Project</code> .</span> </p>
<p> <span> Результирующие операторы для создания таблиц выглядят так:</span> </p>
<div>
<div class="syntaxhighlighter sql" id="highlighter_52368">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">01</div>
<div class="line number2 index1 alt1">02</div>
<div class="line number3 index2 alt2">03</div>
<div class="line number4 index3 alt1">04</div>
<div class="line number5 index4 alt2">05</div>
<div class="line number6 index5 alt1">06</div>
<div class="line number7 index6 alt2">07</div>
<div class="line number8 index7 alt1">08</div>
<div class="line number9 index8 alt2">09</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
<div class="line number12 index11 alt1">12</div>
<div class="line number13 index12 alt2">13</div>
<div class="line number14 index13 alt1">14</div>
<div class="line number15 index14 alt2">15</div>
<div class="line number16 index15 alt1">16</div>
<div class="line number17 index16 alt2">17</div>
<div class="line number18 index17 alt1">18</div>
<div class="line number19 index18 alt2">19</div>
<div class="line number20 index19 alt1">20</div>
<div class="line number21 index20 alt2">21</div>
<div class="line number22 index21 alt1">22</div>
<div class="line number23 index22 alt2">23</div>
<div class="line number24 index23 alt1">24</div>
<div class="line number25 index24 alt2">25</div>
<div class="line number26 index25 alt1">26</div>
<div class="line number27 index26 alt2">27</div>
<div class="line number28 index27 alt1">28</div>
<div class="line number29 index28 alt2">29</div>
<div class="line number30 index29 alt1">30</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="sql plain">...</code></div>
<div class="line number2 index1 alt1"><code class="sql plain">Hibernate: </code></div>
<div class="line number3 index2 alt2"><code class="sql spaces">    </code><code class="sql keyword">drop</code> <code class="sql keyword">table</code> <code class="sql plain">T_GEEKS_PROJECTS if exists</code></div>
<div class="line number4 index3 alt1"><code class="sql plain">Hibernate: </code></div>
<div class="line number5 index4 alt2"><code class="sql spaces">    </code><code class="sql keyword">drop</code> <code class="sql keyword">table</code> <code class="sql plain">T_PROJECT if exists</code></div>
<div class="line number6 index5 alt1"><code class="sql plain">...</code></div>
<div class="line number7 index6 alt2"><code class="sql plain">Hibernate: </code></div>
<div class="line number8 index7 alt1"><code class="sql spaces">    </code><code class="sql keyword">create</code> <code class="sql keyword">table</code> <code class="sql plain">T_GEEKS_PROJECTS (</code></div>
<div class="line number9 index8 alt2"><code class="sql spaces">        </code><code class="sql plain">ID_PROJECT </code><code class="sql keyword">bigint</code> <code class="sql color1">not</code> <code class="sql color1">null</code><code class="sql plain">,</code></div>
<div class="line number10 index9 alt1"><code class="sql spaces">        </code><code class="sql plain">ID_GEEK </code><code class="sql keyword">bigint</code> <code class="sql color1">not</code> <code class="sql color1">null</code><code class="sql plain">,</code></div>
<div class="line number11 index10 alt2"><code class="sql spaces">        </code><code class="sql keyword">primary</code> <code class="sql keyword">key</code> <code class="sql plain">(ID_PROJECT, ID_GEEK)</code></div>
<div class="line number12 index11 alt1"><code class="sql spaces">    </code><code class="sql plain">)</code></div>
<div class="line number13 index12 alt2"><code class="sql plain">Hibernate: </code></div>
<div class="line number14 index13 alt1"><code class="sql spaces">    </code><code class="sql keyword">create</code> <code class="sql keyword">table</code> <code class="sql plain">T_PROJECT (</code></div>
<div class="line number15 index14 alt2"><code class="sql spaces">        </code><code class="sql plain">ID </code><code class="sql keyword">bigint</code> <code class="sql color1">not</code> <code class="sql color1">null</code><code class="sql plain">,</code></div>
<div class="line number16 index15 alt1"><code class="sql spaces">        </code><code class="sql plain">TITLE </code><code class="sql keyword">varchar</code><code class="sql plain">(255),</code></div>
<div class="line number17 index16 alt2"><code class="sql spaces">        </code><code class="sql keyword">primary</code> <code class="sql keyword">key</code> <code class="sql plain">(ID)</code></div>
<div class="line number18 index17 alt1"><code class="sql spaces">    </code><code class="sql plain">)</code></div>
<div class="line number19 index18 alt2"><code class="sql plain">...</code></div>
<div class="line number20 index19 alt1"><code class="sql plain">Hibernate: </code></div>
<div class="line number21 index20 alt2"><code class="sql spaces">    </code><code class="sql keyword">alter</code> <code class="sql keyword">table</code> <code class="sql plain">T_GEEKS_PROJECTS </code></div>
<div class="line number22 index21 alt1"><code class="sql spaces">        </code><code class="sql keyword">add</code> <code class="sql keyword">constraint</code> <code class="sql plain">FK_2kp3f3tq46ckky02pshvjngaq </code></div>
<div class="line number23 index22 alt2"><code class="sql spaces">        </code><code class="sql keyword">foreign</code> <code class="sql keyword">key</code> <code class="sql plain">(ID_GEEK) </code></div>
<div class="line number24 index23 alt1"><code class="sql spaces">        </code><code class="sql keyword">references</code> <code class="sql plain">T_PERSON</code></div>
<div class="line number25 index24 alt2"><code class="sql plain">Hibernate: </code></div>
<div class="line number26 index25 alt1"><code class="sql spaces">    </code><code class="sql keyword">alter</code> <code class="sql keyword">table</code> <code class="sql plain">T_GEEKS_PROJECTS </code></div>
<div class="line number27 index26 alt2"><code class="sql spaces">        </code><code class="sql keyword">add</code> <code class="sql keyword">constraint</code> <code class="sql plain">FK_36tafu1nw9j5o51d21xm5rqne </code></div>
<div class="line number28 index27 alt1"><code class="sql spaces">        </code><code class="sql keyword">foreign</code> <code class="sql keyword">key</code> <code class="sql plain">(ID_PROJECT) </code></div>
<div class="line number29 index28 alt2"><code class="sql spaces">        </code><code class="sql keyword">references</code> <code class="sql plain">T_PROJECT</code></div>
<div class="line number30 index29 alt1"><code class="sql plain">...</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p> <span> Эти операторы создают новые таблицы <code>T_PROJECT</code> а также <code>T_GEEKS_PROJECTS</code> .</span> <span> Таблица <code>T_PROJECT</code> состоит из <code>ID</code> столбцов и <code>TITLE</code> посредством чего значения в <code>ID</code> столбца упоминаются в новой таблице <code>T_GEEKS_PROJECTS</code> в ее столбце <code>ID_PROJECT</code> .</span> <span> Второй внешний ключ в этой таблице указывает на первичный ключ <code>T_PERSON</code> .</span> </p>
<p> <span> Чтобы вставить проект с несколькими гиками, которые могут программировать на Java, в хранилище данных, можно использовать следующий код:</span> </p>
<div>
<div class="syntaxhighlighter java" id="highlighter_136968">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">01</div>
<div class="line number2 index1 alt1">02</div>
<div class="line number3 index2 alt2">03</div>
<div class="line number4 index3 alt1">04</div>
<div class="line number5 index4 alt2">05</div>
<div class="line number6 index5 alt1">06</div>
<div class="line number7 index6 alt2">07</div>
<div class="line number8 index7 alt1">08</div>
<div class="line number9 index8 alt2">09</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="java plain">session.getTransaction().begin();</code></div>
<div class="line number2 index1 alt1"><code class="java plain">List resultList = session.createQuery("from Geek as geek </code></div>
<div class="line number3 index2 alt2"><code class="java spaces">    </code><code class="java plain">where geek.favouriteProgrammingLanguage = ?</code><code class="java string">").setString(0, "</code><code class="java plain">Java").list();</code></div>
<div class="line number4 index3 alt1"><code class="java plain">Project project = </code><code class="java keyword">new</code> <code class="java plain">Project();</code></div>
<div class="line number5 index4 alt2"><code class="java plain">project.setTitle(</code><code class="java string">"Java Project"</code><code class="java plain">);</code></div>
<div class="line number6 index5 alt1"><code class="java keyword">for</code> <code class="java plain">(Geek geek : resultList) {</code></div>
<div class="line number7 index6 alt2"><code class="java spaces">    </code><code class="java plain">project.getGeeks().add(geek);</code></div>
<div class="line number8 index7 alt1"><code class="java spaces">    </code><code class="java plain">geek.getProjects().add(project);</code></div>
<div class="line number9 index8 alt2"><code class="java plain">}</code></div>
<div class="line number10 index9 alt1"><code class="java plain">session.save(project);</code></div>
<div class="line number11 index10 alt2"><code class="java plain">session.getTransaction().commit();</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p> <span> Первоначальный запрос выбирает всех гиков, для которых «Java» является их любимым языком программирования.</span> <span> Затем создается новый экземпляр <code>Project</code> и все гики, которые находятся в наборе результатов запроса, добавляются в набор гиков проекта.</span> <span> С другой стороны отношения проект добавляется в набор проектов для гика.</span> <span> Наконец проект сохраняется, и транзакция фиксируется.</span> </p>
<p> <span> После выполнения этого кода база данных выглядит следующим образом:</span> </p>
<div>
<div class="syntaxhighlighter bash" id="highlighter_491445">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">01</div>
<div class="line number2 index1 alt1">02</div>
<div class="line number3 index2 alt2">03</div>
<div class="line number4 index3 alt1">04</div>
<div class="line number5 index4 alt2">05</div>
<div class="line number6 index5 alt1">06</div>
<div class="line number7 index6 alt2">07</div>
<div class="line number8 index7 alt1">08</div>
<div class="line number9 index8 alt2">09</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
<div class="line number12 index11 alt1">12</div>
<div class="line number13 index12 alt2">13</div>
<div class="line number14 index13 alt1">14</div>
<div class="line number15 index14 alt2">15</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="bash plain">sql&gt; </code><code class="bash functions">select</code> <code class="bash plain">* from t_person;</code></div>
<div class="line number2 index1 alt1"><code class="bash plain">ID | PERSON_TYPE             | FIRST_NAME | LAST_NAME | ID_ID_CARD | FAV_PROG_LANG</code></div>
<div class="line number3 index2 alt2"><code class="bash plain">1  | hibernate.entity.Person | Homer      | Simpson   | 2          | null</code></div>
<div class="line number4 index3 alt1"><code class="bash plain">3  | hibernate.entity.Geek   | Gavin      | Coffee    | null       | Java</code></div>
<div class="line number5 index4 alt2"><code class="bash plain">4  | hibernate.entity.Geek   | Thomas     | Micro     | null       | C</code><code class="bash comments">#</code></div>
<div class="line number6 index5 alt1"><code class="bash plain">5  | hibernate.entity.Geek   | Christian  | Cup       | null       | Java</code></div>
<div class="line number7 index6 alt2"> </div>
<div class="line number8 index7 alt1"><code class="bash plain">sql&gt; </code><code class="bash functions">select</code> <code class="bash plain">* from t_project;</code></div>
<div class="line number9 index8 alt2"><code class="bash plain">ID | TITLE</code></div>
<div class="line number10 index9 alt1"><code class="bash plain">7  | Java Project</code></div>
<div class="line number11 index10 alt2"> </div>
<div class="line number12 index11 alt1"><code class="bash plain">sql&gt; </code><code class="bash functions">select</code> <code class="bash plain">* from t_geeks_projects;</code></div>
<div class="line number13 index12 alt2"><code class="bash plain">ID_PROJECT | ID_GEEK</code></div>
<div class="line number14 index13 alt1"><code class="bash plain">7          | 5</code></div>
<div class="line number15 index14 alt2"><code class="bash plain">7          | 3</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p> <span> Первый выбор показывает, что только два вундеркинда с id 3 и 5 указали, что Java является их любимым языком программирования.</span> <span> Следовательно, проект с названием «Java Project» (id: 7) состоит из двух вундеркиндов с идентификаторами 3 и 5 (последний оператор выбора).</span> </p>
<h2><a name="relationships_components"/> <span> 5.4.</span> <span> Составная часть</span> </h2>
<p> <span> Правила объектно-ориентированного проектирования предлагают выделять часто используемые поля в отдельный класс.</span> <span> Например, класс <code>Project</code> указанный выше, по-прежнему пропускает дату начала и окончания.</span> <span> Но так как такой период времени можно использовать и для других объектов, мы можем создать новый класс с именем <code>Period</code> который инкапсулирует два поля <code>startDate</code> и <code>endDate</code> :</span> </p>
<div>
<div class="syntaxhighlighter java" id="highlighter_755361">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">01</div>
<div class="line number2 index1 alt1">02</div>
<div class="line number3 index2 alt2">03</div>
<div class="line number4 index3 alt1">04</div>
<div class="line number5 index4 alt2">05</div>
<div class="line number6 index5 alt1">06</div>
<div class="line number7 index6 alt2">07</div>
<div class="line number8 index7 alt1">08</div>
<div class="line number9 index8 alt2">09</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
<div class="line number12 index11 alt1">12</div>
<div class="line number13 index12 alt2">13</div>
<div class="line number14 index13 alt1">14</div>
<div class="line number15 index14 alt2">15</div>
<div class="line number16 index15 alt1">16</div>
<div class="line number17 index16 alt2">17</div>
<div class="line number18 index17 alt1">18</div>
<div class="line number19 index18 alt2">19</div>
<div class="line number20 index19 alt1">20</div>
<div class="line number21 index20 alt2">21</div>
<div class="line number22 index21 alt1">22</div>
<div class="line number23 index22 alt2">23</div>
<div class="line number24 index23 alt1">24</div>
<div class="line number25 index24 alt2">25</div>
<div class="line number26 index25 alt1">26</div>
<div class="line number27 index26 alt2">27</div>
<div class="line number28 index27 alt1">28</div>
<div class="line number29 index28 alt2">29</div>
<div class="line number30 index29 alt1">30</div>
<div class="line number31 index30 alt2">31</div>
<div class="line number32 index31 alt1">32</div>
<div class="line number33 index32 alt2">33</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">Period {</code></div>
<div class="line number2 index1 alt1"><code class="java spaces">    </code><code class="java keyword">private</code> <code class="java plain">Date startDate;</code></div>
<div class="line number3 index2 alt2"><code class="java spaces">    </code><code class="java keyword">private</code> <code class="java plain">Date endDate;</code></div>
<div class="line number4 index3 alt1"> </div>
<div class="line number5 index4 alt2"><code class="java spaces">    </code><code class="java keyword">public</code> <code class="java plain">Date getStartDate() {</code></div>
<div class="line number6 index5 alt1"><code class="java spaces">        </code><code class="java keyword">return</code> <code class="java plain">startDate;</code></div>
<div class="line number7 index6 alt2"><code class="java spaces">    </code><code class="java plain">}</code></div>
<div class="line number8 index7 alt1"> </div>
<div class="line number9 index8 alt2"><code class="java spaces">    </code><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">setStartDate(Date startDate) {</code></div>
<div class="line number10 index9 alt1"><code class="java spaces">        </code><code class="java keyword">this</code><code class="java plain">.startDate = startDate;</code></div>
<div class="line number11 index10 alt2"><code class="java spaces">    </code><code class="java plain">}</code></div>
<div class="line number12 index11 alt1"> </div>
<div class="line number13 index12 alt2"><code class="java spaces">    </code><code class="java keyword">public</code> <code class="java plain">Date getEndDate() {</code></div>
<div class="line number14 index13 alt1"><code class="java spaces">        </code><code class="java keyword">return</code> <code class="java plain">endDate;</code></div>
<div class="line number15 index14 alt2"><code class="java spaces">    </code><code class="java plain">}</code></div>
<div class="line number16 index15 alt1"> </div>
<div class="line number17 index16 alt2"><code class="java spaces">    </code><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">setEndDate(Date endDate) {</code></div>
<div class="line number18 index17 alt1"><code class="java spaces">        </code><code class="java keyword">this</code><code class="java plain">.endDate = endDate;</code></div>
<div class="line number19 index18 alt2"><code class="java spaces">    </code><code class="java plain">}</code></div>
<div class="line number20 index19 alt1"><code class="java plain">}</code></div>
<div class="line number21 index20 alt2"> </div>
<div class="line number22 index21 alt1"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">Project {</code></div>
<div class="line number23 index22 alt2"><code class="java spaces">    </code><code class="java plain">...</code></div>
<div class="line number24 index23 alt1"><code class="java spaces">    </code><code class="java keyword">private</code> <code class="java plain">Period period;</code></div>
<div class="line number25 index24 alt2"><code class="java spaces">    </code><code class="java plain">...</code></div>
<div class="line number26 index25 alt1"><code class="java spaces">    </code><code class="java keyword">public</code> <code class="java plain">Period getPeriod() {</code></div>
<div class="line number27 index26 alt2"><code class="java spaces">        </code><code class="java keyword">return</code> <code class="java plain">period;</code></div>
<div class="line number28 index27 alt1"><code class="java spaces">    </code><code class="java plain">}</code></div>
<div class="line number29 index28 alt2"> </div>
<div class="line number30 index29 alt1"><code class="java spaces">    </code><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">setPeriod(Period period) {</code></div>
<div class="line number31 index30 alt2"><code class="java spaces">        </code><code class="java keyword">this</code><code class="java plain">.period = period;</code></div>
<div class="line number32 index31 alt1"><code class="java spaces">    </code><code class="java plain">}</code></div>
<div class="line number33 index32 alt2"><code class="java plain">}</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p> <span> Но мы не хотим, чтобы Hibernate создавал отдельную таблицу для периода, поскольку каждый <code>Project</code> должен иметь только одну дату начала и окончания, и мы хотим обойти дополнительное объединение.</span> <span> В этом случае Hibernate может сопоставить два поля во встроенном классе <code>Period</code> с той же таблицей, что и класс <code>Project</code> :</span> </p>
<div>
<div class="syntaxhighlighter xml" id="highlighter_374717">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">01</div>
<div class="line number2 index1 alt1">02</div>
<div class="line number3 index2 alt2">03</div>
<div class="line number4 index3 alt1">04</div>
<div class="line number5 index4 alt2">05</div>
<div class="line number6 index5 alt1">06</div>
<div class="line number7 index6 alt2">07</div>
<div class="line number8 index7 alt1">08</div>
<div class="line number9 index8 alt2">09</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
<div class="line number12 index11 alt1">12</div>
<div class="line number13 index12 alt2">13</div>
<div class="line number14 index13 alt1">14</div>
<div class="line number15 index14 alt2">15</div>
<div class="line number16 index15 alt1">16</div>
<div class="line number17 index16 alt2">17</div>
<div class="line number18 index17 alt1">18</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="xml plain">&lt;</code><code class="xml keyword">hibernate-mapping</code> <code class="xml color1">package</code><code class="xml plain">=</code><code class="xml string">"hibernate.entity"</code><code class="xml plain">&gt;</code></div>
<div class="line number2 index1 alt1"><code class="xml spaces">      </code><code class="xml plain">...</code></div>
<div class="line number3 index2 alt2"><code class="xml spaces">      </code><code class="xml plain">&lt;</code><code class="xml keyword">class</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"Project"</code> <code class="xml color1">table</code><code class="xml plain">=</code><code class="xml string">"T_PROJECT"</code><code class="xml plain">&gt;</code></div>
<div class="line number4 index3 alt1"><code class="xml spaces">          </code><code class="xml plain">&lt;</code><code class="xml keyword">id</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"id"</code> <code class="xml color1">column</code><code class="xml plain">=</code><code class="xml string">"ID"</code><code class="xml plain">&gt;</code></div>
<div class="line number5 index4 alt2"><code class="xml spaces">                </code><code class="xml plain">&lt;</code><code class="xml keyword">generator</code> <code class="xml color1">class</code><code class="xml plain">=</code><code class="xml string">"sequence"</code><code class="xml plain">/&gt;</code></div>
<div class="line number6 index5 alt1"><code class="xml spaces">          </code><code class="xml plain">&lt;/</code><code class="xml keyword">id</code><code class="xml plain">&gt;</code></div>
<div class="line number7 index6 alt2"><code class="xml spaces">          </code><code class="xml plain">&lt;</code><code class="xml keyword">property</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"title"</code> <code class="xml color1">column</code><code class="xml plain">=</code><code class="xml string">"TITLE"</code><code class="xml plain">/&gt;</code></div>
<div class="line number8 index7 alt1"><code class="xml spaces">          </code><code class="xml plain">&lt;</code><code class="xml keyword">set</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"geeks"</code> <code class="xml color1">table</code><code class="xml plain">=</code><code class="xml string">"T_GEEKS_PROJECTS"</code><code class="xml plain">&gt;</code></div>
<div class="line number9 index8 alt2"><code class="xml spaces">                 </code><code class="xml plain">&lt;</code><code class="xml keyword">key</code> <code class="xml color1">column</code><code class="xml plain">=</code><code class="xml string">"ID_PROJECT"</code><code class="xml plain">/&gt;</code></div>
<div class="line number10 index9 alt1"><code class="xml spaces">                 </code><code class="xml plain">&lt;</code><code class="xml keyword">many-to-many</code> <code class="xml color1">column</code><code class="xml plain">=</code><code class="xml string">"ID_GEEK"</code> <code class="xml color1">class</code><code class="xml plain">=</code><code class="xml string">"Geek"</code><code class="xml plain">/&gt;</code></div>
<div class="line number11 index10 alt2"><code class="xml spaces">           </code><code class="xml plain">&lt;/</code><code class="xml keyword">set</code><code class="xml plain">&gt;</code></div>
<div class="line number12 index11 alt1"><code class="xml spaces">           </code><code class="xml plain">&lt;</code><code class="xml keyword">component</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"period"</code><code class="xml plain">&gt;</code></div>
<div class="line number13 index12 alt2"><code class="xml spaces">                  </code><code class="xml plain">&lt;</code><code class="xml keyword">property</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"startDate"</code> <code class="xml color1">column</code><code class="xml plain">=</code><code class="xml string">"START_DATE"</code><code class="xml plain">/&gt;</code></div>
<div class="line number14 index13 alt1"><code class="xml spaces">                  </code><code class="xml plain">&lt;</code><code class="xml keyword">property</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"endDate"</code> <code class="xml color1">column</code><code class="xml plain">=</code><code class="xml string">"END_DATE"</code><code class="xml plain">/&gt;</code></div>
<div class="line number15 index14 alt2"><code class="xml spaces">           </code><code class="xml plain">&lt;/</code><code class="xml keyword">component</code><code class="xml plain">&gt;</code></div>
<div class="line number16 index15 alt1"><code class="xml spaces">         </code><code class="xml plain">&lt;/</code><code class="xml keyword">class</code><code class="xml plain">&gt;</code></div>
<div class="line number17 index16 alt2"><code class="xml spaces">         </code><code class="xml plain">...</code></div>
<div class="line number18 index17 alt1"><code class="xml plain">&lt;/</code><code class="xml keyword">hibernate-mapping</code><code class="xml plain">&gt;</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p> <span> Способ сопоставления этого встроенного класса с полями таблицы <code>T_PROJECT</code> заключается в использовании элемента <code>component</code> и предоставлении имени поля в классе <code>Project</code> для атрибута <code>name</code> .</span> <span> Два поля класса <code>Period</code> затем просто объявляются как свойства <code>component</code> .</span> </p>
<p> <span> Это приводит к следующему утверждению DDL:</span> </p>
<div>
<div class="syntaxhighlighter sql" id="highlighter_219648">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">01</div>
<div class="line number2 index1 alt1">02</div>
<div class="line number3 index2 alt2">03</div>
<div class="line number4 index3 alt1">04</div>
<div class="line number5 index4 alt2">05</div>
<div class="line number6 index5 alt1">06</div>
<div class="line number7 index6 alt2">07</div>
<div class="line number8 index7 alt1">08</div>
<div class="line number9 index8 alt2">09</div>
<div class="line number10 index9 alt1">10</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="sql plain">...</code></div>
<div class="line number2 index1 alt1"><code class="sql plain">Hibernate: </code></div>
<div class="line number3 index2 alt2"><code class="sql spaces">    </code><code class="sql keyword">create</code> <code class="sql keyword">table</code> <code class="sql plain">T_PROJECT (</code></div>
<div class="line number4 index3 alt1"><code class="sql spaces">        </code><code class="sql plain">ID </code><code class="sql keyword">bigint</code> <code class="sql color1">not</code> <code class="sql color1">null</code><code class="sql plain">,</code></div>
<div class="line number5 index4 alt2"><code class="sql spaces">        </code><code class="sql plain">TITLE </code><code class="sql keyword">varchar</code><code class="sql plain">(255),</code></div>
<div class="line number6 index5 alt1"><code class="sql spaces">        </code><code class="sql plain">START_DATE </code><code class="sql keyword">timestamp</code><code class="sql plain">,</code></div>
<div class="line number7 index6 alt2"><code class="sql spaces">        </code><code class="sql plain">END_DATE </code><code class="sql keyword">timestamp</code><code class="sql plain">,</code></div>
<div class="line number8 index7 alt1"><code class="sql spaces">        </code><code class="sql keyword">primary</code> <code class="sql keyword">key</code> <code class="sql plain">(ID)</code></div>
<div class="line number9 index8 alt2"><code class="sql spaces">    </code><code class="sql plain">)</code></div>
<div class="line number10 index9 alt1"><code class="sql plain">...</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p> <span> Хотя поля для <code>START_DATE</code> и <code>END_DATE</code> находятся в отдельном классе, Hibernate добавляет их в таблицу <code>T_PROJECT</code> .</span> <span> Следующий код создает новый проект и добавляет к нему точку:</span> </p>
<div>
<div class="syntaxhighlighter java" id="highlighter_427011">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
<div class="line number5 index4 alt2">5</div>
<div class="line number6 index5 alt1">6</div>
<div class="line number7 index6 alt2">7</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="java plain">Project project = </code><code class="java keyword">new</code> <code class="java plain">Project();</code></div>
<div class="line number2 index1 alt1"><code class="java plain">project.setTitle(</code><code class="java string">"Java Project"</code><code class="java plain">);</code></div>
<div class="line number3 index2 alt2"><code class="java plain">Period period = </code><code class="java keyword">new</code> <code class="java plain">Period();</code></div>
<div class="line number4 index3 alt1"><code class="java plain">period.setStartDate(</code><code class="java keyword">new</code> <code class="java plain">Date());</code></div>
<div class="line number5 index4 alt2"><code class="java plain">project.setPeriod(period);</code></div>
<div class="line number6 index5 alt1"><code class="java plain">...</code></div>
<div class="line number7 index6 alt2"><code class="java plain">session.save(project);</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p> <span> Это приводит к следующей ситуации с данными:</span> </p>
<div>
<div class="syntaxhighlighter sql" id="highlighter_637997">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="sql plain">sql&gt; </code><code class="sql keyword">select</code> <code class="sql plain">* </code><code class="sql keyword">from</code> <code class="sql plain">t_project;</code></div>
<div class="line number2 index1 alt1"><code class="sql plain">ID | TITLE        | START_DATE              | END_DATE</code></div>
<div class="line number3 index2 alt2"><code class="sql plain">7  | Java Project | 2015-01-01 19:45:12.274 | </code><code class="sql color1">null</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p> <span> Для загрузки периода вместе с проектом не нужно писать никакого дополнительного кода, период автоматически загружается и инициализируется:</span> </p>
<div>
<div class="syntaxhighlighter java" id="highlighter_556939">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
<div class="line number5 index4 alt2">5</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="java plain">List projects = session.createQuery(</code><code class="java string">"from Project as p where p.title = ?"</code><code class="java plain">)</code></div>
<div class="line number2 index1 alt1"><code class="java spaces">    </code><code class="java plain">.setString(</code><code class="java value">0</code><code class="java plain">, </code><code class="java string">"Java Project"</code><code class="java plain">).list();</code></div>
<div class="line number3 index2 alt2"><code class="java keyword">for</code> <code class="java plain">(Project project : projects) {</code></div>
<div class="line number4 index3 alt1"><code class="java spaces">    </code><code class="java plain">System.out.println(</code><code class="java string">"Project: "</code> <code class="java plain">+ project.getTitle() + </code><code class="java string">" starts at "</code> <code class="java plain">+ project.getPeriod().getStartDate());</code></div>
<div class="line number5 index4 alt2"><code class="java plain">}</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p> <span> На случай, если в базе данных для всех полей периода установлено <code>NULL</code> , Hibernate также устанавливает <code>null</code> ссылку на <code>Period</code> .</span> </p>
<h1><a name="dataTypes"/> <span> 6. Пользовательские типы данных</span> </h1>
<p> <span> Например, при работе с устаревшей базой данных некоторые столбцы могут быть смоделированы не так, как в Hibernate.</span> <span> Например, тип данных <code>Boolean</code> отображается в базе данных H2 на тип <code>boolean</code> .</span> <span> Если исходная группа разработчиков решила отобразить логические значения, используя строку со значениями «0» и «1», Hibernate позволяет реализовать определяемые пользователем типы, которые используются для отображения.</span> </p>
<p> <span> Hibernate определяет интерфейс <code>org.hibernate.usertype.UserType</code> который должен быть реализован:</span> </p>
<div>
<div class="syntaxhighlighter java" id="highlighter_549109">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">01</div>
<div class="line number2 index1 alt1">02</div>
<div class="line number3 index2 alt2">03</div>
<div class="line number4 index3 alt1">04</div>
<div class="line number5 index4 alt2">05</div>
<div class="line number6 index5 alt1">06</div>
<div class="line number7 index6 alt2">07</div>
<div class="line number8 index7 alt1">08</div>
<div class="line number9 index8 alt2">09</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
<div class="line number12 index11 alt1">12</div>
<div class="line number13 index12 alt2">13</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="java keyword">public</code> <code class="java keyword">interface</code> <code class="java plain">UserType {</code></div>
<div class="line number2 index1 alt1"><code class="java spaces">    </code><code class="java keyword">int</code><code class="java plain">[] sqlTypes();</code></div>
<div class="line number3 index2 alt2"><code class="java spaces">    </code><code class="java plain">Class returnedClass();</code></div>
<div class="line number4 index3 alt1"><code class="java spaces">    </code><code class="java keyword">boolean</code> <code class="java plain">equals(Object var1, Object var2) </code><code class="java keyword">throws</code> <code class="java plain">HibernateException;</code></div>
<div class="line number5 index4 alt2"><code class="java spaces">    </code><code class="java keyword">int</code> <code class="java plain">hashCode(Object var1) </code><code class="java keyword">throws</code> <code class="java plain">HibernateException;</code></div>
<div class="line number6 index5 alt1"><code class="java spaces">    </code><code class="java plain">Object nullSafeGet(ResultSet var1, String[] var2, SessionImplementor var3, Object var4) </code><code class="java keyword">throws</code> <code class="java plain">HibernateException, SQLException;</code></div>
<div class="line number7 index6 alt2"><code class="java spaces">    </code><code class="java keyword">void</code> <code class="java plain">nullSafeSet(PreparedStatement var1, Object var2, </code><code class="java keyword">int</code> <code class="java plain">var3, SessionImplementor var4) </code><code class="java keyword">throws</code> <code class="java plain">HibernateException, SQLException;</code></div>
<div class="line number8 index7 alt1"><code class="java spaces">    </code><code class="java plain">Object deepCopy(Object var1) </code><code class="java keyword">throws</code> <code class="java plain">HibernateException;</code></div>
<div class="line number9 index8 alt2"><code class="java spaces">    </code><code class="java keyword">boolean</code> <code class="java plain">isMutable();</code></div>
<div class="line number10 index9 alt1"><code class="java spaces">    </code><code class="java plain">Serializable disassemble(Object var1) </code><code class="java keyword">throws</code> <code class="java plain">HibernateException;</code></div>
<div class="line number11 index10 alt2"><code class="java spaces">    </code><code class="java plain">Object assemble(Serializable var1, Object var2) </code><code class="java keyword">throws</code> <code class="java plain">HibernateException;</code></div>
<div class="line number12 index11 alt1"><code class="java spaces">    </code><code class="java plain">Object replace(Object var1, Object var2, Object var3) </code><code class="java keyword">throws</code> <code class="java plain">HibernateException;</code></div>
<div class="line number13 index12 alt2"><code class="java plain">}</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p> <span> Простые реализации тех методов, которые не являются специфичными для нашей проблемы, показаны ниже:</span> </p>
<div>
<div class="syntaxhighlighter java" id="highlighter_697439">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">01</div>
<div class="line number2 index1 alt1">02</div>
<div class="line number3 index2 alt2">03</div>
<div class="line number4 index3 alt1">04</div>
<div class="line number5 index4 alt2">05</div>
<div class="line number6 index5 alt1">06</div>
<div class="line number7 index6 alt2">07</div>
<div class="line number8 index7 alt1">08</div>
<div class="line number9 index8 alt2">09</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
<div class="line number12 index11 alt1">12</div>
<div class="line number13 index12 alt2">13</div>
<div class="line number14 index13 alt1">14</div>
<div class="line number15 index14 alt2">15</div>
<div class="line number16 index15 alt1">16</div>
<div class="line number17 index16 alt2">17</div>
<div class="line number18 index17 alt1">18</div>
<div class="line number19 index18 alt2">19</div>
<div class="line number20 index19 alt1">20</div>
<div class="line number21 index20 alt2">21</div>
<div class="line number22 index21 alt1">22</div>
<div class="line number23 index22 alt2">23</div>
<div class="line number24 index23 alt1">24</div>
<div class="line number25 index24 alt2">25</div>
<div class="line number26 index25 alt1">26</div>
<div class="line number27 index26 alt2">27</div>
<div class="line number28 index27 alt1">28</div>
<div class="line number29 index28 alt2">29</div>
<div class="line number30 index29 alt1">30</div>
<div class="line number31 index30 alt2">31</div>
<div class="line number32 index31 alt1">32</div>
<div class="line number33 index32 alt2">33</div>
<div class="line number34 index33 alt1">34</div>
<div class="line number35 index34 alt2">35</div>
<div class="line number36 index35 alt1">36</div>
<div class="line number37 index36 alt2">37</div>
<div class="line number38 index37 alt1">38</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="java color1">@Override</code></div>
<div class="line number2 index1 alt1"><code class="java keyword">public</code> <code class="java keyword">boolean</code> <code class="java plain">equals(Object x, Object y) </code><code class="java keyword">throws</code> <code class="java plain">HibernateException {</code></div>
<div class="line number3 index2 alt2"><code class="java spaces">    </code><code class="java keyword">if</code> <code class="java plain">(x == </code><code class="java keyword">null</code><code class="java plain">) {</code></div>
<div class="line number4 index3 alt1"><code class="java spaces">        </code><code class="java keyword">return</code> <code class="java plain">y == </code><code class="java keyword">null</code><code class="java plain">;</code></div>
<div class="line number5 index4 alt2"><code class="java spaces">    </code><code class="java plain">} </code><code class="java keyword">else</code> <code class="java plain">{</code></div>
<div class="line number6 index5 alt1"><code class="java spaces">        </code><code class="java keyword">return</code> <code class="java plain">y != </code><code class="java keyword">null</code> <code class="java plain">&amp;&amp; x.equals(y);</code></div>
<div class="line number7 index6 alt2"><code class="java spaces">    </code><code class="java plain">}</code></div>
<div class="line number8 index7 alt1"><code class="java plain">}</code></div>
<div class="line number9 index8 alt2"> </div>
<div class="line number10 index9 alt1"><code class="java color1">@Override</code></div>
<div class="line number11 index10 alt2"><code class="java keyword">public</code> <code class="java keyword">int</code> <code class="java plain">hashCode(Object o) </code><code class="java keyword">throws</code> <code class="java plain">HibernateException {</code></div>
<div class="line number12 index11 alt1"><code class="java spaces">    </code><code class="java keyword">return</code> <code class="java plain">o.hashCode();</code></div>
<div class="line number13 index12 alt2"><code class="java plain">}</code></div>
<div class="line number14 index13 alt1"> </div>
<div class="line number15 index14 alt2"><code class="java color1">@Override</code></div>
<div class="line number16 index15 alt1"><code class="java keyword">public</code> <code class="java plain">Object deepCopy(Object o) </code><code class="java keyword">throws</code> <code class="java plain">HibernateException {</code></div>
<div class="line number17 index16 alt2"><code class="java spaces">    </code><code class="java keyword">return</code> <code class="java plain">o;</code></div>
<div class="line number18 index17 alt1"><code class="java plain">}</code></div>
<div class="line number19 index18 alt2"> </div>
<div class="line number20 index19 alt1"><code class="java color1">@Override</code></div>
<div class="line number21 index20 alt2"><code class="java keyword">public</code> <code class="java keyword">boolean</code> <code class="java plain">isMutable() {</code></div>
<div class="line number22 index21 alt1"><code class="java spaces">    </code><code class="java keyword">return</code> <code class="java keyword">false</code><code class="java plain">;</code></div>
<div class="line number23 index22 alt2"><code class="java plain">}</code></div>
<div class="line number24 index23 alt1"> </div>
<div class="line number25 index24 alt2"><code class="java color1">@Override</code></div>
<div class="line number26 index25 alt1"><code class="java keyword">public</code> <code class="java plain">Serializable disassemble(Object o) </code><code class="java keyword">throws</code> <code class="java plain">HibernateException {</code></div>
<div class="line number27 index26 alt2"><code class="java spaces">    </code><code class="java keyword">return</code> <code class="java plain">(Serializable) o;</code></div>
<div class="line number28 index27 alt1"><code class="java plain">}</code></div>
<div class="line number29 index28 alt2"> </div>
<div class="line number30 index29 alt1"><code class="java color1">@Override</code></div>
<div class="line number31 index30 alt2"><code class="java keyword">public</code> <code class="java plain">Object assemble(Serializable cached, Object owner) </code><code class="java keyword">throws</code> <code class="java plain">HibernateException {</code></div>
<div class="line number32 index31 alt1"><code class="java spaces">    </code><code class="java keyword">return</code> <code class="java plain">cached;</code></div>
<div class="line number33 index32 alt2"><code class="java plain">}</code></div>
<div class="line number34 index33 alt1"> </div>
<div class="line number35 index34 alt2"><code class="java color1">@Override</code></div>
<div class="line number36 index35 alt1"><code class="java keyword">public</code> <code class="java plain">Object replace(Object original, Object target, Object owner) </code><code class="java keyword">throws</code> <code class="java plain">HibernateException {</code></div>
<div class="line number37 index36 alt2"><code class="java spaces">    </code><code class="java keyword">return</code> <code class="java plain">original;</code></div>
<div class="line number38 index37 alt1"><code class="java plain">}</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p> <span> Интересной частью <code>UserType</code> являются методы <code>nullSafeGet()</code> и <code>nullSafeSet()</code> :</span> </p>
<div>
<div class="syntaxhighlighter java" id="highlighter_686028">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">01</div>
<div class="line number2 index1 alt1">02</div>
<div class="line number3 index2 alt2">03</div>
<div class="line number4 index3 alt1">04</div>
<div class="line number5 index4 alt2">05</div>
<div class="line number6 index5 alt1">06</div>
<div class="line number7 index6 alt2">07</div>
<div class="line number8 index7 alt1">08</div>
<div class="line number9 index8 alt2">09</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
<div class="line number12 index11 alt1">12</div>
<div class="line number13 index12 alt2">13</div>
<div class="line number14 index13 alt1">14</div>
<div class="line number15 index14 alt2">15</div>
<div class="line number16 index15 alt1">16</div>
<div class="line number17 index16 alt2">17</div>
<div class="line number18 index17 alt1">18</div>
<div class="line number19 index18 alt2">19</div>
<div class="line number20 index19 alt1">20</div>
<div class="line number21 index20 alt2">21</div>
<div class="line number22 index21 alt1">22</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="java color1">@Override</code></div>
<div class="line number2 index1 alt1"><code class="java keyword">public</code> <code class="java plain">Object nullSafeGet(ResultSet resultSet, String[] strings, </code></div>
<div class="line number3 index2 alt2"><code class="java spaces">    </code><code class="java plain">SessionImplementor sessionImplementor, Object o) </code><code class="java keyword">throws</code> <code class="java plain">HibernateException, SQLException {</code></div>
<div class="line number4 index3 alt1"><code class="java spaces">    </code><code class="java plain">String str = (String) StringType.INSTANCE.nullSafeGet(resultSet, strings[</code><code class="java value">0</code><code class="java plain">], sessionImplementor, o);</code></div>
<div class="line number5 index4 alt2"><code class="java spaces">    </code><code class="java keyword">if</code> <code class="java plain">(</code><code class="java string">"1"</code><code class="java plain">.equals(str)) {</code></div>
<div class="line number6 index5 alt1"><code class="java spaces">        </code><code class="java keyword">return</code> <code class="java plain">Boolean.TRUE;</code></div>
<div class="line number7 index6 alt2"><code class="java spaces">    </code><code class="java plain">}</code></div>
<div class="line number8 index7 alt1"><code class="java spaces">    </code><code class="java keyword">return</code> <code class="java plain">Boolean.FALSE;</code></div>
<div class="line number9 index8 alt2"><code class="java plain">}</code></div>
<div class="line number10 index9 alt1"> </div>
<div class="line number11 index10 alt2"><code class="java color1">@Override</code></div>
<div class="line number12 index11 alt1"><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">nullSafeSet(PreparedStatement preparedStatement, Object value, </code></div>
<div class="line number13 index12 alt2"><code class="java spaces">    </code><code class="java keyword">int</code> <code class="java plain">i, SessionImplementor sessionImplementor) </code><code class="java keyword">throws</code> <code class="java plain">HibernateException, SQLException {</code></div>
<div class="line number14 index13 alt1"><code class="java spaces">    </code><code class="java plain">String valueToStore = </code><code class="java string">"0"</code><code class="java plain">;</code></div>
<div class="line number15 index14 alt2"><code class="java spaces">    </code><code class="java keyword">if</code> <code class="java plain">(value != </code><code class="java keyword">null</code><code class="java plain">) {</code></div>
<div class="line number16 index15 alt1"><code class="java spaces">        </code><code class="java plain">Boolean booleanValue = (Boolean) value;</code></div>
<div class="line number17 index16 alt2"><code class="java spaces">        </code><code class="java keyword">if</code> <code class="java plain">(booleanValue.equals(Boolean.TRUE)) {</code></div>
<div class="line number18 index17 alt1"><code class="java spaces">            </code><code class="java plain">valueToStore = </code><code class="java string">"1"</code><code class="java plain">;</code></div>
<div class="line number19 index18 alt2"><code class="java spaces">        </code><code class="java plain">}</code></div>
<div class="line number20 index19 alt1"><code class="java spaces">    </code><code class="java plain">}</code></div>
<div class="line number21 index20 alt2"><code class="java spaces">    </code><code class="java plain">StringType.INSTANCE.nullSafeSet(preparedStatement,valueToStore, i, sessionImplementor);</code></div>
<div class="line number22 index21 alt1"><code class="java plain">}</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p> <span> Метод <code>nullSafeGet()</code> использует реализацию <code>StringType</code> Hibernate для извлечения строкового представления логического значения из <code>ResultSet</code> базового запроса.</span> <span> Если возвращаемая строка равна «1», метод возвращает «true», в противном случае он возвращает «false».</span> </p>
<p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Прежде чем </font></font><code>insert</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">оператор может быть выполнен, логическое значение, переданное как параметр </font></font><code>value</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">, должно быть «декодировано» либо в строку «1», либо в строку «0». </font><font style="vertical-align: inherit;">Затем метод </font></font><code>nullSafeSet()</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">использует </font></font><code>StringType</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">реализацию </font><font style="vertical-align: inherit;">Hibernate </font><font style="vertical-align: inherit;">для установки этого строкового значения в </font></font><code>PreparedStatement</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">.</font></font></p>
<p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Наконец, мы должны сказать Hibernate, из какого типа объекта возвращается </font></font><code>nullSafeGet()</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">и какой тип столбца следует использовать для этого типа:</font></font></p>
<div>
<div class="syntaxhighlighter java" id="highlighter_988271">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
<div class="line number5 index4 alt2">5</div>
<div class="line number6 index5 alt1">6</div>
<div class="line number7 index6 alt2">7</div>
<div class="line number8 index7 alt1">8</div>
<div class="line number9 index8 alt2">9</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="java color1">@Override</code></div>
<div class="line number2 index1 alt1"><code class="java keyword">public</code> <code class="java keyword">int</code><code class="java plain">[] sqlTypes() {</code></div>
<div class="line number3 index2 alt2"><code class="java spaces">    </code><code class="java keyword">return</code> <code class="java keyword">new</code> <code class="java keyword">int</code><code class="java plain">[]{ Types.VARCHAR };</code></div>
<div class="line number4 index3 alt1"><code class="java plain">}</code></div>
<div class="line number5 index4 alt2"> </div>
<div class="line number6 index5 alt1"><code class="java color1">@Override</code></div>
<div class="line number7 index6 alt2"><code class="java keyword">public</code> <code class="java plain">Class returnedClass() {</code></div>
<div class="line number8 index7 alt1"><code class="java spaces">    </code><code class="java keyword">return</code> <code class="java plain">Boolean.</code><code class="java keyword">class</code><code class="java plain">;</code></div>
<div class="line number9 index8 alt2"><code class="java plain">}</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">После реализации </font></font><code>UserType</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">интерфейса экземпляр этого класса теперь может быть передан </font></font><code>Configuration</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">:</font></font></p>
<div>
<div class="syntaxhighlighter java" id="highlighter_289835">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="java plain">Configuration configuration = </code><code class="java keyword">new</code> <code class="java plain">Configuration();</code></div>
<div class="line number2 index1 alt1"><code class="java plain">configuration.configure(</code><code class="java string">"hibernate.cfg.xml"</code><code class="java plain">);</code></div>
<div class="line number3 index2 alt2"><code class="java plain">configuration.registerTypeOverride(</code><code class="java keyword">new</code> <code class="java plain">MyBooleanType(), </code><code class="java keyword">new</code> <code class="java plain">String[]{</code><code class="java string">"MyBooleanType"</code><code class="java plain">});</code></div>
<div class="line number4 index3 alt1"><code class="java plain">...</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p> <code>MyBooleanType</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Здесь наша реализация </font></font><code>UserType</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">интерфейса, тогда как </font></font><code>String</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">массив определяет, как ссылаться на этот тип в файле отображения:</font></font></p>
<div>
<div class="syntaxhighlighter xml" id="highlighter_426866">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">01</div>
<div class="line number2 index1 alt1">02</div>
<div class="line number3 index2 alt2">03</div>
<div class="line number4 index3 alt1">04</div>
<div class="line number5 index4 alt2">05</div>
<div class="line number6 index5 alt1">06</div>
<div class="line number7 index6 alt2">07</div>
<div class="line number8 index7 alt1">08</div>
<div class="line number9 index8 alt2">09</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="xml plain">&lt;</code><code class="xml keyword">hibernate-mapping</code> <code class="xml color1">package</code><code class="xml plain">=</code><code class="xml string">"hibernate.entity"</code><code class="xml plain">&gt;</code></div>
<div class="line number2 index1 alt1"><code class="xml spaces">      </code><code class="xml plain">&lt;</code><code class="xml keyword">class</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"IdCard"</code> <code class="xml color1">table</code><code class="xml plain">=</code><code class="xml string">"T_ID_CARD"</code><code class="xml plain">&gt;</code></div>
<div class="line number3 index2 alt2"><code class="xml spaces">           </code><code class="xml plain">&lt;</code><code class="xml keyword">id</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"id"</code> <code class="xml color1">column</code><code class="xml plain">=</code><code class="xml string">"ID"</code><code class="xml plain">&gt;</code></div>
<div class="line number4 index3 alt1"><code class="xml spaces">               </code><code class="xml plain">&lt;</code><code class="xml keyword">generator</code> <code class="xml color1">class</code><code class="xml plain">=</code><code class="xml string">"sequence"</code><code class="xml plain">/&gt;</code></div>
<div class="line number5 index4 alt2"><code class="xml spaces">           </code><code class="xml plain">&lt;/</code><code class="xml keyword">id</code><code class="xml plain">&gt;</code></div>
<div class="line number6 index5 alt1"><code class="xml spaces">           </code><code class="xml plain">&lt;</code><code class="xml keyword">property</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"idNumber"</code> <code class="xml color1">column</code><code class="xml plain">=</code><code class="xml string">"ID_NUMBER"</code><code class="xml plain">/&gt;</code></div>
<div class="line number7 index6 alt2"><code class="xml spaces">           </code><code class="xml plain">&lt;</code><code class="xml keyword">property</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"issueDate"</code> <code class="xml color1">column</code><code class="xml plain">=</code><code class="xml string">"ISSUE_DATE"</code><code class="xml plain">/&gt;</code></div>
<div class="line number8 index7 alt1"><code class="xml spaces">           </code><code class="xml plain">&lt;</code><code class="xml keyword">property</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"valid"</code> <code class="xml color1">column</code><code class="xml plain">=</code><code class="xml string">"VALID"</code> <code class="xml color1">type</code><code class="xml plain">=</code><code class="xml string">"MyBooleanType"</code><code class="xml plain">/&gt;</code></div>
<div class="line number9 index8 alt2"><code class="xml spaces">        </code><code class="xml plain">&lt;/</code><code class="xml keyword">class</code><code class="xml plain">&gt;</code></div>
<div class="line number10 index9 alt1"><code class="xml spaces">        </code><code class="xml plain">...</code></div>
<div class="line number11 index10 alt2"><code class="xml plain">&lt;/</code><code class="xml keyword">hibernate-mapping</code><code class="xml plain">&gt;</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Как видно из приведенного выше фрагмента, новый тип «MyBooleanType» используется для логического свойства таблицы </font></font><code>T_ID_CARD</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">:</font></font></p>
<div>
<div class="syntaxhighlighter bash" id="highlighter_122057">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="bash plain">sql&gt; </code><code class="bash functions">select</code> <code class="bash plain">* from t_id_card;</code></div>
<div class="line number2 index1 alt1"><code class="bash plain">ID | ID_NUMBER | ISSUE_DATE              | VALID</code></div>
<div class="line number3 index2 alt2"><code class="bash plain">2  | 4711      | 2015-03-27 11:49:57.533 | 1</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<h1><a name="interceptors"/><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> 7. Перехватчики </font></font></h1>
<p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Проект может прийти с требованием, чтобы для каждой сущности / таблицы отслеживалась временная метка его создания и его последнее обновление. </font><font style="vertical-align: inherit;">Установка этих двух значений для каждого объекта во всех операциях вставки и обновления является довольно утомительной задачей. </font><font style="vertical-align: inherit;">Поэтому Hibernate предлагает возможность реализации перехватчиков, которые вызываются до выполнения операции вставки или обновления. </font><font style="vertical-align: inherit;">Таким образом, код для установки метки времени создания и обновления может быть извлечен в одно место в базе кода, и его не нужно копировать во все места, где это будет необходимо.</font></font></p>
<p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">В качестве примера мы собираемся реализовать контрольный журнал, который отслеживает создание и обновление </font></font><code>Project</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">сущности. </font><font style="vertical-align: inherit;">Это можно сделать, расширив класс </font></font><code>EmptyInterceptor</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">:</font></font></p>
<div>
<div class="syntaxhighlighter java" id="highlighter_692902">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">01</div>
<div class="line number2 index1 alt1">02</div>
<div class="line number3 index2 alt2">03</div>
<div class="line number4 index3 alt1">04</div>
<div class="line number5 index4 alt2">05</div>
<div class="line number6 index5 alt1">06</div>
<div class="line number7 index6 alt2">07</div>
<div class="line number8 index7 alt1">08</div>
<div class="line number9 index8 alt2">09</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
<div class="line number12 index11 alt1">12</div>
<div class="line number13 index12 alt2">13</div>
<div class="line number14 index13 alt1">14</div>
<div class="line number15 index14 alt2">15</div>
<div class="line number16 index15 alt1">16</div>
<div class="line number17 index16 alt2">17</div>
<div class="line number18 index17 alt1">18</div>
<div class="line number19 index18 alt2">19</div>
<div class="line number20 index19 alt1">20</div>
<div class="line number21 index20 alt2">21</div>
<div class="line number22 index21 alt1">22</div>
<div class="line number23 index22 alt2">23</div>
<div class="line number24 index23 alt1">24</div>
<div class="line number25 index24 alt2">25</div>
<div class="line number26 index25 alt1">26</div>
<div class="line number27 index26 alt2">27</div>
<div class="line number28 index27 alt1">28</div>
<div class="line number29 index28 alt2">29</div>
<div class="line number30 index29 alt1">30</div>
<div class="line number31 index30 alt2">31</div>
<div class="line number32 index31 alt1">32</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">AuditInterceptor </code><code class="java keyword">extends</code> <code class="java plain">EmptyInterceptor {</code></div>
<div class="line number2 index1 alt1"> </div>
<div class="line number3 index2 alt2"><code class="java spaces">    </code><code class="java color1">@Override</code></div>
<div class="line number4 index3 alt1"><code class="java spaces">    </code><code class="java keyword">public</code> <code class="java keyword">boolean</code> <code class="java plain">onSave(Object entity, Serializable id, Object[] state, </code></div>
<div class="line number5 index4 alt2"><code class="java spaces">        </code><code class="java plain">String[] propertyNames, Type[] types) {</code></div>
<div class="line number6 index5 alt1"><code class="java spaces">        </code><code class="java keyword">if</code> <code class="java plain">(entity </code><code class="java keyword">instanceof</code> <code class="java plain">Auditable) {</code></div>
<div class="line number7 index6 alt2"><code class="java spaces">            </code><code class="java keyword">for</code> <code class="java plain">( </code><code class="java keyword">int</code> <code class="java plain">i=</code><code class="java value">0</code><code class="java plain">; i &lt; propertyNames.length; i++ ) {</code></div>
<div class="line number8 index7 alt1"><code class="java spaces">                </code><code class="java keyword">if</code> <code class="java plain">( </code><code class="java string">"created"</code><code class="java plain">.equals( propertyNames[i] ) ) {</code></div>
<div class="line number9 index8 alt2"><code class="java spaces">                    </code><code class="java plain">state[i] = </code><code class="java keyword">new</code> <code class="java plain">Date();</code></div>
<div class="line number10 index9 alt1"><code class="java spaces">                    </code><code class="java keyword">return</code> <code class="java keyword">true</code><code class="java plain">;</code></div>
<div class="line number11 index10 alt2"><code class="java spaces">                </code><code class="java plain">}</code></div>
<div class="line number12 index11 alt1"><code class="java spaces">            </code><code class="java plain">}</code></div>
<div class="line number13 index12 alt2"><code class="java spaces">            </code><code class="java keyword">return</code> <code class="java keyword">true</code><code class="java plain">;</code></div>
<div class="line number14 index13 alt1"><code class="java spaces">        </code><code class="java plain">}</code></div>
<div class="line number15 index14 alt2"><code class="java spaces">        </code><code class="java keyword">return</code> <code class="java keyword">false</code><code class="java plain">;</code></div>
<div class="line number16 index15 alt1"><code class="java spaces">    </code><code class="java plain">}</code></div>
<div class="line number17 index16 alt2"> </div>
<div class="line number18 index17 alt1"><code class="java spaces">    </code><code class="java color1">@Override</code></div>
<div class="line number19 index18 alt2"><code class="java spaces">    </code><code class="java keyword">public</code> <code class="java keyword">boolean</code> <code class="java plain">onFlushDirty(Object entity, Serializable id, Object[] currentState, </code></div>
<div class="line number20 index19 alt1"><code class="java spaces">        </code><code class="java plain">Object[] previousState, String[] propertyNames, Type[] types) {</code></div>
<div class="line number21 index20 alt2"><code class="java spaces">        </code><code class="java keyword">if</code> <code class="java plain">(entity </code><code class="java keyword">instanceof</code> <code class="java plain">Auditable) {</code></div>
<div class="line number22 index21 alt1"><code class="java spaces">            </code><code class="java keyword">for</code> <code class="java plain">( </code><code class="java keyword">int</code> <code class="java plain">i=</code><code class="java value">0</code><code class="java plain">; i &lt; propertyNames.length; i++ ) {</code></div>
<div class="line number23 index22 alt2"><code class="java spaces">                </code><code class="java keyword">if</code> <code class="java plain">( </code><code class="java string">"lastUpdate"</code><code class="java plain">.equals( propertyNames[i] ) ) {</code></div>
<div class="line number24 index23 alt1"><code class="java spaces">                    </code><code class="java plain">currentState[i] = </code><code class="java keyword">new</code> <code class="java plain">Date();</code></div>
<div class="line number25 index24 alt2"><code class="java spaces">                    </code><code class="java keyword">return</code> <code class="java keyword">true</code><code class="java plain">;</code></div>
<div class="line number26 index25 alt1"><code class="java spaces">                </code><code class="java plain">}</code></div>
<div class="line number27 index26 alt2"><code class="java spaces">            </code><code class="java plain">}</code></div>
<div class="line number28 index27 alt1"><code class="java spaces">            </code><code class="java keyword">return</code> <code class="java keyword">true</code><code class="java plain">;</code></div>
<div class="line number29 index28 alt2"><code class="java spaces">        </code><code class="java plain">}</code></div>
<div class="line number30 index29 alt1"><code class="java spaces">        </code><code class="java keyword">return</code> <code class="java keyword">false</code><code class="java plain">;</code></div>
<div class="line number31 index30 alt2"><code class="java spaces">    </code><code class="java plain">}</code></div>
<div class="line number32 index31 alt1"><code class="java plain">}</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Поскольку класс </font></font><code>EmptyInterceptor</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">уже реализует все методы, определенные в интерфейсе </font></font><code>Interceptor</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">, нам нужно только переопределить методы </font></font><code>onSave()</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">и </font></font><code>onFlushDirty()</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">. </font><font style="vertical-align: inherit;">Для того , </font><font style="vertical-align: inherit;">чтобы легко найти все объекты , </font><font style="vertical-align: inherit;">которые имеют поле </font></font><code>created</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">и </font></font><code>lastUpdate</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">выделим методы получения и установки для этих объектов в отдельный интерфейс под названием </font></font><code>Auditable</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">:</font></font></p>
<div>
<div class="syntaxhighlighter java" id="highlighter_48145">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
<div class="line number5 index4 alt2">5</div>
<div class="line number6 index5 alt1">6</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="java keyword">public</code> <code class="java keyword">interface</code> <code class="java plain">Auditable {</code></div>
<div class="line number2 index1 alt1"><code class="java spaces">    </code><code class="java plain">Date getCreated();</code></div>
<div class="line number3 index2 alt2"><code class="java spaces">    </code><code class="java keyword">void</code> <code class="java plain">setCreated(Date created);</code></div>
<div class="line number4 index3 alt1"><code class="java spaces">    </code><code class="java plain">Date getLastUpdate();</code></div>
<div class="line number5 index4 alt2"><code class="java spaces">    </code><code class="java keyword">void</code> <code class="java plain">setLastUpdate(Date lastUpdate);</code></div>
<div class="line number6 index5 alt1"><code class="java plain">}</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">С этим интерфейсом легко проверить, имеет ли тип, переданный в перехватчик, тип </font></font><code>Auditable</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">. </font><font style="vertical-align: inherit;">К сожалению, мы не можем изменить сущность напрямую через методы getter и setter, но мы должны использовать два массива </font></font><code>propertyNames</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">и </font></font><code>state</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">. </font><font style="vertical-align: inherit;">В массиве </font></font><code>propertyNames</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">мы должны найти свойство </font></font><code>created</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">( </font></font><code>lastUpdate</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">) и использовать его индекс для установки соответствующего элемента в массиве </font></font><code>state</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">( </font></font><code>currentState</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">).</font></font></p>
<p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Без соответствующих определений свойств в файле сопоставления Hibernate не будет создавать столбцы в таблицах. </font><font style="vertical-align: inherit;">Следовательно, файл отображения должен быть обновлен:</font></font></p>
<div>
<div class="syntaxhighlighter xml" id="highlighter_555823">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">01</div>
<div class="line number2 index1 alt1">02</div>
<div class="line number3 index2 alt2">03</div>
<div class="line number4 index3 alt1">04</div>
<div class="line number5 index4 alt2">05</div>
<div class="line number6 index5 alt1">06</div>
<div class="line number7 index6 alt2">07</div>
<div class="line number8 index7 alt1">08</div>
<div class="line number9 index8 alt2">09</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
<div class="line number12 index11 alt1">12</div>
<div class="line number13 index12 alt2">13</div>
<div class="line number14 index13 alt1">14</div>
<div class="line number15 index14 alt2">15</div>
<div class="line number16 index15 alt1">16</div>
<div class="line number17 index16 alt2">17</div>
<div class="line number18 index17 alt1">18</div>
<div class="line number19 index18 alt2">19</div>
<div class="line number20 index19 alt1">20</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="xml plain">&lt;</code><code class="xml keyword">hibernate-mapping</code><code class="xml plain">&gt;</code></div>
<div class="line number2 index1 alt1"><code class="xml spaces">        </code><code class="xml plain">...</code></div>
<div class="line number3 index2 alt2"><code class="xml spaces">    </code><code class="xml plain">&lt;</code><code class="xml keyword">class</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"Project"</code> <code class="xml color1">table</code><code class="xml plain">=</code><code class="xml string">"T_PROJECT"</code><code class="xml plain">&gt;</code></div>
<div class="line number4 index3 alt1"><code class="xml spaces">        </code><code class="xml plain">&lt;</code><code class="xml keyword">id</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"id"</code> <code class="xml color1">column</code><code class="xml plain">=</code><code class="xml string">"ID"</code><code class="xml plain">&gt;</code></div>
<div class="line number5 index4 alt2"><code class="xml spaces">            </code><code class="xml plain">&lt;</code><code class="xml keyword">generator</code> <code class="xml color1">class</code><code class="xml plain">=</code><code class="xml string">"sequence"</code><code class="xml plain">/&gt;</code></div>
<div class="line number6 index5 alt1"><code class="xml spaces">        </code><code class="xml plain">&lt;/</code><code class="xml keyword">id</code><code class="xml plain">&gt;</code></div>
<div class="line number7 index6 alt2"><code class="xml spaces">        </code><code class="xml plain">&lt;</code><code class="xml keyword">property</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"title"</code> <code class="xml color1">column</code><code class="xml plain">=</code><code class="xml string">"TITLE"</code><code class="xml plain">/&gt;</code></div>
<div class="line number8 index7 alt1"><code class="xml spaces">        </code><code class="xml plain">&lt;</code><code class="xml keyword">set</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"geeks"</code> <code class="xml color1">table</code><code class="xml plain">=</code><code class="xml string">"T_GEEKS_PROJECTS"</code><code class="xml plain">&gt;</code></div>
<div class="line number9 index8 alt2"><code class="xml spaces">             </code><code class="xml plain">&lt;</code><code class="xml keyword">key</code> <code class="xml color1">column</code><code class="xml plain">=</code><code class="xml string">"ID_PROJECT"</code><code class="xml plain">/&gt;</code></div>
<div class="line number10 index9 alt1"><code class="xml spaces">             </code><code class="xml plain">&lt;</code><code class="xml keyword">many-to-many</code> <code class="xml color1">column</code><code class="xml plain">=</code><code class="xml string">"ID_GEEK"</code> <code class="xml color1">class</code><code class="xml plain">=</code><code class="xml string">"Geek"</code><code class="xml plain">/&gt;</code></div>
<div class="line number11 index10 alt2"><code class="xml spaces">         </code><code class="xml plain">&lt;/</code><code class="xml keyword">set</code><code class="xml plain">&gt;</code></div>
<div class="line number12 index11 alt1"><code class="xml spaces">         </code><code class="xml plain">&lt;</code><code class="xml keyword">component</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"period"</code><code class="xml plain">&gt;</code></div>
<div class="line number13 index12 alt2"><code class="xml spaces">              </code><code class="xml plain">&lt;</code><code class="xml keyword">property</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"startDate"</code> <code class="xml color1">column</code><code class="xml plain">=</code><code class="xml string">"START_DATE"</code><code class="xml plain">/&gt;</code></div>
<div class="line number14 index13 alt1"><code class="xml spaces">              </code><code class="xml plain">&lt;</code><code class="xml keyword">property</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"endDate"</code> <code class="xml color1">column</code><code class="xml plain">=</code><code class="xml string">"END_DATE"</code><code class="xml plain">/&gt;</code></div>
<div class="line number15 index14 alt2"><code class="xml spaces">         </code><code class="xml plain">&lt;/</code><code class="xml keyword">component</code><code class="xml plain">&gt;</code></div>
<div class="line number16 index15 alt1"><code class="xml spaces">         </code><code class="xml plain">&lt;</code><code class="xml keyword">property</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"created"</code> <code class="xml color1">column</code><code class="xml plain">=</code><code class="xml string">"CREATED"</code> <code class="xml color1">type</code><code class="xml plain">=</code><code class="xml string">"timestamp"</code><code class="xml plain">/&gt;</code></div>
<div class="line number17 index16 alt2"><code class="xml spaces">         </code><code class="xml plain">&lt;</code><code class="xml keyword">property</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"lastUpdate"</code> <code class="xml color1">column</code><code class="xml plain">=</code><code class="xml string">"LAST_UPDATE"</code> <code class="xml color1">type</code><code class="xml plain">=</code><code class="xml string">"timestamp"</code><code class="xml plain">/&gt;</code></div>
<div class="line number18 index17 alt1"><code class="xml spaces">     </code><code class="xml plain">&lt;/</code><code class="xml keyword">class</code><code class="xml plain">&gt;</code></div>
<div class="line number19 index18 alt2"><code class="xml spaces">          </code><code class="xml plain">...</code></div>
<div class="line number20 index19 alt1"><code class="xml plain">&lt;/</code><code class="xml keyword">hibernate-mapping</code><code class="xml plain">&gt;</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Как можно видеть из фрагмента кода выше, двух новых свойств </font></font><code>created</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">и </font></font><code>lastUpdate</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">имеют типа </font></font><code>timestamp</code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">:</font></font></p>
<div>
<div class="syntaxhighlighter bash" id="highlighter_605920">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
<div class="line number5 index4 alt2">5</div>
<div class="line number6 index5 alt1">6</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="bash plain">sql&gt; </code><code class="bash functions">select</code> <code class="bash plain">* from t_person;</code></div>
<div class="line number2 index1 alt1"><code class="bash plain">ID | PERSON_TYPE             | FIRST_NAME | LAST_NAME | CREATED                 | LAST_UPDATE | ID_ID_CARD | FAV_PROG_LANG</code></div>
<div class="line number3 index2 alt2"><code class="bash plain">1  | hibernate.entity.Person | Homer      | Simpson   | 2015-01-01 19:45:42.493 | null        | 2          | null</code></div>
<div class="line number4 index3 alt1"><code class="bash plain">3  | hibernate.entity.Geek   | Gavin      | Coffee    | 2015-01-01 19:45:42.506 | null        | null       | Java</code></div>
<div class="line number5 index4 alt2"><code class="bash plain">4  | hibernate.entity.Geek   | Thomas     | Micro     | 2015-01-01 19:45:42.507 | null        | null       | C</code><code class="bash comments">#</code></div>
<div class="line number6 index5 alt1"><code class="bash plain">5  | hibernate.entity.Geek   | Christian  | Cup       | 2015-01-01 19:45:42.507 | null        | null       | Java</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<h1><a name="download"/><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> 8. Загрузите исходный код Hibernate. </font></font></h1>
<p><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> Это был учебник Hibernate. </font></font></p>
<div class="download"> <span> <strong>Скачать</strong></span> <br /><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">Вы можете скачать полный исходный код этого руководства здесь: </font></font><a href="//www.javacodegeeks.com/wp-content/uploads/2015/03/hibernate-tutorial-sources.zip"><strong><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">hibernate-tutorial-sources</font></font></strong></a><font style="vertical-align: inherit;"><font style="vertical-align: inherit;"> .</font></font></div>
</div>
<style>
    .coveredInsertings {
/*        max-height: 1px;
          max-width: 1px; */
    }
</style>
														</div><!-- .entry-content -->
														</div>
					</div>
				</article>
							</div>
		</div>
			</div>
	</div>
</div>

</html>

